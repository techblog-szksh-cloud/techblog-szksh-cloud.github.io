<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://techblog.szksh.cloud/</id>
    <title>Melody Blog</title>
    <updated>2022-08-24T09:30:55.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://techblog.szksh.cloud/"/>
    <subtitle>Melody Blog</subtitle>
    <icon>https://techblog.szksh.cloud/http://github.com/suzuki-shunsuke.png</icon>
    <rights>Copyright © 2018 Shunsuke Suzuki.</rights>
    <entry>
        <title type="html"><![CDATA[2022-08 振り返り]]></title>
        <id>/what-i-did-2022-08</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-08"/>
        <updated>2022-08-24T09:30:55.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><p>仕事はあまり書けることもないんですが、元気にやっています。
tfcmt, github-comment, aqua をとあるリポジトリに導入しました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aquaprojaqua">aquaproj/aqua<a class="hash-link" href="#aquaprojaqua" title="Direct link to heading">​</a></h3><p>ツールのインストール時に checksum を検証する機能の開発を進めています。
基本的な機能の開発は既に出来ていて prerelease も出しています。
あとは現職に導入してフィードバックをもらいながら正式リリースに持っていきたいと思っています。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.com/aquaproj/aqua/issues/427" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/aquaclivm/status/1559535842061733894" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-registry">aqua-registry<a class="hash-link" href="#aqua-registry" title="Direct link to heading">​</a></h3><p>v3.20.0 =&gt; <a href="https://github.com/aquaproj/aqua-registry/releases/tag/v3.42.0" target="_blank" rel="noopener noreferrer">3.42.0</a></p><p>Package 数が 702 から 803 まで増えました。
Contribution してくださった方々、ありがとうございます。</p><p>今月は Pull Request の数がすごくて 91 個の PR がマージされました。</p><ul><li>Renovate 以外 132 個 <a href="https://github.com/aquaproj/aqua-registry/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-08-01..2022-08-31+-author%3Aapp%2Frenovate+" target="_blank" rel="noopener noreferrer">Merged Pull Requests</a></li><li>suzuki-shunsuke 41 個 <a href="https://github.com/aquaproj/aqua-registry/pulls?q=is%3Apr+is%3Aclosed+merged%3A2022-08-01..2022-08-31+author%3Asuzuki-shunsuke" target="_blank" rel="noopener noreferrer">Merged Pull Requests</a></li></ul><p>ありがたい話ですし、これほどの PR が来る OSS を開発できたことを誇りに思います。</p><p>aqua-registry がサポートするツールの数が 800 を超えました。
ちなみに asdf-plugins がサポートする数は 2022-08-30 時点で 514 なので、 asdf よりだいぶ多くなりました。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ asdf plugin list all | wc -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     514</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1564617121111621674" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>また、 GitHub の API rate limit に引っかかるようになったので対応しました。</p><ul><li>github.token を使う</li><li>main branch で test するのやめる</li><li>ci-info の結果を cache</li></ul><p>後述する aqua registry のための framework を使って CI とローカル開発を大きく改善しました。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-registry-のための-framework">aqua registry のための framework<a class="hash-link" href="#aqua-registry-のための-framework" title="Direct link to heading">​</a></h3><p>aqua Registry を開発するための Framework をリリースしました。
主な aqua Registry といえば <a href="https://github.com/aquaproj/aqua-registry" target="_blank" rel="noopener noreferrer">Standard Registry</a> ですが、
組織内の private なツールのための Private Registry を作ることも出来ます。
aqua-registry を開発するためのコードは元々 aqua-registry のリポジトリ内に置いてありましたが、
それを Private Registry を開発するのにも使えるよう、別の OSS として切り出しました。
また、 Private Registry の Template Repository とドキュメントも整備しました。</p><ul><li><a href="https://github.com/aquaproj/registry-tool" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/registry-tool</a></li><li><a href="https://github.com/aquaproj/template-private-aqua-registry" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/template-private-aqua-registry</a></li><li><a href="https://github.com/aquaproj/registry-action" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/registry-action</a></li><li><a href="https://aquaproj.github.io/docs/reference/create-private-registry" target="_blank" rel="noopener noreferrer">https://aquaproj.github.io/docs/reference/create-private-registry</a></li></ul><p>自分も社内のツールのための Private Registry を作るのにこれらを使っています。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-installer">aqua-installer<a class="hash-link" href="#aqua-installer" title="Direct link to heading">​</a></h3><p>aqua-installer を GopherJS を使って JavaScript Action に出来ないか検証しました。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://zenn.dev/shunsuke_suzuki/scraps/3b7eee7ca8d3ad" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.com/aquaproj/aqua-installer/pull/144" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>結論を言うと今はまだやめたほうが良さそうということで諦めました。
興味のある人は zenn の scrap を見てみてください。
将来的に GopherJS がより成熟してきたらまた検討するかもしれません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-renovate-config">aqua-renovate-config<a class="hash-link" href="#aqua-renovate-config" title="Direct link to heading">​</a></h3><p><code>go</code> datasource をサポートしたら warning が大量に出るようになったので対応しました。</p><ul><li><a href="https://github.com/aquaproj/aqua-renovate-config/releases/tag/1.2.1" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua-renovate-config/releases/tag/1.2.1</a></li><li><a href="https://github.com/aquaproj/aqua-renovate-config/releases/tag/1.2.2" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua-renovate-config/releases/tag/1.2.2</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt">tfcmt<a class="hash-link" href="#tfcmt" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v3.4.0" target="_blank" rel="noopener noreferrer">v3.4.0</a><ul><li>commit hash に関連した PR を取得して PR にコメントするようにしました</li></ul></li></ul><p>GitHub 側の仕様変更で、今月になって commit に対する comment が PR の timeline に表示されなくなりました。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.blog/changelog/2022-08-04-commit-comments-no-longer-appear-in-the-pull-request-timeline/" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>そのため、 CI で push event を hook して commit にコメントをしている場合、 tfcmt plan の結果が PR に表示されなくなるというケースがありました。</p><p>そこで commit hash に関連した PR を取得して PR にコメントするようにしました。
なお、元々 pull_request event を hook するなどして PR 番号が tfcmt に渡っている場合は関係ありません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfaction">tfaction<a class="hash-link" href="#tfaction" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfaction/releases/tag/v0.5.15" target="_blank" rel="noopener noreferrer">v0.5.15</a>: tfmigrate-apply 中の typo の修正</li><li><a href="https://github.com/suzuki-shunsuke/tfaction/releases/tag/v0.5.16" target="_blank" rel="noopener noreferrer">v0.5.16</a><ul><li>tfmigrate が history の保存先に GCS をサポートしたことのに合わせて、 tfmigrate-plan job で .tfmigrate.hcl を scaffold する際に GCS を指定できるようになりました</li><li>gsutil が Workload Identity Federation をサポートしたことに合わせて、 setup job の中で最新の gsutil をインストールするようになりました</li><li>これにより、それまで AWS を利用することが前提だったのが、 AWS の代わりに GCP を使うことができるようになりました</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="github-comment">github-comment<a class="hash-link" href="#github-comment" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v4.5.0" target="_blank" rel="noopener noreferrer">v4.5.0</a></li></ul><p>上記の tfcmt と同様の変更を github-comment にもしました。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="ci-info">ci-info<a class="hash-link" href="#ci-info" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/ci-info/releases/tag/v2.1.0" target="_blank" rel="noopener noreferrer">v2.1.0</a><ul><li>public repository なら GitHub Access Token なしで動くようにしました</li></ul></li><li><a href="https://github.com/suzuki-shunsuke/ci-info/releases/tag/v2.1.1" target="_blank" rel="noopener noreferrer">v2.1.1</a><ul><li>arm64 support</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-の新規開発-">OSS の新規開発 🚀<a class="hash-link" href="#oss-の新規開発-" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="gha-trigger">gha-trigger<a class="hash-link" href="#gha-trigger" title="Direct link to heading">​</a></h3><p>まだ開発中ですが、新しい OSS を開発しています。詳細はまたいずれ書けたらと思います。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.com/suzuki-shunsuke/gha-trigger" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他">その他<a class="hash-link" href="#その他" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-picker-third-party">Aqua Picker (Third Party)<a class="hash-link" href="#aqua-picker-third-party" title="Direct link to heading">​</a></h3><p>公式ではないですが、 aqua に色々 Contribution してくださっている <a href="https://twitter.com/4513echo" target="_blank" rel="noopener noreferrer">4513echo</a> さんが作られているサイトです。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://aqua-picker.deno.dev/" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/4513echo/status/1556953063365025798" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/4513echo/status/1558711976741572608" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/4513echo/status/1560054691827855360" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>ありがたい話です。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="chrome-の-tab-を手動で-group-作って整理するようにしてみた">Chrome の tab を手動で group 作って整理するようにしてみた<a class="hash-link" href="#chrome-の-tab-を手動で-group-作って整理するようにしてみた" title="Direct link to heading">​</a></h3><p>tab たくさん開きすぎて目的のページが見つからなくなって手当たりしだいに閉じるみたいなのをなんとかしたいとは前から思ってました。</p><p>たまに Chrome の拡張機能をググったりしつつもどれもしっくりこず、特に何も対策を打たずに来ましたが、
最近 Chrome 標準の Grouping 機能を使って、業務のトピックごとに Group を使って整理するようにしてみました。</p><p>それなりにうまくいってますが、まだ改善の余地はありそうな感じはするので、模索していきたいと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他のその他">その他のその他<a class="hash-link" href="#その他のその他" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua">aqua<a class="hash-link" href="#aqua" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.com/aquaproj/aqua/issues/1076" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>GitHub Sponsor になると言ってもらえてありがたい。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/hiro_o918/status/1554845898194108418" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>雑に使えるというのは、学習コストの低さの表れかなと思います。
これは team や project にツールを導入し、普及していく上ではとても重要なことです。
個人で使う分には多少学習コストが高くても好きなものを使えば良いですが、
他の人にも広めていく上では学習コストの低さは極めて重要です。
仕事で使う場合には学習することが目的ではなく、他にもやるべきことがあるはずなので、
そういう状態でもストレスなく、簡単に使えることがスムーズに導入を進める上で大事です。
なので、学習コストが低くて team や project に導入しやすいという意味でも、 個人の dotfiles だけでなく team, project で使うツールのバージョン管理にも aqua が広がっていくと良いなと思っています。</p><p>また、雑に使えると言っても、 aqua では registry も含めて version を厳格に固定し管理され、バージョンの差異による問題が起こらないようになっています。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/LGUG2Z/status/1562129310219059200" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>こうやって徐々に認知されていくのはいい話ですね。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/ponkio_o/status/1562352036028461056" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/ponkio_o/status/1562356254991089669" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-registry-1">aqua-registry<a class="hash-link" href="#aqua-registry-1" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/ponkio_o/status/1556532831324884992" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/kei711_/status/1561855780424679425" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/sukukyon/status/1560587208025063425" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/ryodocx/status/1562847088006021121" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>PR お待ちしてます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt-1">tfcmt<a class="hash-link" href="#tfcmt-1" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1557334525381730304" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/koki_develop/status/1560188434227965952" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfaction-1">tfaction<a class="hash-link" href="#tfaction-1" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/practainc/status/1555430142545399809" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/sonic883b/status/1557060143312805888" width="300" height="150" frameborder="0" scrolling="no"></iframe><blockquote><p>GCPでのworkload identityと連携できるか</p></blockquote><p>できます。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/Kengo_TODA/status/1564576050671075329" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 class="anchor anchorWithStickyNavbar_mojV" id="github-comment-1">github-comment<a class="hash-link" href="#github-comment-1" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/ponkio_o/status/1555119431260729344" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>github-comment でコメントが長すぎた場合に、代わりのコメントを post する設定です。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/ponkio_o/status/1561046628269961216" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>inspire しました。</p><blockquote><p>It is inspired from <a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/github-comment</a>.</p></blockquote><h3 class="anchor anchorWithStickyNavbar_mojV" id="ci-info-1">ci-info<a class="hash-link" href="#ci-info-1" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1561735944213958661" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>ci-info が自動で環境変数から commit hash などの情報を取得してくれるという話ですね。
内部的には go-ci-env というライブラリを使っています。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.com/suzuki-shunsuke/go-ci-env" width="300" height="150" frameborder="0" scrolling="no"></iframe>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022-07 振り返り]]></title>
        <id>/what-i-did-2022-07</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-07"/>
        <updated>2022-07-30T09:30:55.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><p>今月から Mercari の Platform Group の Platform DX team のメンバーとして仕事をしています。
英語で若干苦労している部分はありますがなんとかやっています。</p><p>このご時世なので同僚の方とオフラインで会うことは当分無いだろうなと思っていましたが、
2 回ぐらい歓迎会をして頂き(オンラインを含めるともっとある)、顔を合わせることができました。</p><p>ドキュメントはかなり整ってますし、わからないことは聞けば教えてもらえますし、毎日メンターと 10 ~ 15 分程度 1on1 をやっているので順調にオンボーディングを進められているかなという気がしています。</p><p>自動化の仕組みとかはかなり整っていますが、
<a href="https://aquaproj.github.io/" target="_blank" rel="noopener noreferrer">aqua</a> や <a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">tfcmt</a>, <a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">github-comment</a> といった自分が開発している OSS を活用して更に DX を高めたりコードを綺麗にしてメンテナンス性を高めることができるのではないかなと感じています。</p><p>現在幾つかのタスクに取り組みつつ、上記のツールを導入するためにツール側を若干修正しています。
新しい環境に移ることで今まで見えてなかった部分が見えてツールを進化させることが出来ていていい話だなと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aquaprojaqua">aquaproj/aqua<a class="hash-link" href="#aquaprojaqua" title="Direct link to heading">​</a></h3><p>v1.15.1 =&gt; v1.18.0</p><ul><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.16.0" target="_blank" rel="noopener noreferrer">v1.16.0</a><ul><li><code>aqua g</code> の検索結果の表示を改善</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.17.0" target="_blank" rel="noopener noreferrer">v1.17.0</a><ul><li>log のカラー出力を環境変数で制御できるようにした</li><li>progress bar をデフォルトで無効化した。環境変数で有効化できるようにした</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.18.0" target="_blank" rel="noopener noreferrer">v1.18.0</a><ul><li><code>aqua cp</code> コマンドのサポート<ul><li>Docker image などにツールをインストールし、 aqua なしで実行できるようにする際に便利</li></ul></li></ul></li></ul><p>aqua cp を使った Docker image の build に関しては以下に書きました。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://aquaproj.github.io/docs/tutorial-extras/build-container-image/" width="300" height="150" frameborder="0" scrolling="no"></iframe><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-registry">aqua-registry<a class="hash-link" href="#aqua-registry" title="Direct link to heading">​</a></h3><p>v3.5.0 =&gt; v3.20.0</p><p>Package 数が 637 から 702 まで増えました。
Contribution してくださった方々、ありがとうございます。</p><p>あと、 aqua-registry に contribution するためのシェルスクリプト <code>generate-registry.sh</code> や <code>scaffold.sh</code> を Go で書き直したり、新たに <code>create-pr-new-pkg</code> というコマンドを追加したりしました。
Go で書き直すことで Windows でも動くようになりました。
scaffold してから PR を作成するまでが自動化できるようになり、より簡単に contribution できるようになりました。かなり便利です。</p><p>例えば以下の 3 コマンドで <a href="https://github.com/kevwan/depu" target="_blank" rel="noopener noreferrer">kevwan/depu</a> を追加する PR を作成できてしまいました。 <a href="https://github.com/aquaproj/aqua-registry/pull/4992" target="_blank" rel="noopener noreferrer">#4992</a></p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ go run ./cmd/scaffold kevwan/depu # scaffold</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ depu --help # 動作確認</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ go run ./cmd/create-pr-new-pkg kevwan/depu # PR 作成</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>また Style Guide を整えました。</p><p><a href="https://aquaproj.github.io/docs/reference/registry-style-guide" target="_blank" rel="noopener noreferrer">https://aquaproj.github.io/docs/reference/registry-style-guide</a></p><p>そして既存のコードを Style Guide に合わせて修正しました。</p><p>Package 数が 700 を超え、順調にパッケージの数は増え続けています。
これも簡単に新しいパッケージを追加できるアーキテクチャも含めた仕組み作りの賜物です。
ユーザーからは見えにくい部分ですが、この辺の良さも伝わればいいなと思います。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt">tfcmt<a class="hash-link" href="#tfcmt" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v3.3.0" target="_blank" rel="noopener noreferrer">v3.3.0</a><ul><li>Google Cloud Build を標準でサポート</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="github-comment">github-comment<a class="hash-link" href="#github-comment" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v4.3.0" target="_blank" rel="noopener noreferrer">v4.3.0</a><ul><li>post command で既存のコマンドの更新をサポート</li><li>ARM64 をサポート</li></ul></li><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v4.4.0" target="_blank" rel="noopener noreferrer">v4.4.0</a><ul><li>Google Cloud Build を標準でサポート</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="go-ci-env">go-ci-env<a class="hash-link" href="#go-ci-env" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/go-ci-env/releases/tag/v3.0.0" target="_blank" rel="noopener noreferrer">v3.0.0</a><ul><li>API を大幅に修正し、使いやすくした</li><li><code>generic</code> package を削除</li><li><code>Add</code> function を追加し、独自の Platform をサポートしやすくした</li><li><code>JobURL</code> を追加</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfaction">tfaction<a class="hash-link" href="#tfaction" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfaction/releases/tag/v0.5.13" target="_blank" rel="noopener noreferrer">v0.5.13</a><ul><li>tfaction.yaml と tfaction-root.yaml で環境変数を設定できるようになりました。特定の working directory で terraform の <code>-parallelism</code> を変えたいときとかに便利です</li></ul></li><li><a href="https://github.com/suzuki-shunsuke/tfaction/releases/tag/v0.5.14" target="_blank" rel="noopener noreferrer">v0.5.14</a><ul><li>v0.5.13 で生じた、 terraform apply を実行する際に GCS から plan file をダウンロードするのに失敗するバグを修正しました (GCS じゃなくて S3 を使っている場合は関係ありません)</li></ul></li></ul><p>tfaction, もしかして某W社でも使われている(?)</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他">その他<a class="hash-link" href="#その他" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-の-twitter-アカウントを作ってみた">aqua の Twitter アカウントを作ってみた<a class="hash-link" href="#aqua-の-twitter-アカウントを作ってみた" title="Direct link to heading">​</a></h3><p><a href="https://twitter.com/aquaclivm" target="_blank" rel="noopener noreferrer">@aquaclivm</a>
あとは hash tag <a href="https://twitter.com/hashtag/aquaclivm" target="_blank" rel="noopener noreferrer">#aquaclivm</a> を活用し始めました(ちょくちょくつけるの忘れますが)。
<code>aqua</code> というワードがあまりにも一般的すぎて検索しても aqua が埋もれて見つけられないので、 aqua に関して呟くときは @aquaclivm をメンションするなり hash tag をつけるなりしてもらえると助かります。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="starship-yggdrootleaderf-を導入">starship, Yggdroot/LeaderF を導入<a class="hash-link" href="#starship-yggdrootleaderf-を導入" title="Direct link to heading">​</a></h3><p>仕事用の PC をセットアップした際、今まで使ってた denite.nvim や kube-ps1 がうまく動かず、調べるのも面倒なので別のツールに乗り換えました。</p><ul><li><a href="https://github.com/Yggdroot/LeaderF" target="_blank" rel="noopener noreferrer">https://github.com/Yggdroot/LeaderF</a></li><li><a href="https://github.com/starship/starship" target="_blank" rel="noopener noreferrer">https://github.com/starship/starship</a></li><li><a href="https://github.com/yuru7/HackGen" target="_blank" rel="noopener noreferrer">https://github.com/yuru7/HackGen</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他のその他">その他のその他<a class="hash-link" href="#その他のその他" title="Direct link to heading">​</a></h2><p><code>aqua gr</code> コマンドすごい便利。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/tadayosi/status/1542803440837234688" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>fish で aqua を補完できるようにした話です。いい話</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://weblog.grimoh.net/entry/2022/07/31/135537" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>いい話</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/gr1m0h/status/1553043965166755840" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>わかる。みんなにこの良さを知ってほしい</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/dubs11kt/status/1549372407017721856" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>初物理出社時の記念写真</p><p><img src="https://user-images.githubusercontent.com/13323303/182027235-161a89a8-e6c1-4bd7-bb00-71675f203942.png" alt="image"></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022-06 振り返り]]></title>
        <id>/what-i-did-2022-06</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-06"/>
        <updated>2022-06-28T05:16:55.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><p>05-18 がリクルートでの最終出社日でした。 <a href="https://techblog.szksh.cloud/job-change-2022-06/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/job-change-2022-06/</a></p><p>なので今月は丸々休みです。来月 07-01 から働きます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="日報">日報(?)<a class="hash-link" href="#日報" title="Direct link to heading">​</a></h2><p><a href="https://zenn.dev/shunsuke_suzuki/scraps/dbfdeb67518c52" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/dbfdeb67518c52</a></p><p>zenn で日報のようなものを書いてみました。休み中なのに偉い。
06-07 だけ何も書いてないですね。この日はグダグダ漫画読んでたのかもしれません。
でも基本は休み中もずっと OSS のメンテしてました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://zenn.dev/shunsuke_suzuki/articles/aqua-windows-support" target="_blank" rel="noopener noreferrer">2022-06-23 CLI Version Manager の aqua が Windows をサポート</a></li><li><a href="https://zenn.dev/shunsuke_suzuki/articles/aqua-go-build-support" target="_blank" rel="noopener noreferrer">2022-06-08 aqua が Go 製のツールのビルドをサポート</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aquaprojaqua">aquaproj/aqua<a class="hash-link" href="#aquaprojaqua" title="Direct link to heading">​</a></h3><p>Windows 対応は非常に大きな改修でしたが、反響がほぼなくて残念でした。</p><p>v1.9.0 =&gt; v1.15.0</p><ul><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.10.0" target="_blank" rel="noopener noreferrer">v1.10.0</a><ul><li>パフォーマンスチューニングのために <code>-trace</code> と <code>-cpu-profile</code> option を追加</li><li><code>go install</code> によるツールのインストールをサポート</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.10.0" target="_blank" rel="noopener noreferrer">v1.10.1</a>, <a href="https://github.com/aquaproj/aqua/releases/tag/v1.10.2" target="_blank" rel="noopener noreferrer">v1.10.2</a><ul><li>異常系のエラーハンドリングを改善</li><li>aqua はツールの性質上、 invalid な設定ファイルをなるべく許容しないといけない</li><li><a href="https://zenn.dev/link/comments/bb67b39f122f25" target="_blank" rel="noopener noreferrer">https://zenn.dev/link/comments/bb67b39f122f25</a></li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.11.0" target="_blank" rel="noopener noreferrer">v1.11.0</a><ul><li>Bash, Zsh でコマンドを補完をサポート</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.12.0" target="_blank" rel="noopener noreferrer">v1.12.0</a><ul><li>Windows を正式にサポート</li><li><code>supported_envs</code> の追加</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.12.1" target="_blank" rel="noopener noreferrer">v1.12.1</a><ul><li><code>supported_envs</code> に関するバグ修正</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.13.0" target="_blank" rel="noopener noreferrer">v1.13.0</a><ul><li>Windows でログに色がつくように修正</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.14.0" target="_blank" rel="noopener noreferrer">v1.14.0</a><ul><li>JSON Schema の修正</li><li>Registry のコードを scaffold するコマンド <code>aqua gr</code> コマンドを追加<ul><li>Registry の設定を自分で書く人にとっては非常に便利</li></ul></li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.14.1" target="_blank" rel="noopener noreferrer">v1.14.1</a><ul><li>Windows 関連のバグを修正</li></ul></li><li><a href="https://github.com/aquaproj/aqua/releases/tag/v1.15.0" target="_blank" rel="noopener noreferrer">v1.15.0</a><ul><li><code>aqua g</code> に <code>-s</code> オプションを追加して、 version を interactive に選択できるようにした</li><li>ツールの download 時に progress bar を表示</li></ul></li><li>動画収録<ul><li>宣伝のために動画収録</li><li><a href="https://zenn.dev/shunsuke_suzuki/scraps/210234e8fa39bf" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/210234e8fa39bf</a></li><li>英語で短いの撮りました: <a href="https://www.youtube.com/watch?v=adX_lloB3mY" target="_blank" rel="noopener noreferrer">https://www.youtube.com/watch?v=adX_lloB3mY</a></li><li>日本語で長め(10 ~ 30 分) くらいの動画も準備しています<ul><li><a href="https://zenn.dev/shunsuke_suzuki/scraps/c5e0da3c378e97" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/c5e0da3c378e97</a></li><li>ただ、 aqua を rename するならその後のほうが良いかなと思って保留</li></ul></li></ul></li><li>aqua のリネームを検討&amp;準備<ul><li><a href="https://zenn.dev/shunsuke_suzuki/scraps/fe8807a0296f33" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/fe8807a0296f33</a></li><li><a href="https://github.com/aquaproj/aqua/issues/881" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua/issues/881</a></li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-registry">aqua-registry<a class="hash-link" href="#aqua-registry" title="Direct link to heading">​</a></h3><p>v2.19.0 =&gt; v3.5.0</p><p>Package 数が 515 から 637 まで増えました。
<a href="https://github.com/aquaproj/aqua-registry/issues/4181" target="_blank" rel="noopener noreferrer">#4181</a> binenv が対応しているツールに関して、 aqua-registry でもだいたい対応しました。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt">tfcmt<a class="hash-link" href="#tfcmt" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v3.2.4" target="_blank" rel="noopener noreferrer">v3.2.4</a>: <code>-auto-approve</code> なしで tfcmt apply 実行できるようにしました。</li><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v3.2.5" target="_blank" rel="noopener noreferrer">v3.2.5</a>: Windows に対応しました</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="asciinema-trim">asciinema-trim<a class="hash-link" href="#asciinema-trim" title="Direct link to heading">​</a></h3><p><a href="https://github.com/suzuki-shunsuke/asciinema-trim/releases/tag/v0.1.2" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/asciinema-trim/releases/tag/v0.1.2</a></p><p>Windows に対応しました</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他">その他<a class="hash-link" href="#その他" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua-が紹介されました">aqua が紹介されました<a class="hash-link" href="#aqua-が紹介されました" title="Direct link to heading">​</a></h3><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://zenn.dev/zoetro/articles/9454a6231a1273" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>著者の zoetro さんは以前も aqua に関する記事を書いてくださいました。ありがたい話です。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://zenn.dev/zoetro/articles/eee98d772c2483" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Terraform や Kubernetes では様々な周辺ツールがあり、それらのツールの管理に aqua は非常に便利だと思います。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="windows-環境を用意するなら-amazon-workspaces-が便利">Windows 環境を用意するなら Amazon Workspaces が便利<a class="hash-link" href="#windows-環境を用意するなら-amazon-workspaces-が便利" title="Direct link to heading">​</a></h3><p><a href="https://zenn.dev/shunsuke_suzuki/scraps/6859774d379414" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/6859774d379414</a></p><p>aqua の Windows 対応で Windows 環境が必要だったので Amazon Workspaces を使いました。
とても簡単に Windows 環境を用意できるので便利でした。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt-plan-は-plan-ファイルを使っても実行できる">tfcmt plan は plan ファイルを使っても実行できる<a class="hash-link" href="#tfcmt-plan-は-plan-ファイルを使っても実行できる" title="Direct link to heading">​</a></h3><p>terraform plan の代わりに terraform show コマンドを使えば plan file を使って tfcmt でコメントできます。</p><p><a href="https://github.com/suzuki-shunsuke/tfcmt/issues/316" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfcmt/issues/316</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfaction-の-star-数がなぜか増えた">tfaction の Star 数がなぜか増えた<a class="hash-link" href="#tfaction-の-star-数がなぜか増えた" title="Direct link to heading">​</a></h3><p>理由はよくわかりませんが、結構 star 数が増えました。</p><p><img src="https://storage.googleapis.com/zenn-user-upload/737521634e44-20220605.png" alt="image"></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="renovate-が-github-actions-xyz-0-を-xyz-に-update-してくれない原因と修正方法">Renovate が GitHub Actions x.y.z-0 を x.y.z に update してくれない原因と修正方法<a class="hash-link" href="#renovate-が-github-actions-xyz-0-を-xyz-に-update-してくれない原因と修正方法" title="Direct link to heading">​</a></h3><p><a href="https://zenn.dev/shunsuke_suzuki/scraps/9b4a3e5e8f6925#comment-09bfe96f8a2c1d" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/9b4a3e5e8f6925#comment-09bfe96f8a2c1d</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="slide-作成は-google-slide-が自分にあってる">Slide 作成は Google Slide が自分にあってる<a class="hash-link" href="#slide-作成は-google-slide-が自分にあってる" title="Direct link to heading">​</a></h3><p>Slide をなにで作るか考えたりしましたが、結局 Google Slide が自分には合ってるのではないかという結論に至りました。
もっとも Slide ってあまりコスパが良くないので、ブログとかドキュメントのほうが良い気はしますね。</p><p><a href="https://zenn.dev/link/comments/888dbb8af3ca0a" target="_blank" rel="noopener noreferrer">https://zenn.dev/link/comments/888dbb8af3ca0a</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="マイク買ってみた">マイク買ってみた<a class="hash-link" href="#マイク買ってみた" title="Direct link to heading">​</a></h3><p><a href="https://www.amazon.co.jp/gp/product/B099ZZMGJ5" target="_blank" rel="noopener noreferrer">https://www.amazon.co.jp/gp/product/B099ZZMGJ5</a></p><p><img src="https://storage.googleapis.com/zenn-user-upload/3a302e3c9ba5-20220609.png" alt="image"></p><p>aqua の動画を撮るのに内臓のマイクだとイマイチな気がしたのでマイクを買ってみました。
有線のヘッドホンしないといけないのがちょっとマイナスですね。
QuickTime Player で録画してみたら、まぁ内臓のマイクよりはクリアな気がしますが、
音を拾いすぎている気もします。</p><p>買ったあとちょっと動画収録に使っただけであまり使ってないですが、来月から仕事でも使う機会あるのかな？内蔵マイクで十分な気もするけど。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="運動">運動<a class="hash-link" href="#運動" title="Direct link to heading">​</a></h3><p>アキレス腱が痛くて走れないんですが、卓球はなんとか出来ます。
マイラケットとマイシューズを買いました。
週1, 2 くらいでやってますが、仕事始まったら週1になるかも。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他のその他">その他のその他<a class="hash-link" href="#その他のその他" title="Direct link to heading">​</a></h2><p>tweet の埋め込み、もうちょいいい感じにしたいですね。</p><p>tfaction に関するコメント。ありがとうございます。すごい自動化されている感じがしていいですよね。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/irotoris/status/1536953830306287617" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>自分が LINE で Corporate Engineer やってた頃に作った Slack App が未だに現役らしくて感動しました。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1537674427269545984" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 class="anchor anchorWithStickyNavbar_mojV" id="さいごに">さいごに<a class="hash-link" href="#さいごに" title="Direct link to heading">​</a></h2><p>05-19 から 1 ヶ月以上に渡る有給消化が終わりました。
長い休みの間に新しい OSS を作ったりしたいとも思ってましたが、既存の OSS (主に aqua) のメンテで手一杯でした。
それでも aqua や tfcmt などを改善できたので良かったです。</p><p>来月から Mercari で働きます。
環境が大きく変わるはず(特に英語)なので、楽しみな半面ちょっと緊張します。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022-05 振り返り]]></title>
        <id>/what-i-did-2022-05</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-05"/>
        <updated>2022-05-28T05:16:55.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><p>05-18 がリクルートでの最終出社日でした。</p><p><a href="https://twitter.com/szkdash/status/1526875250646204417" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1526875250646204417</a></p><p><a href="https://twitter.com/szkdash/status/1527235538951974912" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1527235538951974912</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://dev.to/suzukishunsuke/support-building-tools-written-in-go-2l10" target="_blank" rel="noopener noreferrer">aqua supports building tools with Go</a></li><li><a href="https://techblog.szksh.cloud/github-re-request-review" target="_blank" rel="noopener noreferrer">Pull Request を再度 review してほしい場合は Re-request review をしましょう</a></li><li><a href="https://techblog.szksh.cloud/job-change-2022-06" target="_blank" rel="noopener noreferrer">転職します</a></li><li><a href="https://zenn.dev/shunsuke_suzuki/articles/renovate-issue-action" target="_blank" rel="noopener noreferrer">automerge できなかった Renovate の Pull Request を Issue として管理</a></li><li><a href="https://zenn.dev/shunsuke_suzuki/articles/cli-structured-logging" target="_blank" rel="noopener noreferrer">CLI での構造化ロギングのすすめ</a></li><li><a href="https://zenn.dev/shunsuke_suzuki/articles/tfcmt-apply-v322" target="_blank" rel="noopener noreferrer">tfcmt apply で通知先の取得方法を改善</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-contribution">OSS Contribution<a class="hash-link" href="#oss-contribution" title="Direct link to heading">​</a></h2><table><thead><tr><th>merged date</th><th>repository</th><th>lang</th><th>PR's short description</th></tr></thead><tbody><tr><td>2022-05-07</td><td><a href="https://github.com/terraform-linters/tflint-ruleset-aws" target="_blank" rel="noopener noreferrer">terraform-linters/tflint-ruleset-aws</a></td><td>go</td><td><a href="https://github.com/terraform-linters/tflint-ruleset-aws/pull/342" target="_blank" rel="noopener noreferrer">feat: support provider aliases</a></td></tr></tbody></table><p>Terraform の AWS Provider の Alias が設定されている場合でも tflint の AWS Plugin の Deep Check が正しく動くようにしました。</p><p><a href="https://github.com/terraform-linters/tflint-ruleset-aws/issues/331" target="_blank" rel="noopener noreferrer">https://github.com/terraform-linters/tflint-ruleset-aws/issues/331</a> を読むと分かりやすいかも。
これを実装する際にはメンテナの <a href="https://github.com/wata727" target="_blank" rel="noopener noreferrer">@wata727</a> さんに結構フォローしていただき、助かりました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="新規">新規<a class="hash-link" href="#新規" title="Direct link to heading">​</a></h3><p>特になし</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="update">Update<a class="hash-link" href="#update" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_mojV" id="demo">Demo<a class="hash-link" href="#demo" title="Direct link to heading">​</a></h4><p><a href="https://twitter.com/szkdash/status/1531555164800557056" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1531555164800557056</a></p><p>若干情報が古くなっていたので、デモ動画を作り直しました。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://zenn.dev/shunsuke_suzuki/scraps/37c85ae936a651" width="300" height="150" frameborder="0" scrolling="no"></iframe><h4 class="anchor anchorWithStickyNavbar_mojV" id="aquaprojaquaprojgithubio">aquaproj/aquaproj.github.io<a class="hash-link" href="#aquaprojaquaprojgithubio" title="Direct link to heading">​</a></h4><p><a href="https://github.com/aquaproj/aquaproj.github.io" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aquaproj.github.io</a></p><p>zenn と違って dev.to, medium で書いた記事は GitHub で管理されていなかったのが嫌だったので、
aquaproj.github.io で Blog を有効化して dev.to, medium の記事をコピーしてきました。
Canonical URL を設定しています。
新たに英語で記事を書く際にはこちらで書いて、 dev.to にクロスポストして Canonical URL を設定することにしました。</p><p>関連: <a href="https://zenn.dev/shunsuke_suzuki/scraps/43b8f553d08b6f" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/43b8f553d08b6f</a></p><p>あと DocSearch による検索がいつの間にか動かなくなっていたのでサポートに問い合わせました。 <a href="https://github.com/aquaproj/aquaproj.github.io/issues/76" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aquaproj.github.io/issues/76</a></p><h4 class="anchor anchorWithStickyNavbar_mojV" id="aquaprojaqua-registry">aquaproj/aqua-registry<a class="hash-link" href="#aquaprojaqua-registry" title="Direct link to heading">​</a></h4><p><a href="https://github.com/aquaproj/aqua-registry" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua-registry</a></p><p>v2.11.0 =&gt; v2.19.0 (ツール数: 470 =&gt; 515)</p><p>様々なツールを追加しています。
package type <code>go</code> のツールも追加しました。 <a href="https://github.com/aquaproj/aqua-registry/pull/3713" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua-registry/pull/3713</a></p><h4 class="anchor anchorWithStickyNavbar_mojV" id="aquaprojaqua">aquaproj/aqua<a class="hash-link" href="#aquaprojaqua" title="Direct link to heading">​</a></h4><p><a href="https://github.com/aquaproj/aqua" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua</a></p><ul><li>v1.5.0-0 =&gt; v1.9.0</li><li>v1.5.0: package 名のエイリアスをサポート<ul><li>リポジトリ名が変わったり、別の org に transfer されたりしたときのための機能</li></ul></li><li>v1.5.1<ul><li>同じツールを複数バージョンインストールする場合(基本そんなことしないけど)のバグを修正</li><li>Registry ファイルの拡張子が .json の場合、 JSON としてパース</li><li>リファクタリング</li></ul></li><li>v1.6.0<ul><li>standard registry の override のサポート: registry.yaml の代わりに registry.json を指定することで若干パフォーマンスが改善する</li><li>experimental feature という概念の導入<ul><li>execve(2) でコマンド実行をサポート。残念ながら macOS で正常に動作しないケースが見られるので experimental feature としてリリース</li></ul></li><li>retry の limit に引っかかった場合にエラーを返すようにした</li><li>リファクタリング</li></ul></li><li>v1.6.1<ul><li>log に GOOS と GOARCH を追加。問い合わせ時に便利</li><li>大幅なリファクタリング</li><li>unit test の大幅な追加</li></ul></li><li>v1.6.2<ul><li>v1.6.1 のバグ修正。 aqua g と aqua list で global configuration を読まなくなっていたのを修正</li></ul></li><li>v1.6.3<ul><li>aqua g で 1 件もマッチしなかった場合に panic が発生するのを修正</li></ul></li><li>v1.7.0<ul><li>Go 製のツールをインストール時に go build でビルドするのをサポート</li></ul></li><li>v1.8.0<ul><li>aqua g で GitHub Tag からバージョンを取得できるようにした</li></ul></li><li>v1.9.0<ul><li>github_archive, go で commit SHA を version として指定できるようにした</li></ul></li></ul><p>checksum の検証も POC として実装してみました。
しかし checksum のリストのファイルを Git で管理しないといけないのがユーザーの体験を損なうので、どうするのが良いのかよく分からず一旦置いています。</p><p><a href="https://github.com/aquaproj/aqua/issues/427" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj/aqua/issues/427</a></p><h4 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt">tfcmt<a class="hash-link" href="#tfcmt" title="Direct link to heading">​</a></h4><p><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfcmt</a></p><ul><li>v3.2.1 =&gt; v3.2.3</li><li>v3.2.2: apply の merge commit に関連する Pull Request を API で取得</li><li>v3.2.3: GitHub Enterprise Support の修正。 Graph QL API の Endpoint を変更できるようにした</li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="github-comment">github-comment<a class="hash-link" href="#github-comment" title="Direct link to heading">​</a></h4><p><a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/github-comment</a></p><ul><li>v4.1.1 =&gt; v4.2.0</li><li>v4.2.0: GitHub Enterprise のサポート</li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="renovate-issue-action">renovate-issue-action<a class="hash-link" href="#renovate-issue-action" title="Direct link to heading">​</a></h4><p><a href="https://github.com/suzuki-shunsuke/renovate-issue-action" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/renovate-issue-action</a></p><p>Project に追加できるようになったことで、だいぶ実用レベルに達した気がします。</p><p>v0.2.1 =&gt; v0.3.1</p><ul><li>v0.2.2<ul><li>Issue の title と body のデフォルトを改善</li><li>additional_body field の追加</li></ul></li><li>v0.2.3<ul><li>Issue を Project に追加できるようにした</li></ul></li><li>v0.3.0<ul><li>Issue の body 関連のフィールドを整理</li></ul></li><li>v0.3.1<ul><li>紛らわしいログを削除</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="asciinema-trim">asciinema-trim<a class="hash-link" href="#asciinema-trim" title="Direct link to heading">​</a></h4><p><a href="https://github.com/suzuki-shunsuke/asciinema-trim" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/asciinema-trim</a></p><p>v0.1.0 =&gt; v0.1.1</p><p>再生速度の変更をサポートしました。</p><p><a href="https://twitter.com/szkdash/status/1531563963057852416" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1531563963057852416</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他">その他<a class="hash-link" href="#その他" title="Direct link to heading">​</a></h2><ul><li>CLAS でオフィスチェアをレンタルしました</li><li><a href="https://www.amazon.co.jp/gp/product/B00FS9DK3C" target="_blank" rel="noopener noreferrer">英語「なるほど！」ライティング　通じる英文への15ステップ</a> を Kindle で読みました<ul><li><a href="https://twitter.com/szkdash/status/1530421071903858689" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1530421071903858689</a></li></ul></li><li><a href="https://open.spotify.com/show/1PUdFj8hXIZdyFat3nk3Af" target="_blank" rel="noopener noreferrer">もう一度読む SRE</a> を spotify で 1.5 倍速で聞いています</li><li>運動を頑張っています</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="clas-でオフィスチェアをレンタルしました">CLAS でオフィスチェアをレンタルしました<a class="hash-link" href="#clas-でオフィスチェアをレンタルしました" title="Direct link to heading">​</a></h3><p>以前からオフィスチェアに興味はあったものの、結構高いですしいきなり高いものを買って失敗するのは嫌だったのでレンタルで試すことにしました。
レンタルもはじめてなので一番安い (1,650 円 / 月) のから試すことにしました。</p><ul><li>MS-13 チェア ひじ無し ブラック</li><li><a href="https://clas.style/619" target="_blank" rel="noopener noreferrer">https://clas.style/619</a></li></ul><p>注文してから届くまでに 2 週間以上かかりました。 Amazon とかの翌日配送に慣れていたので、 2 週間以上かかることに驚きましたが、そういうものかと思うことにしました。</p><p>一番安いのにしたものの、座り心地は今までのよりだいぶ良いです。
今まで自分は背もたれに寄りかかっている感覚があまりなかったのですが、新しいのだと自然と腰に背もたれが当たって支えられているような感じがします。
と言いつつ、一番安いものなのでもっといいやつも試したいとは思っています。肘掛けが若干ほしいです。</p><p>オフィスチェアの他に興味あるものとしては、ベッドも興味あります。
ベッドのレンタルもあるようです。ただベッドの場合は、今使ってるやつをどうすればいいのかよくわからないし、オフィスチェアよりも面倒な気もします。</p><p><a href="https://clas.style/furniture/bed/" target="_blank" rel="noopener noreferrer">https://clas.style/furniture/bed/</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="運動">運動<a class="hash-link" href="#運動" title="Direct link to heading">​</a></h3><p>有給消化で時間に余裕もありますし、運動を週 5, 6 くらいでするようにしています。
元々食事には気を使っていてお酒も飲まないし間食もしないのですが、引きこもっていたら気づかぬうちに結構太っていました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他のその他">その他のその他<a class="hash-link" href="#その他のその他" title="Direct link to heading">​</a></h2><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://zenn.dev/shunsuke_suzuki/scraps/3fa8e603c3bf09" width="300" height="150" frameborder="0" scrolling="no"></iframe><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1529707316991660032" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>go-yaml は別に watch しているわけではないですが、 v3.0.0 の tag が打たれていることに気づきました。 v3 は長いこと tag が打たれてなくて使う気になれませんでしたが、
tag が打たれたということは stable になってきて安心して使えるということなのでしょうか？
v2 と v3 でどう変わってるか把握してないので、調べてみても良いかも</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1529463196062347264" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>WhiteSource が MEND に名称が変わったらしいです。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1527834722029965312" width="300" height="150" frameborder="0" scrolling="no"></iframe><p><a href="https://github.com/spf13/afero" target="_blank" rel="noopener noreferrer">https://github.com/spf13/afero</a> 便利</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1527281850355359745" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>GitHub Actions の pull_request closed event では workflow が trigger しないことがある</p><blockquote><p>GitHub doesn’t queue the merge commit job for closed PRs; So workflows using on: { pull_request: { types: <!-- -->[“closed”]<!-- --> } } will not consistently be triggered.</p></blockquote><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/szkdash/status/1523544052008112128" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Bot が team に対してメンションするには team を read する権限が必要</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://twitter.com/deeeet/status/1527460224189181952" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>Mercari の Security Team の Blog Series 読まねば</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[転職します]]></title>
        <id>/job-change-2022-06</id>
        <link href="https://techblog.szksh.cloud/job-change-2022-06"/>
        <updated>2022-05-19T10:22:40.000Z</updated>
        <summary type="html"><![CDATA[転職することになったのでその経緯とかを書こうかなと思います。]]></summary>
        <content type="html"><![CDATA[<p>転職することになったのでその経緯とかを書こうかなと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="現職ではなにをやっていたのか">現職ではなにをやっていたのか<a class="hash-link" href="#現職ではなにをやっていたのか" title="Direct link to heading">​</a></h2><p>現職では Recruit でスタディサプリ及び Quipper Product (Quipper School, Quipper Video) の SRE をやっていました。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://brand.studysapuri.jp/career/position/sre" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>2019-10-01 から Quipper Japan Branch の SRE team に Join し、
Quipper Japan Branch が 2021-10-01 に Recruit に統合されてからは Recruit の SRE をやっていました。
統合されてからも携わっているプロダクトや業務内容は特に変わってないので、 2 年 9 ヶ月ほど在籍していたことになります。</p><p><a href="https://github.com/suzuki-shunsuke/resume" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/resume</a> に職務経歴書を置いているのでそちらも参照してください。
ちなみにこのリポジトリは今回の転職の際に作ったのですが、このリポジトリが更新されているのに気づいて自分の転職をいち早く察した方もいたようでした。</p><p>SRE として様々なことを経験しましたが、特に自分は Terraform の CI/CD Pipeline の改善に注力してきました。
そしてその過程で様々な OSS を開発してきました。
詳細はブログや職務経歴書に書いてあるので割愛します。</p><p>コロナの流行に伴い途中から今に至るまでフルリモートになり、フルリモートだった期間のほうが長いです。
フルリモートになってからはオフィスにはワクチンの職域接種を除き 1 回しか行ってないですし、
同じチームでも自分の後に入社した方とは直接会ったことはないです。
ですが、 Slack や Google Meet などでコミュニケーションを取っていたので自分としては特に不便はありませんでした。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="スタサプ-sre-のすすめ">スタサプ SRE のすすめ<a class="hash-link" href="#スタサプ-sre-のすすめ" title="Direct link to heading">​</a></h3><p>IT の力で教育に変革を起こし、学びたい人がより自由に学べる世界を目指すスタディサプリ及び Quipper Product に関われて嬉しく思っています。
転職する自分が言うのもなんですが、スタサプの SRE チームは本当に恵まれた環境です。転職を考えている人は是非候補に入れてみてください。</p><p>スタサプ SRE の良いところ:</p><ul><li>同僚(SRE 以外も含む)が優秀<ul><li>ブログも是非読んでください: <a href="https://blog.studysapuri.jp/" target="_blank" rel="noopener noreferrer">https://blog.studysapuri.jp/</a></li></ul></li><li>現状に満足することなく、日々改善に取り組んでいる<ul><li>技術的な部分だでなく、 MTG などのあり方なども日々見直している</li><li>振り返りをし、課題と改善案を考え実行するというサイクルを日々回している</li></ul></li><li>自己完結なプロダクトチームのためのプラットフォームの開発を行っている<ul><li>SRE がプロダクトチームに依頼を受けてインフラを構築するのではない</li></ul></li><li>裁量が大きく、自分で課題を見つけて改善することが出来る<ul><li>なぜそれが必要なのか Issue を書くなど、説明責任は伴うが、ちゃんと説明できれば No とはあまり言われない</li><li>自走出来ない人には向きません</li></ul></li><li>情報が比較的オープン<ul><li>Slack の Private channel や DM でのコミュニケーションがほぼない</li><li>GitHub リポジトリもスタサプ関連のものならほぼ全部見れる</li><li>GitHub を検索すればだいたい情報が見つかる</li></ul></li><li>ドキュメントを書く文化もある</li><li>Postomortem や Design Doc, Production Readiness Check, SLI/SLO といった SRE の基本的なプラクティスが既に定着している</li><li>サービスが安定している<ul><li>サービスの性質上・ SNS でバズって急にスパイクするようなことがほぼない</li><li>基本的には k8s の Cluster Autoscaler や Horizontal Pod Autoscaler で対応できる(長期的なサービス拡大のために他にもやっていることはあります)</li><li>障害は少なく、深夜や休日に稼働しないといけないことも少ないので、 QOL を損なわない</li></ul></li></ul><p><a href="https://brand.studysapuri.jp/career/position/sre" target="_blank" rel="noopener noreferrer">https://brand.studysapuri.jp/career/position/sre</a> にもいいことが書いてあるので、読んでみてください。</p><p>あと、 Security に特化したポジションもあるので、そちらも興味があれば是非。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://brand.studysapuri.jp/career/position/product-security-engineer" width="300" height="150" frameborder="0" scrolling="no"></iframe><h2 class="anchor anchorWithStickyNavbar_mojV" id="転職への流れ">転職への流れ<a class="hash-link" href="#転職への流れ" title="Direct link to heading">​</a></h2><p>転職のきっかけは、 <a href="https://twitter.com/deeeet" target="_blank" rel="noopener noreferrer">@deeeet</a> さんから Twitter DM で声をかけていただいたことでした。
deeeet さんとは過去に 2 回ほど面識があり、最初は「<a href="https://twitter.com/deeeet/status/1192410426413182977" target="_blank" rel="noopener noreferrer">突撃 Terraform</a>」、2 回目は <a href="https://mercari.connpass.com/event/211073/" target="_blank" rel="noopener noreferrer">Open Policy Agent Rego Knowledge Sharing Meetup</a> というオンライン LT 会でした。
ただ、面識があるとはいえ deeeet さんが自分のことを認識しているとは思っていなかったので驚きました。
ここ何年か OSS の開発や blog の執筆などを精力的に行ってきたのが功を奏したのかもしれません。</p><p>DM で声をかけていただいてから直ぐにカジュアル面談をして頂き、その後直ぐ採用ページから応募しました。
職務経歴書の言語の指定は特にありませんでしたが、採用ページに日本語の JD がないことから、英語で書きました。
markdown で書いて <a href="https://github.com/simonhaenisch/md-to-pdf" target="_blank" rel="noopener noreferrer">md-to-pdf</a> で PDF に変換しました。
markdown で職務経歴書を書いたのははじめてですが、自分にとっては Word などと比べてずっと書きやすかったです。</p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://github.com/suzuki-shunsuke/resume" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>自分は今回のも含めて過去に 3 回転職をしていますが、
エージェントを介さずに直接応募したのははじめてでした。
過去 2 回の転職活動は色々な会社の募集要項に目を通して複数社の面接を受けて日程を調整して面接を受けに行ってと、なかなか精神的にも肉体的にも大変でした。
一方、今回は 1 社しか受けなかったこと、またこのご時世なので面接も全てリモートだったこともありだいぶ負担は少なかったです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="どこに転職するのか">どこに転職するのか<a class="hash-link" href="#どこに転職するのか" title="Direct link to heading">​</a></h2><p>2022-07-01 から、 Mercari の <a href="https://apply.workable.com/mercari/j/111722DA96/" target="_blank" rel="noopener noreferrer">Platform Group</a> に Join します。まだ1ヶ月以上先ですが、今から楽しみです。</p><p>Mercari には優秀なエンジニアが集まってますし、 <a href="https://twitter.com/deeeet/status/1482879967977684996" target="_blank" rel="noopener noreferrer">Platform Group の Blog Series</a> を読んで技術的にチャレンジングなことをやっていて面白そうだと感じました。
自分が現職で取り組んでいた Terraform CI/CD Pipeline などの改善にも通じる部分があり、自分の経験・強みを活かしつつ新しいことに挑戦できるのではないかと思いました。
Blog Series や OSS の公開など、社外にも技術をオープンにしているのも良い文化だと感じました。</p><p>現職でプラットフォームエンジニアリングのようなことをやっていく中で、
抽象化された UI/UX を提供すること・生産性を損なわずにプラットフォームのセキュリティを担保することがとても重要かつ難しい課題だと感じていて、
<a href="https://engineering.mercari.com/en/blog/entry/20220125-developer-experience-at-mercari/" target="_blank" rel="noopener noreferrer">Developer Experience at Mercari</a> や <a href="https://engineering.mercari.com/en/blog/entry/20220121-securing-terraform-monorepo-ci/" target="_blank" rel="noopener noreferrer">Securing Terraform monorepo CI</a> に書かれていることに共感しました。</p><p>余談ですが、とある方から転職するなら Hashicorp に転職して欲しいと言われました。
自分のこれまでの OSS の開発の経験を活かし、より多くの人・組織に使ってもらえる OSS の開発に携わってほしい(そのほうがより大きなバリューが出せる)という意図だと思いますが、
具体的な社名が出てくるとは思っていなかったのでびっくりしました。
どこに所属するにせよ、より多くの人・組織に使ってもらえるような OSS の開発をしていきたいですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="おまけ-oss-活動の振り返り">おまけ: OSS 活動の振り返り<a class="hash-link" href="#おまけ-oss-活動の振り返り" title="Direct link to heading">​</a></h2><p>転職の話とは関係ないですが、ついでにここ数年の OSS 活動などについても振り返りたいと思います。</p><p><a href="https://github.com/suzuki-shunsuke?tab=followers" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/github/followers/suzuki-shunsuke.svg?style=social&amp;label=Follow&amp;maxAge=2592000" alt="GitHub followers"></a></p><p>2022-05-19 時点の状況</p><p><a href="https://github.com/suzuki-shunsuke?tab=followers" target="_blank" rel="noopener noreferrer">GitHub Followers: 139</a></p><p><img src="https://user-images.githubusercontent.com/13323303/169187254-97423eb7-cdbf-485c-bcb5-6852c89b8669.png" alt="image"></p><p>やはり Star 数上位 3 つは思い入れがありますし、 <a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">github-comment</a> や <a href="https://github.com/suzuki-shunsuke/ci-info" target="_blank" rel="noopener noreferrer">ci-info</a> も便利なのでもっと評価されてほしいと思います。
色々なものを作ってきましたが、ここではこれらに絞って紹介します。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="aqua">aqua<a class="hash-link" href="#aqua" title="Direct link to heading">​</a></h3><p>一番思い入れがあるのは <a href="https://aquaproj.github.io/" target="_blank" rel="noopener noreferrer">aqua</a> です。
汎用的な CLI のバージョン管理ツールは色々ありそうで意外とあまりありません(多分)。
有名なのは <a href="https://asdf-vm.com/" target="_blank" rel="noopener noreferrer">asdf</a> くらいですが、これは自分が求めているものではありませんでした (<a href="https://nixos.org/" target="_blank" rel="noopener noreferrer">Nix</a> とかもあるけど、良く知りません) 。</p><p>バージョンを固定することで、バージョンの違いによるトラブルを起こらないようにすることができます。
aqua は使うのがとても簡単で、 (symbolic link さえ作られていれば) コマンド実行時に自動で指定したバージョンがインストールされバージョンが切り替わります。
aqua g による検索は使い勝手がよいです。 GitHub Actions で簡単に導入ができるよう Action が提供されています。</p><p>aqua は Renovate の Preset Config を提供しており、 Renovate を使って簡単に update の自動化ができます。
aqua は Renovate を最も上手く活用した OSS の一つだと思っています。</p><p>aqua には Registry という Ecosystem があります。
aqua 本体への contribution にはそれなりのハードルがあるかと思いますが、 <a href="https://github.com/aquaproj/aqua-registry" target="_blank" rel="noopener noreferrer">aqua-registry</a> という公式の Registry には簡単に Contribution することができます。
2022-05-19 時点でありがたいことに自分以外に <a href="https://github.com/aquaproj/aqua-registry/graphs/contributors" target="_blank" rel="noopener noreferrer">13 人の方に Contribution 頂いています</a>。
本体とは独立した拡張機構を持った OSS を作ることができたことにも満足しています。</p><p>aqua-registry に登録されているツールの数は、 2022-05-19 現在 <a href="https://github.com/asdf-vm/asdf-plugins" target="_blank" rel="noopener noreferrer">asdf-plugins</a> を超えました。
だから aqua のほうが優れているという話ではありませんが、 asdf と同等以上に多くのツールをサポートしているとは言えると思います。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ asdf plugin list all | wc -l   </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     470</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ aqua list | wc -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">     499</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>aqua はツールのインストールと継続的 update を非常に容易にします。
ツールをダウンロードして展開してインストールするような定型的なシェルスクリプトを書く必要はありませんし、いつまでも古いバージョンが使われることもありません。</p><p>また、 Go で GitHub Actions の Action を作りたいと行った場合に、態々 Action としてパッケージングせずに aqua で install して run step で実行するということもやりやすくなります。
例えば自分は <a href="https://github.com/suzuki-shunsuke/renovate-issue-action" target="_blank" rel="noopener noreferrer">renovate-issue-action</a> という GitHub Actions で実行することを前提とした CLI ツールを作っていますが、
これも態々 Action としてパッケージングせずに aqua で install して run step で実行するようにしています。</p><p>e.g.</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aquaproj/aqua</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">installer@v1.0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">aqua_version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v1.6.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> renovate</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">issue</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">action</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfaction">tfaction<a class="hash-link" href="#tfaction" title="Direct link to heading">​</a></h3><p><a href="https://github.com/suzuki-shunsuke/tfaction" target="_blank" rel="noopener noreferrer">tfaction</a> は GitHub Actions で Terraform の CI/CD Pipeline を構築するための Action の Collection です。
便利な単体の Action は色々あると思いますが、 workflow 全体をカバーするものはあまり他にないのではないかと思っています。
こういう CI/CD Pipeline はあまりオープンにされない面もあると思うので、それを OSS にできたことは有意義なことだと思っています。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfcmt">tfcmt<a class="hash-link" href="#tfcmt" title="Direct link to heading">​</a></h3><p><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">tfcmt</a> は CI で実行した terraform plan, apply の結果を Pull Request に分かりやすく通知する CLI ツールです。
<a href="https://github.com/mercari/tfnotify" target="_blank" rel="noopener noreferrer">tfnotify</a> のフォークですが、 GitHub への通知に特化する代わりに様々な機能改善を入れています。
GitHub を使っているのであれば tfcmt を個人的にはオススメします。
OSS は気に入らなければフォークすればいいとはよく言ったものですが(?)、実際にフォークして個人でここまで開発するとは、我ながらよくやったなと思います。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="github-comment">github-comment<a class="hash-link" href="#github-comment" title="Direct link to heading">​</a></h3><p><a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">github-comment</a> は Pull Request, Issue にコメントをしたりコメントを非表示にしたりする CLI ツールです。
使い方次第ですが、 CI をよりユーザーフレンドリーにし、 Developer と DevOps Engineer の双方の生産性を高めることもできるツールです。</p><p><a href="https://zenn.dev/shunsuke_suzuki/articles/improve-cicd-with-github-comment" target="_blank" rel="noopener noreferrer">github-comment で PR にコメントをして CI の結果を分かりやすくする</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="ci-info">ci-info<a class="hash-link" href="#ci-info" title="Direct link to heading">​</a></h3><p><a href="https://github.com/suzuki-shunsuke/ci-info" target="_blank" rel="noopener noreferrer">ci-info</a> は地味なツールですが、 CI に関連した情報を取得してファイルに書き出したり環境変数として出力する CLI ツールです。
CI を実装していると、 push event に関連する Pull Request とか、 Pull Request の label の list とか、 Pull Request で変更されたファイルの一覧とか、 Pull Request の Author とか欲しくなったりするのですが、そういった情報を取得するコードを毎回書くのは地味に面倒です。ページネーションとかも考えるとなおさらです。
また、 CircleCI や GitHub Actions など複数の CI Platform に対応していて、それらの違いを吸収する意味合いもあります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="さいごに">さいごに<a class="hash-link" href="#さいごに" title="Direct link to heading">​</a></h2><p>以上、現職でやってきたこと、転職の経緯、ここ数年やってきた OSS 開発について書きました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pull Request を再度 review してほしい場合は Re-request review をしましょう]]></title>
        <id>/github-re-request-review</id>
        <link href="https://techblog.szksh.cloud/github-re-request-review"/>
        <updated>2022-05-08T06:47:40.000Z</updated>
        <summary type="html"><![CDATA[Pull Request を再度 review してほしい場合には、 mention つきでコメントするのではなく、]]></summary>
        <content type="html"><![CDATA[<p>Pull Request を再度 review してほしい場合には、 mention つきでコメントするのではなく、
Re-request review をしましょう。
GitHub には再度 review 依頼するための機能があります。</p><p><img src="https://user-images.githubusercontent.com/13323303/167285404-c9a1a1ee-1a81-41b3-9b68-1a5dc0fc95f3.png" alt="image"></p><iframe class="hatenablogcard" style="width:100%;height:155px;max-width:680px" src="https://hatenablog-parts.com/embed?url=https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/about-pull-request-reviews#re-requesting-a-review" width="300" height="150" frameborder="0" scrolling="no"></iframe><p>mention つきのコメントでは、一度通知を見逃したり、後で対応しようと思って時間が経ってしまった場合に、
忘れられやすいという問題があります。</p><p>Re-request review を使うと mention 同様に通知がリアルタイムで通知が行くのに加え、 review 待ちの pull request を検索で絞り込めたり、自分の review 待ちの pull request を一覧できたりします。</p><p>自分の review 待ちの pull request 一覧: <a href="https://github.com/pulls/review-requested" target="_blank" rel="noopener noreferrer">https://github.com/pulls/review-requested</a></p><p>検索で絞り込み</p><ul><li>Awaiting review from you</li><li>Awaiting review from you or your team</li></ul><p><img src="https://user-images.githubusercontent.com/13323303/167285469-59caf353-ecc8-4f59-82eb-220077254cea.png" alt="image"></p><p>また、 Slack の integration で定期的に通知を飛ばしてリマインドすることで、忘れるのを防ぐことができます。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="practice" term="practice"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022-04 振り返り]]></title>
        <id>/what-i-did-2022-04</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-04"/>
        <updated>2022-05-05T05:16:55.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><ul><li>GitHub Discussions の検証</li><li>renovate-issue-action の導入</li><li>tfcmt で patch option の有効化</li><li>etc</li></ul><p>GitHub Discussions に仕事のナレッジを蓄積できないか検証したりしました。
Slack と比べてナレッジを蓄積しやすいのではないかと期待する一方、
Slack のようにその場で質問をしてすぐ解決するのには向かないかなという気もしました。
ちゃんとしたドキュメント書くよりはとりあえず Discussions に Q&amp;A 形式でナレッジを残しておくのは低コストでやれるかなと思う反面、手間もかかりそうです。
活用の仕方を模索すること、無理なく運用できるルールを定めること、組織・チームでツールの活用方法・使い分けの認識を合わせる必要がありそうです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://zenn.dev/shunsuke_suzuki/articles/tfcmt-plan-patch" target="_blank" rel="noopener noreferrer">tfcmt がコメントの更新をサポート</a></li><li><a href="https://dev.to/suzukishunsuke/tfcmt-supports-updating-comments-ebg" target="_blank" rel="noopener noreferrer">tfcmt supports updating comments</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="新規開発">新規開発<a class="hash-link" href="#新規開発" title="Direct link to heading">​</a></h3><table><thead><tr><th>first release date</th><th>name</th><th>badges</th><th>lang</th><th>type</th><th>short description</th></tr></thead><tbody><tr><td>2022-04-23</td><td><a href="https://github.com/suzuki-shunsuke/renovate-issue-action" target="_blank" rel="noopener noreferrer">renovate-issue-action</a></td><td><a href="https://github.com/suzuki-shunsuke/renovate-issue-action" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/github/last-commit/suzuki-shunsuke/renovate-issue-action.svg" alt="GitHub last commit"></a></td><td>go</td><td>cli for GitHub Actions</td><td>Create, update, and close GitHub Issues with GitHub Actions according to Renovate Pull Requests</td></tr><tr><td>2022-04-21</td><td><a href="https://github.com/suzuki-shunsuke/zap-error" target="_blank" rel="noopener noreferrer">zap-error</a></td><td><a href="https://github.com/suzuki-shunsuke/zap-error" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/github/last-commit/suzuki-shunsuke/zap-error.svg" alt="GitHub last commit"></a></td><td>go</td><td>library</td><td>Embed zap.Field into error</td></tr></tbody></table><h4 class="anchor anchorWithStickyNavbar_mojV" id="zap-error">zap-error<a class="hash-link" href="#zap-error" title="Direct link to heading">​</a></h4><p>zap-error は Go の error に zap.Field を埋め込み、構造化されたコンテキストを error に持たせてロギングできるようにするライブラリです。
Go では <code>fmt.Errorf</code> を使ってエラーにコンテキストを付与させるのが一般的ですが、 <code>fmt.Errorf</code> では構造化されたコンテキストを付与させることができません。
また、 uber-go/zap を始めとしたライブラリを使った構造化ロギングも一般的に行われることです。
であれば error に構造化されたコンテキストを付与しロギングに活用したいと思うのは個人的には自然なことだと思っています。
zap-error はそのための薄いライブラリです。 error に zap.Fields を付与する関数と、 error を zap.Fields に変換する関数の 2 つの API しか提供していません。
zap の logger をラップするようなことはしていないので zap はそのまま使えます。</p><p>ちなみに logrus 用の <a href="https://github.com/suzuki-shunsuke/logrus-error" target="_blank" rel="noopener noreferrer">logrus-error</a> というのも元々作っています。</p><h4 class="anchor anchorWithStickyNavbar_mojV" id="renovate-issue-action">renovate-issue-action<a class="hash-link" href="#renovate-issue-action" title="Direct link to heading">​</a></h4><p>Renovate ですんなり automerge 出来なかった Pull Request を Issue としてハンドリングするための GitHub Action です(正確には Action ではなくて CLI ですが)。
これはいずれちゃんとブログを書きたいですね。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="update">Update<a class="hash-link" href="#update" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/aquaproj/aqua-registry" target="_blank" rel="noopener noreferrer">aquaproj/aqua-registry</a><ul><li>遂に登録されているツールの数で asdf-plugins を超えました: <a href="https://twitter.com/szkdash/status/1518895119205683201" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1518895119205683201</a></li><li>v1.11.0 =&gt; v2.10.0</li></ul></li><li><a href="https://github.com/aquaproj/aqua" target="_blank" rel="noopener noreferrer">aquaproj/aqua</a><ul><li>v1.3.0-0 =&gt; v1.5.0-0</li><li>v1.3.0: overrides のサポート</li><li>v1.4.0: Registry のテスト向けに、 GOOS と GOARCH を環境変数で変更できるようにしました<ul><li>aqua-registry の CI でも使われていて、本来 CI でテストが難しい ARM64 向けのテストに活用されています</li><li>JSON Schema を追加しました</li></ul></li></ul></li><li><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/tfcmt</a><ul><li>v3.1.0 =&gt; v3.2.1</li><li>plan のコメントの更新をサポートしました</li></ul></li><li><a href="https://github.com/suzuki-shunsuke/tfaction" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/tfaction</a><ul><li>v0.5.7 =&gt; v0.5.11</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-contribution">OSS Contribution<a class="hash-link" href="#oss-contribution" title="Direct link to heading">​</a></h2><table><thead><tr><th>merged date</th><th>repository</th><th>lang</th><th>PR's short description</th></tr></thead><tbody><tr><td>2022-04-29</td><td><a href="https://github.com/shuaibiyy/awesome-terraform" target="_blank" rel="noopener noreferrer">shuaibiyy/awesome-terraform</a></td><td>document</td><td><a href="https://github.com/shuaibiyy/awesome-terraform/pull/164" target="_blank" rel="noopener noreferrer">tools: add tfaction</a></td></tr><tr><td>2022-04-29</td><td><a href="https://github.com/shuaibiyy/awesome-terraform" target="_blank" rel="noopener noreferrer">shuaibiyy/awesome-terraform</a></td><td>document</td><td><a href="https://github.com/shuaibiyy/awesome-terraform/pull/165" target="_blank" rel="noopener noreferrer">fix: update links to some tools</a></td></tr><tr><td>2022-04-22</td><td><a href="https://github.com/kreuzwerker/terraform-provider-docker" target="_blank" rel="noopener noreferrer">kreuzwerker/terraform-provider-docker</a></td><td>go</td><td><a href="https://github.com/kreuzwerker/terraform-provider-docker/pull/371" target="_blank" rel="noopener noreferrer">chore: remove the workflow to close stale issues and pull requests</a></td></tr><tr><td>2022-04-21</td><td><a href="https://github.com/mitchellh/mapstructure" target="_blank" rel="noopener noreferrer">mitchellh/mapstructure</a></td><td>go</td><td><a href="https://github.com/mitchellh/mapstructure/pull/265" target="_blank" rel="noopener noreferrer">fix: panic when Decode's input is array and output is a slice</a></td></tr><tr><td>2022-04-12</td><td><a href="https://github.com/rhysd/actionlint" target="_blank" rel="noopener noreferrer">rhysd/actionlint</a></td><td>go</td><td><a href="https://github.com/rhysd/actionlint/pull/131" target="_blank" rel="noopener noreferrer">fix: add permissions "pages" and "discussions" and remove invalid permission "metadata"</a></td></tr><tr><td>2022-04-06</td><td><a href="https://github.com/terraform-linters/tflint-ruleset-aws" target="_blank" rel="noopener noreferrer">terraform-linters/tflint-ruleset-aws</a></td><td>go</td><td><a href="https://github.com/terraform-linters/tflint-ruleset-aws/pull/333" target="_blank" rel="noopener noreferrer">style: format rules/api/rule.go.tmpl and run go generate ./...</a></td></tr></tbody></table><p>tfaction が awesome-terraform に追加されました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022-03 振り返り]]></title>
        <id>/what-i-did-2022-03</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-03"/>
        <updated>2022-04-02T05:16:55.000Z</updated>
        <summary type="html"><![CDATA[3 月は blog を結構読みました。]]></summary>
        <content type="html"><![CDATA[<p>3 月は blog を結構読みました。</p><p><a href="https://zenn.dev/shunsuke_suzuki/scraps/602d6f6b803168" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/602d6f6b803168</a></p><p>後は職場のインフラ周りのコードとかを読み返して復習しました。</p><p>最近は OSS 開発やブログの執筆などの output が中心で、 input をする時間があまり取れていなかったのでブログなどを読むという形で input をしました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><ul><li>Blog 執筆</li><li>Terraform<ul><li>Module を Monorepo に集約: <a href="https://blog.studysapuri.jp/entry/2022/03/30/080000" target="_blank" rel="noopener noreferrer">Terraform Modules を Monorepo で versioning して管理</a></li></ul></li><li>AWS Account 分割</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><table><thead><tr><th>date</th><th>title</th></tr></thead><tbody><tr><td>2022-03-30</td><td><a href="https://blog.studysapuri.jp/entry/2022/03/30/080000" target="_blank" rel="noopener noreferrer">Terraform Modules を Monorepo で versioning して管理</a></td></tr><tr><td>2022-03-29</td><td><a href="https://devs.quipper.com/2022/03/29/automate-handling-a-number-of-pull-requests-by-renovate-in-terraform-monorepo.html" target="_blank" rel="noopener noreferrer">Automate handling a number of Pull Requests by Renovate in Terraform Monorepo</a></td></tr><tr><td>2022-03-05</td><td><a href="https://zenn.dev/shunsuke_suzuki/articles/tfaction-v050" target="_blank" rel="noopener noreferrer">tfaction v0.5.0 の update</a></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><ul><li>aqua v1.2.0 ~ v1.3.0</li><li>aqua-registry v1.6.0 ~ v1.11.0</li><li>tfaction v0.5.0 ~ v0.5.7</li><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v3.1.0" target="_blank" rel="noopener noreferrer">tfcmt v3.1.0</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他">その他<a class="hash-link" href="#その他" title="Direct link to heading">​</a></h2><p>AWS CodeDeploy を用いた AWS Lambda の Progressive Delivery に関して検討しました。</p><p><a href="https://zenn.dev/shunsuke_suzuki/scraps/64bf029c5eeb7b" target="_blank" rel="noopener noreferrer">https://zenn.dev/shunsuke_suzuki/scraps/64bf029c5eeb7b</a></p><p>PipeCD も考えましたが、 CodeDeploy で出来るんならそれでいい気がするので、まずは CodeDeploy で検討しています。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022-02 振り返り]]></title>
        <id>/what-i-did-2022-02</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2022-02"/>
        <updated>2022-03-14T05:16:55.000Z</updated>
        <summary type="html"><![CDATA[まとめ]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="まとめ">まとめ<a class="hash-link" href="#まとめ" title="Direct link to heading">​</a></h2><p>aqua, aqua-registry, aqua-installer の v1 をリリースしました。
v1 に伴う変更は特にありません。
aqua v1.1.0 では <code>aqua g -i</code> によって aqua.yaml に package を追加できるようにし、使い勝手を良くしました。
tfaction は結構色々機能追加やバグ修正が入ってます。
仕事ではブログにも書いたように Renovate の大量 PR を自動で処理できるように改善を行いました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><ul><li>Terraform<ul><li>tfaction バグ修正</li><li>GITHUB_TOKEN rate limit 引っかかったので GitHub App の token に置き換え</li><li>CI こけた renovate PR の自動 close 検討</li><li>tfsec や AWS Provider v4 の update 対応をどうするか検討したり、対応したりしてた</li></ul></li><li>AWS Account 分割</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://devs.quipper.com/2022/02/25/terraform-github-actions.html" target="_blank" rel="noopener noreferrer">Migrate Terraform CI from AWS CodeBuild to GitHub Actions</a></li><li><a href="https://blog.studysapuri.jp/entry/2022/02/18/080000" target="_blank" rel="noopener noreferrer">Renovate の大量の Pull Request を処理する技術</a></li><li><a href="https://blog.studysapuri.jp/entry/2022/02/04/080000" target="_blank" rel="noopener noreferrer">Terraform の CI を AWS CodeBuild から GitHub Actions + tfaction に移行しました</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-開発">OSS 開発<a class="hash-link" href="#oss-開発" title="Direct link to heading">​</a></h2><ul><li>aqua v1.0.0 ~ v1.1.0</li><li>aqua-registry v1.0.0 ~ v1.5.0</li><li>aqua-installer v1.0.0</li><li>tfaction v0.4.0 ~ v0.4.12</li><li>New<ul><li><a href="https://github.com/suzuki-shunsuke/reenable-automerge-action" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/reenable-automerge-action</a></li><li><a href="https://github.com/suzuki-shunsuke/renovate-autoclose-action" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/renovate-autoclose-action</a></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-11 やったこと]]></title>
        <id>/what-i-did-2021-11</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2021-11"/>
        <updated>2021-11-28T06:45:55.000Z</updated>
        <summary type="html"><![CDATA[Job]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="job">Job<a class="hash-link" href="#job" title="Direct link to heading">​</a></h2><ul><li>AWS Control Tower<ul><li>登録できてなかった Account を登録できた</li></ul></li><li>AWS SSO<ul><li>ユーザーへの案内・催促を行い、 IAM User から SSO に移行してもらった</li><li>ローカルの開発で Access Key に依存していた部分に関して修正し、 Access Key なしでローカルで開発できるようにした(人によってはまだ Access Key に依存したツールを使っている<ul><li>S3 Browser が SSO でなぜか動かないらしい(自分が Windows 持ってないので確認できてないけど</li><li>Cyberduck が SSO サポートしていない</li></ul></li><li>一部のユーザーの Access Key の deactivate</li><li>不要な IAM User のクリーニング</li><li>来月中には一部の例外を除き、移行を完了させたい</li><li>SSO 出来ない人を SSO できるように対応した (同期対象の Group や、 Permission Set を追加したり)</li><li>SSO に関する User 向け、 SRE 向けドキュメントを英語で書いた</li></ul></li><li>aqua を更新し、 Access Token なしでも動くようにした(API call を減らし、 rate limit の問題を解決した</li><li>Self Hosted Renovate in GitHub Actions<ul><li><a href="https://github.com/renovatebot/github-action" target="_blank" rel="noopener noreferrer">https://github.com/renovatebot/github-action</a></li><li>無事 Self Hosted で動かせるようになった</li><li>結果的に Self Hosted じゃなくても良かったのではという気はしている</li></ul></li><li>AWS WAF<ul><li>COUNT, BLOCK log を Lambda で抽出しようとしているが、なぜか COUNT log が抽出できていない</li><li>あまり時間取れてない</li></ul></li><li>Route53 のドメインのアカウントの移管</li><li>Lambda の CI/CD<ul><li>実現したいことを言語化: <a href="https://github.com/suzuki-shunsuke/issue/issues/70" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/issue/issues/70</a></li><li>検討(あまり進んでない</li></ul></li><li>git-secrets から secretlint への移行</li><li>circleci-config-merge を CI で実行して自動修正するようにした</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="課題">課題<a class="hash-link" href="#課題" title="Direct link to heading">​</a></h3><ul><li>Renovate の Automerge が base branch が更新されたことで disable になり、結局手でマージしないといけなくなっている<ul><li>自動化の検討</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog-slide">Blog, Slide<a class="hash-link" href="#blog-slide" title="Direct link to heading">​</a></h2><ul><li><a href="https://techblog.szksh.cloud/archives/2021/11/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/archives/2021/11/</a><ul><li><a href="https://techblog.szksh.cloud/update-aqua-v0.7.16/" target="_blank" rel="noopener noreferrer">aqua の最近の update (v0.7.4 ~ v0.7.16)</a></li></ul></li><li><a href="https://dev.to/suzukishunsuke/opa-policy-testing-by-table-driven-test-289e" target="_blank" rel="noopener noreferrer">OPA Policy Testing by Table Driven Test</a></li><li><a href="https://suzuki-shunsuke.github.io/slides/aqua/introduction-5min/" target="_blank" rel="noopener noreferrer">https://suzuki-shunsuke.github.io/slides/aqua/introduction-5min/</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss">OSS<a class="hash-link" href="#oss" title="Direct link to heading">​</a></h2><p>aqua の公式サイトを立ち上げました。</p><p><a href="https://aquaproj.github.io/" target="_blank" rel="noopener noreferrer">https://aquaproj.github.io/</a></p><p><a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus v2</a> で生成して、 GitHub Pages でホスティングしています。</p><p>aqua 用の GitHub Organization を作り、関連リポジトリを transfer しました。</p><p><a href="https://github.com/aquaproj" target="_blank" rel="noopener noreferrer">https://github.com/aquaproj</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="oss-contribution">OSS Contribution<a class="hash-link" href="#oss-contribution" title="Direct link to heading">​</a></h3><p><a href="https://github.com/tfmigrator/cli" target="_blank" rel="noopener noreferrer">tfmigrator</a> と <a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">tfcmt</a> を <a href="https://github.com/shuaibiyy/awesome-terraform" target="_blank" rel="noopener noreferrer">awesome-terraform</a> に追加してもらいました。</p><ul><li><a href="https://github.com/shuaibiyy/awesome-terraform/pull/139" target="_blank" rel="noopener noreferrer">https://github.com/shuaibiyy/awesome-terraform/pull/139</a></li><li><a href="https://github.com/shuaibiyy/awesome-terraform/pull/138" target="_blank" rel="noopener noreferrer">https://github.com/shuaibiyy/awesome-terraform/pull/138</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他">その他<a class="hash-link" href="#その他" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="このブログのリポジトリを別の-github-organization-に-transfer-しました">このブログのリポジトリを別の GitHub Organization に transfer しました<a class="hash-link" href="#このブログのリポジトリを別の-github-organization-に-transfer-しました" title="Direct link to heading">​</a></h3><p><a href="https://github.com/techblog-szksh-cloud/techblog-szksh-cloud.github.io" target="_blank" rel="noopener noreferrer">https://github.com/techblog-szksh-cloud/techblog-szksh-cloud.github.io</a></p><p>理由は techblog.szksh.cloud が suzuki-shunsuke.github.io の CNAME になっていて、
OSS のドキュメントなどを GitHub Pages で公開したいときに都合が悪かったからです。</p><p>ついでに CI を Drone から GitHub Actions に移行しました。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="suzuki-shunsukeissue-の活用">suzuki-shunsuke/issue の活用<a class="hash-link" href="#suzuki-shunsukeissue-の活用" title="Direct link to heading">​</a></h3><p><a href="https://github.com/suzuki-shunsuke/issue/issues" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/issue/issues</a> に記録を残すようにしました。</p><p><a href="https://github.com/suzuki-shunsuke/issue/issues?q=is%3Aissue+updated%3A2021-11-01..2021-11-30" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/issue/issues?q=is%3Aissue+updated%3A2021-11-01..2021-11-30</a></p><p>前から使ってましたが、あまり活用できてなかったので、意識的に活用していこうと思っています。
せっかくツールとかを検証しても、ちゃんと記録が残ってないと忘れてしまいもったいないというのと、
issue に残すと自然と検証とかが進むような気がしています。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="docusaurus">Docusaurus<a class="hash-link" href="#docusaurus" title="Direct link to heading">​</a></h3><p>Docusaurus はいい感じなので <a href="https://github.com/suzuki-shunsuke/profile" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/profile</a> やこのブログを Docusaurus に移行するのもありかもしれないなと思いました
(思っただけでまだ何もしてません</p><p>ただ、 OSS のドキュメントに Docusaurus を使う場合、個人的には package.json を同じリポジトリに置きたくないので、
同じリポジトリでプロダクトとドキュメントを管理しにくいかなという気はしています。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[aqua の最近の update (v0.7.4 ~ v0.7.16)]]></title>
        <id>/update-aqua-v0.7.16</id>
        <link href="https://techblog.szksh.cloud/update-aqua-v0.7.16"/>
        <updated>2021-11-18T11:21:57.000Z</updated>
        <summary type="html"><![CDATA[以前 aqua v0.7.3 がリリースされた際に aqua で組織・チームのツール群を管理 という記事を書きました。]]></summary>
        <content type="html"><![CDATA[<p>以前 aqua <a href="https://github.com/suzuki-shunsuke/aqua/releases/tag/v0.7.3" target="_blank" rel="noopener noreferrer">v0.7.3</a> がリリースされた際に <a href="/aqua-global-configs/">aqua で組織・チームのツール群を管理</a> という記事を書きました。
あれからもうすぐ 2 ヶ月になり、最新バージョンは <a href="https://github.com/suzuki-shunsuke/aqua/releases/tag/v0.7.16" target="_blank" rel="noopener noreferrer">v0.7.16</a> になりました。
そこで v0.7.4 ~ v0.7.16 の間の更新と、関連 repository の更新を幾つか(全部ではない)紹介します。</p><p>基本的に <a href="https://github.com/suzuki-shunsuke/aqua/releases" target="_blank" rel="noopener noreferrer">Release Note</a> に書いてある内容です。</p><ul><li>GitHub の Access Token が基本的に不要になりました</li><li>Homebrew で install できるようになりました</li><li>aqua.yaml がより簡潔に書けるようになりました</li><li>aqua.yaml の packages を他のローカルのファイルから import できるようになりました</li><li>aqua.yaml をディレクトリの階層的にネストできるようになりました</li><li>aqua which コマンドをサポートしました</li><li>github_archive, github_content type をサポートしました</li><li>(advanced) バージョンによってパッケージの type が変更された場合にも対応できるようになりました</li><li><a href="https://github.com/suzuki-shunsuke/aqua-registry" target="_blank" rel="noopener noreferrer">Standard Registry</a> の package の数が 139 =&gt; 220 になりました。</li><li><a href="https://circleci.com/developer/orbs/orb/suzuki-shunsuke/aqua" target="_blank" rel="noopener noreferrer">aqua のための CircleCI Orb</a> をリリースしました</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="github-の-access-token-が基本的に不要になりました">GitHub の Access Token が基本的に不要になりました<a class="hash-link" href="#github-の-access-token-が基本的に不要になりました" title="Direct link to heading">​</a></h2><p>private repository から package をインストール場合は当然必要ですが、そうでなければ不要になりました。
これにより、 aqua を導入するハードルが下がりましたし、 GitHub API の Rate Limit に引っかかることが基本的になくなりました。</p><p>余談ですが、 private repository のツールを簡単に install できるのも aqua の便利な点だなと思っています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="homebrew-で-install-できるようになりました">Homebrew で install できるようになりました<a class="hash-link" href="#homebrew-で-install-できるようになりました" title="Direct link to heading">​</a></h2><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ brew install suzuki-shunsuke/aqua/aqua</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Homebrew で install できるようにすることで、より手軽に導入してもらえるようになりました。</p><p>ちなみに aqua を aqua で管理出来ないのかというと、現状できません(無限ループになってしまう)。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aquayaml-がより簡潔に書けるようになりました">aqua.yaml がより簡潔に書けるようになりました<a class="hash-link" href="#aquayaml-がより簡潔に書けるようになりました" title="Direct link to heading">​</a></h2><p>AS IS</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> direnv/direnv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v2.28.0 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=direnv/direnv</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>TO BE</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> direnv/direnv@v2.28.0</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li><code>registry: standard</code> が省略可能</li><li>version を name に @ のあとに書ける<ul><li>これにより、 <a href="https://docs.renovatebot.com/modules/manager/regex" target="_blank" rel="noopener noreferrer">Renovate の Regex Manager</a> 用にコメント <code># renovate: depName=direnv/direnv</code> を書く必要がなくなりました</li></ul></li></ul><p>これにより 1 行で書けるようになりました。
ただ簡潔にかけて楽というだけでなく、 Renovate 用のコメントでパッケージ名を間違えて指定するリスクがなくなりました。</p><p>e.g. パッケージ名を間違えている例</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> direnv/direnv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v2.28.0 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=cli/cli</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><a href="https://github.com/suzuki-shunsuke/aqua-renovate-config" target="_blank" rel="noopener noreferrer">aqua-renovate-config</a> を使えばコメントを書かなくても version を上げることが出来ます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aquayaml-の-packages-を他のローカルのファイルから-import-できるようになりました">aqua.yaml の packages を他のローカルのファイルから import できるようになりました<a class="hash-link" href="#aquayaml-の-packages-を他のローカルのファイルから-import-できるようになりました" title="Direct link to heading">​</a></h2><p>e.g.</p><p>ディレクトリ構成</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">aqua.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">aqua/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  reviewdog.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  golangci-lint.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>aqua.yaml </p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">import</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aqua/</span><span class="token important">*.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>aqua/reviewdog.yaml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> reviewdog/reviewdog@v0.13.0</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このようにファイルを分割することで、特定のパッケージが update された場合のみ CI で特定の job を実行するといったことがやりやすくなります。
例えば GitHub Actions の <a href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#onpushpull_requestpaths" target="_blank" rel="noopener noreferrer"><code>on.&lt;push|pull_request&gt;.paths</code></a> の場合、</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">pull_request</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'**.go'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> aqua/golangci</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">lint.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="aquayaml-をディレクトリの階層的にネストできるようになりました">aqua.yaml をディレクトリの階層的にネストできるようになりました<a class="hash-link" href="#aquayaml-をディレクトリの階層的にネストできるようになりました" title="Direct link to heading">​</a></h2><p>aqua はカレントディレクトリからルートディレクトリに遡って <code>^\.?aqua\.ya?ml$</code> を探索します。
このとき、それまではファイルを一つ見つけた時点で探索をやめていましたが、全ての階層を探索するようになりました。
同じパッケージが定義されていた場合、先に見つかった設定ファイルの version が優先されます。
これにより、 Monorepo でも aqua が使いやすくなりました。
Monorepo 直下に aqua.yaml を置きつつ、サブディレクトリに aqua.yaml を置いても、サブディレクトリ配下で Monorepo 直下の aqua.yaml も参照できるようになりました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aqua-which-コマンドをサポートしました">aqua which コマンドをサポートしました<a class="hash-link" href="#aqua-which-コマンドをサポートしました" title="Direct link to heading">​</a></h2><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ which gh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/Users/shunsuke-suzuki/.aqua/bin/gh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ aqua which gh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/Users/shunsuke-suzuki/.aqua/pkgs/github_release/github.com/cli/cli/v2.2.0/gh_2.2.0_macOS_amd64.tar.gz/gh_2.2.0_macOS_amd64/bin/gh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>aqua は <code>~/.aqua/bin</code> 配下にシンボリックリンクを作成し、コマンド実行時に動的にバージョンを決定し、インストールされたコマンドを実行します。
よって <code>which</code> や <code>command -v</code> では実際に実行されるコマンドのパスが分かりませんが、 aqua which コマンドを使うとパスが分かります。
ちなみに aqua で管理されてないコマンドでもパスを取得できます。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ aqua which git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">/usr/local/bin/git</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>少々変わった使い方ですが、 aqua でインストールされた実行ファイルを別のパスにコピーしたい場合に便利です。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ cp "$(aqua which gh)" src/gh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="github_archive-github_content-type-をサポートしました">github_archive, github_content type をサポートしました<a class="hash-link" href="#github_archive-github_content-type-をサポートしました" title="Direct link to heading">​</a></h2><p>Standard Registry にある package をインストールしているだけの方は、そもそも package の type というものを気にする必要もないので
あまり関係ない話かもしれませんが、 <code>http</code>, <code>github_release</code> package に加えて、 <code>github_archive</code>, <code>github_content</code> package もサポートされました。
<code>github_archive</code> は GitHub Repository の Archive をパッケージとして扱うもので、 <a href="https://github.com/tfutils/tfenv" target="_blank" rel="noopener noreferrer">tfenv</a> を aqua でインストールする際なんかに使われています。
<code>github_content</code> は GitHub Content API を使って GitHub Repository の単一ファイルをパッケージとして扱うものです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="advanced-バージョンによってパッケージの-type-が変更された場合にも対応できるようになりました">(advanced) バージョンによってパッケージの type が変更された場合にも対応できるようになりました<a class="hash-link" href="#advanced-バージョンによってパッケージの-type-が変更された場合にも対応できるようになりました" title="Direct link to heading">​</a></h2><p>これまた advanced な内容で多くの方にはあまり関係ない裏側の仕組みの話ですが、パッケージによってはバージョンによって type が変わることがあります(かなりまれですが)。
あとは repository の owner が変わったりなんかもありますが、そういった場合にも対応できるようになりました。
ちなみに GitHub Release の asset のファイル名のフォーマットや、 asset のディレクトリ構成が変わることは時々ありますが、それらには元々対応できています。</p><p>e.g.  <a href="https://github.com/suzuki-shunsuke/aqua-registry/blob/v0.10.7/registry.yaml#L486-L492" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/aqua-registry/blob/v0.10.7/registry.yaml#L486-L492</a></p><p><a href="https://github.com/suzuki-shunsuke/aqua/blob/v0.7.16/docs/registry_config.md#version_constraint-version_overrides" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/aqua/blob/v0.7.16/docs/registry_config.md#version_constraint-version_overrides</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="standard-registry-package-の数が-139--220-になりました">Standard Registry package の数が 139 =&gt; 220 になりました。<a class="hash-link" href="#standard-registry-package-の数が-139--220-になりました" title="Direct link to heading">​</a></h2><p>Standard Registry は <a href="https://github.com/suzuki-shunsuke/aqua-registry/releases/tag/v0.8.6" target="_blank" rel="noopener noreferrer">v0.8.6</a> から <a href="https://github.com/suzuki-shunsuke/aqua-registry/releases/tag/v0.10.7" target="_blank" rel="noopener noreferrer">v0.10.7</a> になりましたが、その結果 package の数は 139 から 220 になりました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aqua-のための-circleci-orb-をリリースしました">aqua のための CircleCI Orb をリリースしました<a class="hash-link" href="#aqua-のための-circleci-orb-をリリースしました" title="Direct link to heading">​</a></h2><p>CircleCI で Orb を使って aqua を install したり aqua を使ってパッケージをインストールできるようになりました。
aqua とパッケージを cache してくれます。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="aqua" term="aqua"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-10 やったこと]]></title>
        <id>/what-i-did-2021-10</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2021-10"/>
        <updated>2021-10-26T11:43:03.000Z</updated>
        <summary type="html"><![CDATA[Job]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="job">Job<a class="hash-link" href="#job" title="Direct link to heading">​</a></h2><ul><li>AWS SSO の導入<ul><li>Google アカウントで AWS へサインインできるように設定</li><li>AWS SSO の Terraform 管理</li><li>ssosync を Lambda で定期実行</li><li>開発者向けの移行ガイドの作成し、実際に案内</li><li>terraform, kubectl などのツールで AWS にアクセスできるかの検証</li></ul></li><li>AWS WAF の COUNT, BLOCK の log を Firehose, Lambda で抽出</li><li><a href="http://github.com/suzuki-shunsuke/akoi" target="_blank" rel="noopener noreferrer">akoi</a> を <a href="https://github.com/suzuki-shunsuke/aqua" target="_blank" rel="noopener noreferrer">aqua</a> にリプレース</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://blog.studysapuri.jp/entry/2021/10/13/080000" target="_blank" rel="noopener noreferrer">2021-10-13: HashiTalks Japan 2021 で弊プロダクトの Terraform Platform について登壇しました</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss">OSS<a class="hash-link" href="#oss" title="Direct link to heading">​</a></h2><p><a href="https://github.com/pulls?q=is%3Aclosed+is%3Apublic+is%3Apr+author%3Asuzuki-shunsuke+archived%3Afalse+created%3A2021-10-01..2021-10-31+" target="_blank" rel="noopener noreferrer">https://github.com/pulls?q=is%3Aclosed+is%3Apublic+is%3Apr+author%3Asuzuki-shunsuke+archived%3Afalse+created%3A2021-10-01..2021-10-31+</a></p><ul><li>Profile などの更新: <a href="https://github.com/suzuki-shunsuke/suzuki-shunsuke" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/suzuki-shunsuke</a></li><li>GitHub Actions の開発</li><li>自作ツールを Homebrew でインストールできるようにした</li><li>aqua: v0.7.3 =&gt; v0.7.10<ul><li>aqua-registry: v0.8.8 =&gt; v0.10.3</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="oss-contribution">OSS Contribution<a class="hash-link" href="#oss-contribution" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/21385" target="_blank" rel="noopener noreferrer">hashicorp/terraform-provider-aws: fix make testacc</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-09 やったこと]]></title>
        <id>/what-i-did-2021-09</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2021-09"/>
        <updated>2021-10-02T12:46:15.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><p>今月は有休消化やシルバーウィークもあり、稼働が少なく、あまり仕事が進まなかったです。</p><ul><li>AWS SSO や Organizations を導入するためのロードマップの策定</li><li>AWS SSO の検証</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="登壇">登壇<a class="hash-link" href="#登壇" title="Direct link to heading">​</a></h2><ul><li>2021-09-30 <a href="https://events.hashicorp.com/hashitalksjapan" target="_blank" rel="noopener noreferrer">HashiTalks Japan 2021</a> (<a href="https://www.youtube.com/watch?v=Cl9S-uzkuLc" target="_blank" rel="noopener noreferrer">youtube</a>)<ul><li><a href="https://speakerdeck.com/szksh/terraform-platform-in-quipper" target="_blank" rel="noopener noreferrer">Terraform Platform in Quipper</a> (<a href="https://www.youtube.com/watch?v=KpYwcwxnzbY" target="_blank" rel="noopener noreferrer">youtube</a>)</li><li>Talk (30 min)</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="新たに作った-oss">新たに作った OSS<a class="hash-link" href="#新たに作った-oss" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/suzuki-shunsuke/aqua-renovate-config" target="_blank" rel="noopener noreferrer">aqua-renovate-config</a><ul><li><a href="https://docs.renovatebot.com/config-presets/" target="_blank" rel="noopener noreferrer">Renovate Configuration</a> to update packages and registries of <a href="https://github.com/suzuki-shunsuke/aqua" target="_blank" rel="noopener noreferrer">aqua</a></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li>English<ul><li><a href="https://dev.to/suzukishunsuke/tips-about-renovate-38bd" target="_blank" rel="noopener noreferrer">Tips about Renovate</a></li><li><a href="https://dev.to/suzukishunsuke/aqua-declarative-cli-version-manager-1ibe" target="_blank" rel="noopener noreferrer">2021-09-08 aqua - Declarative CLI Version Manager</a></li></ul></li><li><a href="https://techblog.szksh.cloud/archives/2021/09/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/archives/2021/09/</a><ul><li><a href="/aqua-global-configs/">2021-09-25 aqua で組織・チームのツール群を管理</a></li><li><a href="/aqua-generate/">2021-09-05 aqua の設定ファイルをインタラクティブに生成する generate コマンド</a></li><li><a href="/aqua-v0.5/">2021-09-04 aqua v0.1.0 から v0.5.0 での変更点</a></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[aqua で組織・チームのツール群を管理]]></title>
        <id>/aqua-global-configs</id>
        <link href="https://techblog.szksh.cloud/aqua-global-configs"/>
        <updated>2021-09-25T03:01:56.000Z</updated>
        <summary type="html"><![CDATA[aqua v0.7.3 をリリースし、]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/suzuki-shunsuke/aqua" target="_blank" rel="noopener noreferrer">aqua</a> <a href="https://github.com/suzuki-shunsuke/aqua/releases/tag/v0.7.3" target="_blank" rel="noopener noreferrer">v0.7.3</a> をリリースし、
複数の global configuration をサポートしました。</p><p>個人で使う分にはあまり嬉しい機能でもないかもしれませんが、
会社・組織・チームといった集団(以下<code>組織</code>で統一)で設定を共有するには便利な機能だと思います。</p><p>これまで aqua では 2 つの設定ファイルをサポートしていました。</p><ul><li>-c で指定した場合はそのファイル、そうでなければカレントディレクトリから探索して最初に見つかったファイル<ul><li>リポジトリ直下にそのリポジトリ用の aqua.yaml をおく</li></ul></li><li>global configuration (デフォルトは <code>~/.aqua/global/[.]aqua.y[a]ml</code>)<ul><li>個人の dotfiles とかで aqua.yaml を管理しておく</li></ul></li></ul><p>こうすることで特定のリポジトリ用の設定と個人の設定を管理することができます。</p><p>しかし、第三の設定を参照することはできませんでした。
例えばある組織で使うツールセットを aqua で管理しようと思ってもこれまでは難しかったです。</p><p>そこで <code>AQUA_GLOBAL_CONFIG</code> という環境変数に <code>:</code> 区切りで設定ファイルへのパスを設定することで先頭から順に設定ファイルを参照するようにしました。</p><p>設定ファイルの優先順位は高い方から順に次のようになります。</p><ol><li>-c で指定した場合はそのファイル、そうでなければカレントディレクトリから探索して最初に見つかったファイル</li><li><code>AQUA_GLOBAL_CONFIG</code></li><li>global configuration (デフォルトは <code>~/.aqua/global/[.]aqua.y[a]ml</code>)</li></ol><p>イメージとしては</p><ol><li>プロジェクト(リポジトリ)の設定</li><li>組織の設定</li><li>個人の設定</li></ol><p>という感じです。</p><p>例えば GitHub Organizations に aqua-config というリポジトリを作成し、以下のようなファイルを用意したとしましょう。</p><ul><li>all.yaml: 全 Developer 用の設定</li><li>sre.yaml: SRE Team 用の設定</li></ul><p>そのリポジトリをローカル <code>/home/foo/aqua-config</code> に checkout したとしましょう。
あなたが SRE の場合、 AQUA_GLOBAL_CONFIG を次のように設定しましょう。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">export AQUA_GLOBAL_CONFIG=/home/foo/aqua-config/sre.yaml:/home/foo/aqua-config/all.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすることで特定のリポジトリ用の設定と個人の設定(dotfiles)に加えて、
自分が所属する組織用の設定も参照することができます。</p><p>組織としては組織に必要なツール群を aqua で宣言的に管理できるため、
セットアップのコストも下がり、バージョンも組織で統一することができます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aqua-install-に追加された--a-option"><code>aqua install</code> に追加された <code>-a</code> option<a class="hash-link" href="#aqua-install-に追加された--a-option" title="Direct link to heading">​</a></h2><p>v0.7.3 では <code>aqua install</code> に <code>-a</code> option が追加されました。
<code>aqua install</code> はデフォルトでは global configuration は参照しません。
global configuration を参照するのは <code>aqua exec</code> 及び aqua でインストールされたツールを実行したとき(内部的に <code>aqua exec</code> が実行されている)だけです。</p><p><code>-a</code> option をつけると global configuration も含めて全ての設定ファイルを参照し install を実行します。</p><p>aqua.yaml を Git で管理している場合は定期的に リポジトリを pull して <code>aqua i -a -l</code> を実行するのが良いでしょう。
簡単なスクリプトを書いたり、 cron で定期実行するようにするとよいかもしれません。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="aqua" term="aqua"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[aqua の設定ファイルをインタラクティブに生成する generate コマンド]]></title>
        <id>/aqua-generate</id>
        <link href="https://techblog.szksh.cloud/aqua-generate"/>
        <updated>2021-09-05T01:17:39.000Z</updated>
        <summary type="html"><![CDATA[* aqua - CLI ツールのバージョン管理]]></summary>
        <content type="html"><![CDATA[<ul><li><a href="/aqua">aqua - CLI ツールのバージョン管理</a></li><li><a href="/aqua-v0.5">aqua v0.1.0 から v0.5.0 での変更点</a></li></ul><p>aqua v0.5.1 で追加された generate というサブコマンドを紹介します。</p><p>aqua では Registry を活用することで設定を記述する手間を省くことができますが、
Registry を活用するには、インストールしたいツールが Registry で定義されているか、されているとしたら name はなにか調べる必要があります。
Registry で定義されているのに見逃してしまうこともあるでしょう。</p><p>また、 aqua でツールをインストールするには version を指定する必要がありますが、多くの場合はとりあえず最新バージョンはなにかを調べることになるでしょう。</p><p>これらの手間を減らすために generate というインタラクティブなコマンドを追加しました。
これは aqua.yaml で指定されている Registry で定義されている packages の一覧から package を fuzzy search によって選択し、
更に <code>github_release</code> package の場合は release version の一覧を fuzzy search によって選択することで package の YAML 定義を出力するコマンドです。</p><p>使ってみるのが早いでしょう。 aqua.yaml に Standard Registry を追加した上で <code>aqua g</code> を実行してみます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">registries</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.2.1 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=suzuki-shunsuke/aqua-registry</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>すると fuzzy search が起動し、 package が選択できます。
自分が使いたいツール名で検索してみて、あればそれを選択します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  direnv (standard)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  consul (standard)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  conftest (standard)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; golangci-lint (standard)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  47/47</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>golangci-lint を選んでみましょう。
すると golangci-lint のバージョンの一覧が選択できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  v1.40.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  v1.40.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  v1.41.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  v1.41.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; v1.42.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  30/30</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>version を選ぶと YAML が出力されます。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ aqua g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- name: golangci-lint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  registry: standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  version: v1.42.0</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>この YAML を <code>aqua.yaml</code> の <code>packages</code> に追記すれば OK です。</p><p>helm のように GitHub Release からではなく公式サイトからインストールするようなツールはバージョンのリストを取得するのが難しいのでバージョンの選択はできません。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ aqua g</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- name: helm</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  registry: standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  version: ""</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>それでも helm が <code>helm</code> という name で standard registry に登録されていることはわかるので、十分便利です。</p><p>ちなみに fuzzy search には <a href="https://github.com/ktr0731/go-fuzzyfinder" target="_blank" rel="noopener noreferrer">ktr0731/go-fuzzyfinder</a> を使わせていただきました。非常に簡単に fuzzy search が実装できてとても便利でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="aqua" term="aqua"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[aqua v0.1.0 から v0.5.0 での変更点]]></title>
        <id>/aqua-v0.5</id>
        <link href="https://techblog.szksh.cloud/aqua-v0.5"/>
        <updated>2021-09-04T02:58:42.000Z</updated>
        <summary type="html"><![CDATA[先日 aqua v0.1.0 をリリースした記事を書いたばかりですが、]]></summary>
        <content type="html"><![CDATA[<p><a href="/aqua/">先日 aqua v0.1.0 をリリースした記事を書いた</a>ばかりですが、
そこから更に開発を続けて v0.5.0 をリリースしたので、変更点を紹介します。</p><p>基本的に <a href="https://github.com/suzuki-shunsuke/aqua/releases" target="_blank" rel="noopener noreferrer">Release Note</a> に書いてあるとおりです。</p><ul><li>PATH を project (aqua.yaml) 毎に設定する必要がなくなりました<ul><li><code>~/.aqua/bin</code> を PATH に追加すればよくなりました</li><li>direnv などを使って環境変数を追加する必要がなくなりました</li></ul></li><li><code>install</code> コマンドに <code>--test</code> option を追加し、 <code>file.src</code> の設定が正しいかテストできるようになりました<ul><li>CI で aqua の設定をテストするのに便利</li></ul></li><li>GitHub Release だけでなく、任意の URL から tool のダウンロード・インストールができるようになりました<ul><li>Go や helm, Hashicorp の product のような公式サイトからダウンロードするタイプのツールも install できるようになりました</li></ul></li><li>Breaking Change: <code>inline_registry</code> の設定の形式を変更しました</li><li>aqua の設定の再利用性を高める <code>Registry</code> という仕組みを導入しました<ul><li>standard <code>Registry</code> を公開しました <a href="https://github.com/suzuki-shunsuke/aqua-registry" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/aqua-registry</a></li></ul></li><li>簡単な slide を公開しました: <a href="https://speakerdeck.com/szksh/introduction-of-aqua" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/szksh/introduction-of-aqua</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="path-を-project-aquayaml-毎に設定する必要がなくなりました">PATH を project (aqua.yaml) 毎に設定する必要がなくなりました<a class="hash-link" href="#path-を-project-aquayaml-毎に設定する必要がなくなりました" title="Direct link to heading">​</a></h2><p>aqua v0.1.0 では symbolic link を aqua.yaml のあるディレクトリの <code>.aqua/bin</code> 配下に作成しており、ここを PATH に追加する必要がありました。
direnv とかを使うと便利ですが、間接的に(?) aqua が direnv のようなツールに依存している形になり、微妙でした。</p><p>aqua v0.5.0 では symbolic link を <code>~/.aqua/bin</code> 配下に作成するため、 .bashrc などで <code>~/.aqua/bin</code> を PATH に追加しておけば project ごとに環境変数を追加する必要はなくなりました。
ちなみに作成される symbolic link は aqua-proxy へのリンクであり、ツールのバージョンには依存しないので <code>~/.aqua/bin</code> を共有しても干渉することはありません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="応用-aquabin-配下に-symbolic-link-を作る上での課題とそれの解決法">[応用]<!-- --> <code>~/.aqua/bin</code> 配下に symbolic link を作る上での課題とそれの解決法<a class="hash-link" href="#応用-aquabin-配下に-symbolic-link-を作る上での課題とそれの解決法" title="Direct link to heading">​</a></h3><p><code>~/.aqua/bin</code> 配下に symbolic link を作って PATH に追加する場合、一つ大きな課題があります
(だからこそ v0.1.0 ではプロジェクトごとに symbolic link を作っていました)。
<code>~/.aqua/bin</code> 配下に symbolic link を作って PATH に追加すると、基本的にそのファイルが呼ばれることになります。
そのツールを aqua で管理しているプロジェクト配下ならそれで良いですが、そうでない場合、本来 aqua 以外でインストールしたものを実行したくても実行できません。
例えば homebrew で jq を install していて、あるプロジェクトでは aqua を使ってバージョンを固定したものを使いたいが、それ以外では homebrew で install したものを使いたいといった場合に問題になります。</p><p>この問題を解決するため、 aqua ではツールを呼び出す際に <code>PATH</code> をチェックして aqua-proxy へのリンクとなっているものは除外するというハック(?)のようなことをしています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="install-コマンドに---test-option-を追加し-filesrc-の設定が正しいかテストできるようになりました"><code>install</code> コマンドに <code>--test</code> option を追加し、 <code>file.src</code> の設定が正しいかテストできるようになりました<a class="hash-link" href="#install-コマンドに---test-option-を追加し-filesrc-の設定が正しいかテストできるようになりました" title="Direct link to heading">​</a></h2><p>地味な更新ですが、 aqua の設定を更新した際に CI でテストするのに便利です。
<code>--test</code> option なしだと、 warning は出力しますが、 exit code は 0 になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="github-release-だけでなく任意の-url-から-tool-のダウンロードインストールができるようになりました">GitHub Release だけでなく、任意の URL から tool のダウンロード・インストールができるようになりました<a class="hash-link" href="#github-release-だけでなく任意の-url-から-tool-のダウンロードインストールができるようになりました" title="Direct link to heading">​</a></h2><p>ちなみに、 GitHub Release で公開されてないようなツールでも、
GitHub リポジトリで versioning されていて Renovate の <code>github_release</code> data source で自動更新できるケースは少なくないと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="breaking-change-inline_registry-の設定の形式を変更しました">Breaking Change: <code>inline_registry</code> の設定の形式を変更しました<a class="hash-link" href="#breaking-change-inline_registry-の設定の形式を変更しました" title="Direct link to heading">​</a></h2><p>小さな breaking change ですが、<code>inline_registry</code> の形式が変わりました。</p><p>AS IS</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">inline_registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stedolan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">asset</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'jq-{{if eq .OS "darwin"}}osx{{else}}{{.OS}}{{end}}-{{.Arch}}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">files</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>TO BE</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">inline_registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stedolan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">asset</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'jq-{{if eq .OS "darwin"}}osx{{else}}{{.OS}}{{end}}-{{.Arch}}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">files</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="aqua-の設定の再利用性を高める-registry-という仕組みを導入しました">aqua の設定の再利用性を高める <code>Registry</code> という仕組みを導入しました<a class="hash-link" href="#aqua-の設定の再利用性を高める-registry-という仕組みを導入しました" title="Direct link to heading">​</a></h2><p>これが一番大きな更新です。
aqua を使うにはツールのインストール方法を YAML で記述しないといけませんが、
これはちょっとした手間ですし、新規ユーザーにとって障壁となるでしょう。</p><p>ツールとそのバージョンを定義したらインストールできてほしいものです。
ツールとそのバージョンの定義は <code>aqua.yaml</code> の <code>packages</code> の部分なので、それ以外の設定を如何に簡略化するかという話になります。</p><p>Registry はツールのインストール方法の設定を、プロジェクト固有のバージョン設定とは独立させ、再利用可能な形で共有する仕組みです。</p><p>Registry には現状 4 種類あります。</p><ul><li>inline regisry: aqua.yaml の中に直接 install 方法を定義する。 v0.1.0 からサポートされている方法</li><li>github_content registry: GitHub Repository にあるファイルを Registry として参照する方法</li><li>local registry: GitHub Repository にあるファイルを Regisry として参照する方法</li><li>standard registry: 自分がメンテしている github_content registry のエイリアス</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="inline-registry">inline registry<a class="hash-link" href="#inline-registry" title="Direct link to heading">​</a></h3><p>inline registry は従来からあるやつで、 aqua.yaml 内に定義する方法です。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">inline_registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stedolan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">asset</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'jq-{{if eq .OS "darwin"}}osx{{else}}{{.OS}}{{end}}-{{.Arch}}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">files</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>シンプルではありますが、コピペする以外に再利用性がありません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="local-registry">local registry<a class="hash-link" href="#local-registry" title="Direct link to heading">​</a></h2><p>local registry はローカルにあるファイルを参照する registry です。
絶対パスか、 aqua.yaml からの相対パスを指定します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="github_content-registry">github_content registry<a class="hash-link" href="#github_content-registry" title="Direct link to heading">​</a></h2><p>ユーザーとしては次のように Registry を定義すればあとは <code>packages</code> で Registry を参照できます。
GitHub Access Token を環境変数 <code>GITHUB_TOKEN</code> として設定する必要があります。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">registries</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzuki</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shunsuke/aqua</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">registry</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzuki</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shunsuke</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aqua</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">registry</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.2.0 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=suzuki-shunsuke/aqua-registry</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> registry.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.27.0 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=open-policy-agent/conftest</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="registry-を公開する">Registry を公開する<a class="hash-link" href="#registry-を公開する" title="Direct link to heading">​</a></h3><p>自分で Registry を公開したい場合は GitHub Repository に設定ファイルを置くだけで OK です。
e.g. <a href="https://github.com/suzuki-shunsuke/aqua-registry/blob/main/registry.yaml" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/aqua-registry/blob/main/registry.yaml</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="standard-registry">Standard Registry<a class="hash-link" href="#standard-registry" title="Direct link to heading">​</a></h2><p>Standard Registry も作りました。</p><p><a href="https://github.com/suzuki-shunsuke/aqua-registry" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/aqua-registry</a></p><p>jq や gh, kubectl, Terraform など有名なツールはこの Registry を使えばインストールできますが、
当然 PR も受け付けているので、追加してほしいツールがあれば PR を投げてください。</p><p>Official Registry を github_content Registry として利用することも当然できますが、
より簡潔に書けるように <code>type: standard</code> という Registry がサポートされています。</p><p>AS IS</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">registries</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzuki</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shunsuke</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> aqua</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">registry</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.2.0 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=suzuki-shunsuke/aqua-registry</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> registry.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>TO BE</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">registries</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> standard</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.2.0 </span><span class="token comment" style="color:#999988;font-style:italic"># renovate: depName=suzuki-shunsuke/aqua-registry</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>上 2 つは等価ではありますが、後者のほうが簡潔です。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="aqua" term="aqua"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-08 やったこと]]></title>
        <id>/what-i-did-2021-08</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2021-08"/>
        <updated>2021-09-02T05:33:16.000Z</updated>
        <summary type="html"><![CDATA[仕事]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><ul><li>AWS IAM User を削除する際に force_destroy が true になっているか Conftest でテスト</li><li>Terraform の State 分割</li><li>Terraform Modules を別リポジトリで管理して versioning</li><li>git-secrets を secretlint に移行<ul><li>git-secrets がメンテされてなくて、既知バグが放置されているから</li></ul></li><li>CI で terraform fmt によるフォーマットの自動化</li><li>WIP: AWS WAF の COUNT, BLOCK ログを Firehose で抽出</li><li>WIP: AWS CodeBuild で Provisioning Error が発生したら自動で Retry</li><li>WIP: AWS CodeBuild のための GitHub App の開発</li><li>WIP: AWS SSO について調査</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-contribution">OSS Contribution<a class="hash-link" href="#oss-contribution" title="Direct link to heading">​</a></h2><p>Renovate の GitHub Actions のドキュメントの修正をしました。
ドキュメント中に書かれたバージョンを Renovate で自動 update するようにしました。</p><ul><li><a href="https://github.com/renovatebot/github-action/pull/556" target="_blank" rel="noopener noreferrer">docs: fix broken links and update GitHub Actions</a></li><li><a href="https://github.com/renovatebot/github-action/pull/557" target="_blank" rel="noopener noreferrer">chore: update GitHub Actions in README by Renovate</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="新たに作った-oss">新たに作った OSS<a class="hash-link" href="#新たに作った-oss" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/suzuki-shunsuke/logrus-error" target="_blank" rel="noopener noreferrer">logrus-error</a>: <a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener noreferrer">logrus</a>.Fields を error に埋め込む Go の薄いライブラリ</li><li><a href="https://github.com/suzuki-shunsuke/aqua" target="_blank" rel="noopener noreferrer">aqua</a>: Command Line Tools Version Manager<ul><li><a href="https://github.com/suzuki-shunsuke/aqua-proxy" target="_blank" rel="noopener noreferrer">aqua-proxy</a>: aqua の内部ツール </li><li><a href="https://github.com/suzuki-shunsuke/aqua-installer" target="_blank" rel="noopener noreferrer">aqua-installer</a>: aqua をインストールするスクリプトと GitHub Actions</li></ul></li><li><a href="https://github.com/suzuki-shunsuke/go-checkout-github-merged-commit" target="_blank" rel="noopener noreferrer">go-checkout-github-merged-commit</a>: PR の merged commit を checkout する Go のライブラリ</li><li><a href="https://github.com/suzuki-shunsuke/aws-codebuild-retry" target="_blank" rel="noopener noreferrer">aws-codebuild-retry</a>: AWS CodeBuild を Retry する Lambda Function</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://techblog.szksh.cloud/archives/2021/08/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/archives/2021/08/</a><ul><li><a href="https://techblog.szksh.cloud/aqua/" target="_blank" rel="noopener noreferrer">aqua - CLI ツールのバージョン管理</a></li><li><a href="https://techblog.szksh.cloud/github-app-for-codebuild/" target="_blank" rel="noopener noreferrer">AWS CodeBuild を実行する Github App を作る</a></li></ul></li><li>Quipper<ul><li><a href="https://blog.studysapuri.jp/entry/2021/08/11/080000" target="_blank" rel="noopener noreferrer">Terraform の CI に tfmigrate を導入した話</a></li><li><a href="https://blog.studysapuri.jp/entry/2021/08/02/080000" target="_blank" rel="noopener noreferrer">AWS IAM の管理を miam から Terraform に移行した話</a></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[aqua - CLI ツールのバージョン管理]]></title>
        <id>/aqua</id>
        <link href="https://techblog.szksh.cloud/aqua"/>
        <updated>2021-08-28T00:07:38.000Z</updated>
        <summary type="html"><![CDATA[2021-09-04 追記: aqua v0.1.0 から v0.5.0 での変更点]]></summary>
        <content type="html"><![CDATA[<p>2021-09-04 追記: <a href="/aqua-v0.5">aqua v0.1.0 から v0.5.0 での変更点</a></p><p><a href="https://github.com/suzuki-shunsuke/aqua" target="_blank" rel="noopener noreferrer">aqua</a> という OSS を開発しているので紹介します。</p><p>記事の内容は aqua v0.1.0 に基づきます。将来的に仕様が変わる可能性があります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aqua-とは">aqua とは<a class="hash-link" href="#aqua-とは" title="Direct link to heading">​</a></h2><p>aqua は CLI ツールのバージョン管理のための CLI です。
aqua で管理する主な対象は GitHub Release で公開されているツールです。
YAML の設定ファイルを書いてコマンドを実行すると指定したツールをインストールすることができます。</p><p>例えば以下のような設定ファイルを書き、 <code>aqua install</code> というコマンドを実行すると
<a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener noreferrer">jq</a>, <a href="https://www.conftest.dev/" target="_blank" rel="noopener noreferrer">conftest</a> などが GitHub Release からダウンロードされ、インストールされます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">packages</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> inline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><span class="token punctuation" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1.6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> inline</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> v0.27.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">inline_registry</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> stedolan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">asset</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'jq-{{if eq .OS "darwin"}}osx-amd64{{else}}{{if eq .OS "linux"}}linux64{{else}}win64.exe{{end}}{{end}}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">files</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jq</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github_release</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_owner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> open</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">policy</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">agent</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">asset</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'conftest_{{trimPrefix "v" .Package.Version}}_{{title .OS}}_x86_64.tar.gz'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">files</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> conftest</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ちなみに上記の設定ファイルの</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">asset</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'conftest_{{trimPrefix "v" .Package.Version}}_{{title .OS}}_x86_64.tar.gz'</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>の部分では Go の <a href="https://pkg.go.dev/text/template" target="_blank" rel="noopener noreferrer">text/template</a> と <a href="http://masterminds.github.io/sprig/" target="_blank" rel="noopener noreferrer">sprig</a> が使われています。</p><p>ツールごとに URL を調べて download して tarball などを展開してインストールしてなどの面倒な作業を aqua で自動化できます。
update も基本的に設定ファイルの version を更新するだけで OK です。</p><p>aqua を使うと同じツールの複数のバージョンを管理してプロジェクトによってバージョンを切り替えるといったことも容易にできます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="3-つの主なユースケース">3 つの主なユースケース<a class="hash-link" href="#3-つの主なユースケース" title="Direct link to heading">​</a></h2><p>aqua では以下の 3 つの主なユースケースを想定しています。</p><ul><li>CI/CD で必要なツールの管理</li><li>ローカルでの開発に必要なプロジェクト(リポジトリ)固有のツールの管理</li><li>特定のプロジェクト(リポジトリ)によらないツールの管理</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="ユースケース1-cicd-で必要なツールの管理">ユースケース1: CI/CD で必要なツールの管理<a class="hash-link" href="#ユースケース1-cicd-で必要なツールの管理" title="Direct link to heading">​</a></h3><p>例えば Terraform の Monorepo の CI で以下のような様々なツールを使っていたとしましょう。</p><ul><li><a href="https://cli.github.com/" target="_blank" rel="noopener noreferrer">gh</a></li><li><a href="https://stedolan.github.io/jq/" target="_blank" rel="noopener noreferrer">jq</a></li><li><a href="https://tfsec.dev/" target="_blank" rel="noopener noreferrer">tfsec</a></li><li><a href="https://github.com/terraform-linters/tflint" target="_blank" rel="noopener noreferrer">tflint</a></li><li><a href="https://github.com/minamijoyo/tfmigrate" target="_blank" rel="noopener noreferrer">tfmigrate</a></li><li><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">tfcmt</a></li><li><a href="https://github.com/open-policy-agent/opa" target="_blank" rel="noopener noreferrer">opa</a></li><li><a href="https://www.conftest.dev/" target="_blank" rel="noopener noreferrer">conftest</a></li><li><a href="https://github.com/mvdan/sh" target="_blank" rel="noopener noreferrer">shfmt</a></li><li><a href="https://github.com/koalaman/shellcheck" target="_blank" rel="noopener noreferrer">shellcheck</a></li><li><a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">github-comment</a></li></ul><p>これらを1個1個 curl などを使ってインストールするコードを書くのは面倒ですが、
aqua であれば設定ファイルを宣言的に書いて <code>aqua i</code> を実行すれば終わりです。
新たにツールを追加する場合でも設定ファイルに追記すればよく、スクリプトを更新する必要はありません。
バージョンを明示的に指定できるのでコードを変更してないのに急にツールが更新されることもありませんし、 <a href="https://docs.renovatebot.com/modules/manager/regex/" target="_blank" rel="noopener noreferrer">Renovate の Regex Manager</a> などを使えば更新を自動化することもできます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="ユースケース2-ローカルでの開発に必要なプロジェクトリポジトリ固有のツールの管理">ユースケース2: ローカルでの開発に必要なプロジェクト(リポジトリ)固有のツールの管理<a class="hash-link" href="#ユースケース2-ローカルでの開発に必要なプロジェクトリポジトリ固有のツールの管理" title="Direct link to heading">​</a></h3><p>あるリポジトリのローカルでの開発に必要なツールを aqua で管理することができます。
リポジトリ直下に <code>aqua.yaml</code> を置いておけば OK です。
バージョンも指定されているので、人によってバージョンが違ったりする問題も解消できます。
<code>aqua.yaml</code> と同じディレクトリに <code>.aqua</code> が作成されるのでそれを .gitignore に追加し、 <code>.aqua/bin</code> を PATH に追加しましょう。
direnv を使い、リポジトリ直下に .envrc を置いて <code>.aqua/bin</code> を PATH に追加すると便利です。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">aqua.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.aqua/bin</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.envrc</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>.envrc</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">PATH_add .aqua/bin</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>.aqua/bin</code> を PATH に追加しなくても <code>aqua exec -- &lt;コマンド&gt; ...</code> で実行することもできます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="ユースケース3-特定のプロジェクトリポジトリによらないツールの管理">ユースケース3: 特定のプロジェクト(リポジトリ)によらないツールの管理<a class="hash-link" href="#ユースケース3-特定のプロジェクトリポジトリによらないツールの管理" title="Direct link to heading">​</a></h3><p>特定のプロジェクトによらずにツールを laptop にインストールしたい場合にも使えます。
<code>~/.aqua/global/aqua.yaml</code> に設定ファイルを記述し、 <code>~/.aqua/global/.aqua/bin</code> を PATH に追加してください。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">export PATH=$HOME/.aqua/global/.aqua/bin:$PATH</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>そして <code>~/.aqua/global</code> 配下で <code>aqua i</code> を実行すればインストールができます。
<code>~/.aqua/global</code> を Git で管理して GitHub などでホスティングするのも良いでしょう。</p><p><a href="https://github.com/suzuki-shunsuke/my-aqua-config" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/my-aqua-config</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="akoi-との違い">akoi との違い<a class="hash-link" href="#akoi-との違い" title="Direct link to heading">​</a></h2><p>ところで、自分は aqua に似たツールとして <a href="http://github.com/suzuki-shunsuke/akoi" target="_blank" rel="noopener noreferrer">akoi</a> というツールを公開していて、自分もこれまでこのツールを使ってきました。
aqua と akoi は「CLI ツールのバージョン管理」という目的・ゴールは同じです。
akoi も結構便利なツールですが、 akoi が抱える様々な課題を解決するために aqua を開発しています。
aqua は akoi のいわば後継ツールです。
ただしコードは全く別物ですし、互換性もありません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="akoi-と比べた-aqua-の良い点">akoi と比べた aqua の良い点<a class="hash-link" href="#akoi-と比べた-aqua-の良い点" title="Direct link to heading">​</a></h3><ul><li>GitHub Access Token を使ったインストールをサポート<ul><li>private repository をサポート</li><li>akoi は anonymous なアクセスなので rate limit に引っかかりやすい</li></ul></li><li>管理対象のコマンド実行時にツールのインストールが可能</li><li>設定ファイルを更新したあとに install コマンドを実行する必要がない<ul><li>akoi は symbolic link を作り直すために install コマンドを実行する必要がある</li></ul></li><li>管理対象のツールの実体を共有できる<ul><li>project ごとにツールを install する必要がない(計算資源の効率化)</li><li>akoi と違って ツールによって実体のインストール先は一意に決まるので、干渉することがなく安全に共有できる</li></ul></li><li>事前に archive の中のパスを知っている必要がない<ul><li>akoi は install 時に archive を展開してファイルをコピーし、シンボリックリンクを作成する<ul><li>パスが間違っていると失敗し、 download からやり直しになる</li><li>そのため、新しいツールを akoi で管理する場合はまず archive の構造を調べる必要がある</li></ul></li><li>aqua は install したあとに ~/.aqua 配下を見て file.src を修正すれば良いし、間違っててコマンドの実行に失敗しても download のやり直しとかはない</li></ul></li><li><code>bin_path</code>, <code>link_path</code> ような設定について考えなくて良い<ul><li>akoi は設定ファイルでインストール先などを設定できるようになっている</li><li>どう設定すべきか悩ましいし、リポジトリによって設定が違ったりして設定を統一するのが難しい</li><li>aqua はインストール先などが設定できないのでユーザーが迷う必要がない</li></ul></li></ul><h4 class="anchor anchorWithStickyNavbar_mojV" id="管理対象のツールの実体を共有できる">管理対象のツールの実体を共有できる<a class="hash-link" href="#管理対象のツールの実体を共有できる" title="Direct link to heading">​</a></h4><p>aqua はツールの実体を AQUA_ROOT_DIR <code>~/.aqua</code> にインストールし、共有することができます。
複数のリポジトリで同じバージョンの同じツールを使う場合に共有できるので、
インストールにかかる時間を短縮できますし、無駄にディスク容量を消費することもありません。
設定ファイルによって動的にバージョンを取得するので、共有していてもリポジトリごとに異なるバージョンを使うこともできます。</p><p>安全に共有できるようにツールの実体のインストール先はダウンロード元によってユニークかつ一意に決まるようになっています。
ユーザーがカスタマイズすることはできません(ルートディレクトリは変えられますが、ルート以下は変えられません)。</p><p>例えば OSX で jq-1.6 のインストール先は以下になります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">.aqua/pkgs/github_release/github.com/stedolan/jq/jq-1.6/jq-osx-amd64/jq-osx-amd64</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このように GitHub Release からインストールする場合</p><ul><li>リポジトリのオーナー</li><li>リポジトリ名</li><li>tag</li><li>GitHub Release のアセット名</li></ul><p>などから一意に決まるため、あるリポジトリでは jq をフォークしたものを使うといった場合でも安全に共存することができます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="便利な---only-link-option">便利な <code>--only-link</code> option<a class="hash-link" href="#便利な---only-link-option" title="Direct link to heading">​</a></h2><p><code>aqua install</code> を実行するとツールごとに以下のことが実行されます。</p><ol><li><code>.aqua/bin</code> 配下にシンボリックリンクを作成</li><li>ダウンロード</li><li>tarball などの展開</li><li>~/.aqua 配下にインストール</li></ol><p>aqua.yaml の packages に大量のツールが定義されていると、
大量のツールが一度にインストールされることになり、
並列で実行されるとはいえ、都合が悪いこともあるでしょう。</p><p><code>--only-link</code> option をつけて実行すると、シンボリックリンクだけ作成しダウンロードなどは行わないので直ぐに終わります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ aqua install --only-link</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>その状態でツールを実行すると、ツールが自動でインストールされてから実行されるので
本当に必要になってからインストールすることが可能であり、余計なインストールが発生しないので便利です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="コマンド実行時の自動インストール動的なバージョン切り替えの仕組み">コマンド実行時の自動インストール、動的なバージョン切り替えの仕組み<a class="hash-link" href="#コマンド実行時の自動インストール動的なバージョン切り替えの仕組み" title="Direct link to heading">​</a></h2><p>aqua は設定ファイルを更新すると <code>aqua install</code> 実行をしなくても更新が反映される、
ツールがまだインストールされていなくてもツールを実行時に自動でインストールされるという機能があります。</p><p>tfenv も .terraform-version を更新すればすぐ反映されますし、
terraform コマンドを実行時にまだ指定したバージョンがインストールされてなかったら自動でインストールされますが、それに似ていますね
(ただし tfenv の機能がどう実装されているかは調べてませんし、 aqua を実装する上で参考にしたりはしていません)。</p><p>上記の機能が aqua でどう実現されているか簡単に説明します。</p><p>例えば aqua で jq をインストールし、 <code>jq -h</code> を実行したとしましょう。
jq を実行すると aqua-proxy を経由して <code>aqua exec -- jq -h</code> が実行されます。
この辺の詳細は <a href="#aqua-proxy-%E3%81%A8%E3%81%AF">aqua-proxy とは</a> を参照してください。
<code>aqua exec</code> は aqua の設定ファイルで指定されたバージョンがインストールされているかチェックし、まだインストールされていなかったらインストールし、コマンド <code>jq -h</code> を実行します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="aqua-proxy-とは">aqua-proxy とは<a class="hash-link" href="#aqua-proxy-とは" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/aqua-proxy" target="_blank" rel="noopener noreferrer">aqua-proxy</a> は aqua が内部的に依存しているツールです。
コマンド実行時に aqua 及び aqua で管理するツールのバージョンを動的に変更するために作られました。
aqua のために開発されており、 aqua 以外で使われることは想定していません。</p><p>aqua-proxy は <code>aqua install</code> や <code>aqua exec</code> を実行した際に自動で <code>~/.aqua/bin/aqua-proxy</code> にインストールされます。
aqua はツールをインストールする際に <code>.aqua/bin/&lt;ツール&gt;</code> から <code>~/.aqua/bin/aqua-proxy</code> へのシンボリックリンクを作成するので、 <code>&lt;ツール&gt;</code> を実行すると <code>~/.aqua/bin/aqua-proxy</code> が呼ばれます。</p><p>aqua-proxy は <a href="https://pkg.go.dev/os#Args" target="_blank" rel="noopener noreferrer">os#Args</a> からツール名を取得し、
<code>aqua exec -- &lt;ツール名&gt; ...</code> を実行します。
これによりコマンド実行時に aqua 及び <code>&lt;ツール&gt;</code> のバージョンを動的に変更することを実現しています。</p><p><code>.aqua/bin/&lt;ツール&gt;</code> から aqua-proxy へのシンボリックリンクは静的であり、 aqua-proxy のバージョンを切り替えることは難しいです。
aqua-proxy の機能・責務が大きくなると aqua-proxy のバージョン管理や aqua との互換性を考えなくてはならなくなります。
aqua-proxy のバージョンをほぼ気にしなくて良いよう、 aqua-proxy は最小限の機能・責務しか持たず、安定的であまり変更されないように設計されています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="プロセスツリーを確認してみる">プロセスツリーを確認してみる<a class="hash-link" href="#プロセスツリーを確認してみる" title="Direct link to heading">​</a></h2><p>既に説明したとおり <code>&lt;ツール&gt;</code> を実行した際には実はプロセスツリー的には
<code>aqua-proxy =&gt; aqua =&gt; &lt;ツール&gt;</code> という風になっています。</p><p><code>&lt;ツール&gt;</code> を直接実行した場合と挙動に違いが出ないように以下のようなことに気を配っています。</p><ul><li>SIGINT, SIGTERM などのシグナルが適切に <code>&lt;ツール&gt;</code> のプロセスまで伝達されるようにする</li><li><code>&lt;ツール&gt;</code> の exit code が伝達されるようにする</li></ul><p>試しに fzf を実行してみて別のターミナルでプロセスツリーを確認してみます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ ls | fzf</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>fzf が起動しますが、そのままにしておいて別のターミナルでプロセスツリーを確認してみます。
Mac の <code>pstree</code> を使っています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">-+- 83548 foo fzf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> \-+- 83549 foo aqua exec -- fzf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   \--- 83550 foo /Users/foo/.aqua/pkgs/github_release/github.com/junegunn/fzf/0.27.2/fzf-0.27.2-darwin_amd64.zip/fzf</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>紛らわしいのですが、最初のプロセスの実体は fzf ではなくて aqua-proxy です。 fzf が aqua-proxy へのシンボリックになっているのでこうなっています。
ここで aqua-proxy に SIGTERM を送ると手元の Mac ではちゃんと子プロセスまで終了しました。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ kill 83548</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>この辺のシグナルハンドリングは Windows だと正常に動かないかもしれません。</p><p><a href="https://pkg.go.dev/os#Signal" target="_blank" rel="noopener noreferrer">https://pkg.go.dev/os#Signal</a></p><blockquote><p>The only signal values guaranteed to be present in the os package on all systems are os.Interrupt (send the process an interrupt) and os.Kill (force the process to exit).
On Windows, sending os.Interrupt to a process with os.Process.Signal is not implemented;
it will return an error instead of sending a signal.</p></blockquote>]]></content>
        <category label="oss" term="oss"/>
        <category label="aqua" term="aqua"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS CodeBuild を実行する Github App を作る]]></title>
        <id>/github-app-for-codebuild</id>
        <link href="https://techblog.szksh.cloud/github-app-for-codebuild"/>
        <updated>2021-08-16T00:10:51.000Z</updated>
        <summary type="html"><![CDATA[GitHub Repository の CI に CodeBuild を使う場合、 CodeBuild の Webhook integration (以下 CodeBuild GitHub integration と呼ぶことにします) を使うのが一番自然でしょう。]]></summary>
        <content type="html"><![CDATA[<p>GitHub Repository の CI に CodeBuild を使う場合、 <a href="https://docs.aws.amazon.com/codebuild/latest/userguide/github-webhook.html" target="_blank" rel="noopener noreferrer">CodeBuild の Webhook integration</a> (以下 <code>CodeBuild GitHub integration</code> と呼ぶことにします) を使うのが一番自然でしょう。
基本的なユースケースならこれでよいのですが、 GitHub App を活用することでより高度な CI を実現することができます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="解決したい課題">解決したい課題<a class="hash-link" href="#解決したい課題" title="Direct link to heading">​</a></h2><ul><li>Batch Build の課題<ul><li>起動・終了が遅い</li><li>全 build が成功した Batch Build を Retry できない</li><li>Web UI がわかりにくい<ul><li>余計な build が起動する</li><li>build 単体を Retry できない</li></ul></li><li>build ごとに条件設定とかできない</li><li>buildspec を動的に生成できない</li></ul></li><li><code>CodeBuild GitHub integration</code> の課題<ul><li>Build Project ごとに Repository Webhook が 1 つ作られる<ul><li><a href="https://docs.github.com/en/developers/webhooks-and-events/webhooks/about-webhooks" target="_blank" rel="noopener noreferrer">webhook 1 repository あたり 20 個までしか作れない</a></li><li>(これを裏付ける客観的なソースはないですが) webhook の数が増えると build の動作が不安定になるのを観測しています</li></ul></li><li>Filter の条件が限られている(例えば PR label で filter とかできない)</li><li>複数の build を実行できない(Batch Build も 1 つとみなした場合の話)</li></ul></li><li>CodeBuild の課題<ul><li>Retry した場合 webhook で起動したときの環境変数が設定されない</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="github-app">GitHub App<a class="hash-link" href="#github-app" title="Direct link to heading">​</a></h2><p>Amazon API Gateway と Lambda を使って GitHub App を構築します。
Lambda で webhook を受け取り、 AWS SDK を使って build を実行します。</p><p><img src="https://user-images.githubusercontent.com/13323303/129534257-391da6ac-9690-46df-b6df-53605d3c0c6a.png" alt="codebuilder-architecture"></p><p>GitHub App を作成し、 Webhook URL として API Gateway の endpoint を指定します。
internet facing な API Gateway は Repository ごとに作るのではなく、共有で 1 つ作るようにしたほうが良いかと思います。
Lambda は Repository ごとに分けたほうが権限を絞れるし、 Function がシンプルになるし、あるリポジトリのための変更が他のリポジトリに影響することがないので良いでしょう。</p><p>Batch Build を使う代わりに Build を複数並列で起動することで、 Batch Build の課題を解決できます。
実行時に<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/codebuild/#CodeBuild.StartBuildWithContext" target="_blank" rel="noopener noreferrer">パラメータ</a>を変えることもできます。
Webhook の Payload も参照できるので、 Payload から得たデータ(PR 番号、 label、PR Author 名、 etc)を環境変数として build にわたすこともできます。</p><p>従来は build 内で GitHub API を使って取得していた PR の情報を環境変数として渡せることで
build の処理が簡略化されますし、 GitHub API の call 数を減らすこともできます(これは API の rate limit が問題になる場合に重要です)。</p><p>PR label による build のフィルタリングなど、 <code>CodeBuild GitHub integration</code> では難しいより複雑な filter も実現できます。</p><p>GitHub App であれば Repository Webhook が作られることもありませんし、 Build Project ごとに webhook の設定をする必要もありません。</p><p>Assume Role することで別の AWS Account の Build Project の build を実行することもできます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="merged-event-で-merged-commit-sha-で-build-を実行">merged event で merged commit sha で build を実行<a class="hash-link" href="#merged-event-で-merged-commit-sha-で-build-を実行" title="Direct link to heading">​</a></h2><p>PR がマージされたら merged commit の SHA で CI を実行したい場合、 push event を hook するのがおそらく一般的かと思います。</p><p><code>CodeBuild GitHub integration</code> では <code>merged</code> event を hook することもできますが、
この場合 PR の head branch の SHA で build が実行されてしまいますし、 base branch の commit status が更新されません。</p><p>しかし <code>push</code> event では関連する PR の情報が取れない(build の環境変数として PR の情報が渡されない)という問題があります。
<a href="https://docs.github.com/en/rest/reference/repos#list-pull-requests-associated-with-a-commit" target="_blank" rel="noopener noreferrer">GitHub API でコミットと関連した PR の一覧が取れます</a>が、複数の PR と関連づいている場合、どの PR なのか特定することができません(特定の条件付きであればできますが)。</p><p>そこで GitHub App で <code>merged</code> event (正確には <code>closed</code> event で PR がマージ済の場合) を hook しつつ、
build 起動時に source version として merged commit sha を指定することで
webhook から PR の情報を取得しつつ merged commit の SHA で CI を実行できます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="github-の-personal-access-token-の代わりに-github-app-installation-access-token-を使う">GitHub の Personal Access Token の代わりに GitHub App installation access token を使う<a class="hash-link" href="#github-の-personal-access-token-の代わりに-github-app-installation-access-token-を使う" title="Direct link to heading">​</a></h2><p>CodeBuild の build 内で GitHub API を使いたい場合、 Personal Access Token を発行するのがシンプルですが、 Personal Access Token にはいくつか課題があります。</p><ul><li>token 流出のリスク<ul><li>rotation が難しいので有効期限が設定されてない場合が多い</li></ul></li><li>rate limit<ul><li>token が organization で広く共有されたりするようになると問題になりやすい</li><li>rate limit は account 単位なので、同じ account の token を別に作っても意味がない</li><li>account を増やして org に追加すると、 org のメンバーが増えるのでお金がかかる(まぁ金額的に無視してもよいかもしれませんが)</li></ul></li></ul><p>GitHub App では rotation などを考えなくても一時的な token を発行できるので、セキュリティ的にリスクが低いですし、
GitHub App を作ってもお金はかかりません。
token を発行するには</p><ul><li>App ID</li><li>Installation ID (webhook の payload に含まれている)</li><li>Private key</li></ul><p>が必要で、 build 実行時に installation id を環境変数として渡すことで Lambda だけでなく Codebuild でも installation access token が使えます。</p><p>もちろん GitHub App を使っても rate limit に引っかかることはありますが、 Personal Access Token に比べて回避しやすいかとは思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="lambda-から-repository-のコードを参照する">Lambda から Repository のコードを参照する<a class="hash-link" href="#lambda-から-repository-のコードを参照する" title="Direct link to heading">​</a></h2><p><a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">https://blog.studysapuri.jp/entry/2020/12/03/080000</a> では CodeBuild でリポジトリのコードを checkout し、
build の中で動的に buildspec を生成して batch build を実行しています。</p><p>同じようなことを Lambda でやろうとした場合、色々制約があります。
Lambda ではリポジトリを checkout してくる代わりに、 build を実行するのに必要な情報を静的に生成してリポジトリにコミットしておきそれを GitHub API で取得するというやり方があります。
その場合、ファイルを生成するコマンドをリポジトリに用意しておき、 ちゃんとファイルが最新になっているか CI の中でチェックし、
なっていなければ CI を fail させるか自動で更新してコミットするというのをやるのが良さそうです。
Git の pre-push hook などで check するのもありかもしれません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="github-app-の開発をいかに楽にするか">GitHub App の開発をいかに楽にするか<a class="hash-link" href="#github-app-の開発をいかに楽にするか" title="Direct link to heading">​</a></h2><p>ようは webhook を受け取って build を実行する Lambda Function を実装すればいいだけなのですが、
毎回 0 からコードを書くのはちょっとした手間なので、 Go の簡単な library を作っています。</p><p><a href="https://github.com/suzuki-shunsuke/go-github-app-for-aws-codebuild" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-github-app-for-aws-codebuild</a></p><p>このライブラリ自体は大したものではないので、皆さんのユースケースや言語に合わせて独自に作っても良いでしょう。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="サンプル">サンプル<a class="hash-link" href="#サンプル" title="Direct link to heading">​</a></h2><p>簡単なサンプルも書いています。</p><p><a href="https://github.com/suzuki-shunsuke/example-github-app-for-aws-codebuild" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-github-app-for-aws-codebuild</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="aws" term="aws"/>
        <category label="codebuild" term="codebuild"/>
        <category label="github-app" term="github-app"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021-07 やったこと]]></title>
        <id>/what-i-did-2021-07</id>
        <link href="https://techblog.szksh.cloud/what-i-did-2021-07"/>
        <updated>2021-07-27T21:58:45.000Z</updated>
        <summary type="html"><![CDATA[今まで仕事に限定して書いてきましたが、 OSS 活動なんかにも触れてもいいんじゃないかと思ったので分かる範囲で書きます。]]></summary>
        <content type="html"><![CDATA[<p>今まで仕事に限定して書いてきましたが、 OSS 活動なんかにも触れてもいいんじゃないかと思ったので分かる範囲で書きます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="仕事">仕事<a class="hash-link" href="#仕事" title="Direct link to heading">​</a></h2><ul><li>Docker Image を Docker Hub から ECR へ移行</li><li>Terraform<ul><li>.terraform.lock.hcl を CI の中で自動で更新(commit, push)できるようにした<ul><li>Terraform に詳しくない人も使うので、自動化したほうが良いと判断</li></ul></li><li><a href="https://github.com/minamijoyo/tfmigrate" target="_blank" rel="noopener noreferrer">tfmigrate</a> を CI に導入</li><li>(in progress) Terraform Modules を Terraform の Monorepo とは別リポジトリで管理して versioning するようにした</li><li>Route53 の管理を <a href="https://github.com/codenize-tools/roadworker" target="_blank" rel="noopener noreferrer">Roadworker</a> から Terraform へ移行</li><li>tfmigrate を使ったリファクタリング</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="event">Event<a class="hash-link" href="#event" title="Direct link to heading">​</a></h2><ul><li><a href="https://mercari.connpass.com/event/211073/" target="_blank" rel="noopener noreferrer">Open Policy Agent Rego Knowledge Sharing Meetup</a> で登壇<ul><li><a href="https://gist.github.com/suzuki-shunsuke/9372337aa62a6f8394bb136582ec068e" target="_blank" rel="noopener noreferrer">https://gist.github.com/suzuki-shunsuke/9372337aa62a6f8394bb136582ec068e</a></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="oss-contribution">OSS Contribution<a class="hash-link" href="#oss-contribution" title="Direct link to heading">​</a></h2><p>AWS AppConfig を Terraform で管理できるようにする PR が無事マージされました。</p><ul><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/20172" target="_blank" rel="noopener noreferrer">feat: add aws_appconfig_deployment</a></li><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/20176" target="_blank" rel="noopener noreferrer">fix: add the attribute "environment_id" to aws_appconfig_environment</a></li><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/19359" target="_blank" rel="noopener noreferrer">feat: support AppConfig Deployment Strategy</a></li><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/19324" target="_blank" rel="noopener noreferrer">feat: support AppConfig Hosted Configuration Version</a></li><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/19320" target="_blank" rel="noopener noreferrer">feat: add appconfig_configuration_profile</a></li><li><a href="https://github.com/hashicorp/terraform-provider-aws/pull/19307" target="_blank" rel="noopener noreferrer">feat: add aws_appconfig_application and aws_appconfig_environment</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="新たに作った-oss">新たに作った OSS<a class="hash-link" href="#新たに作った-oss" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/tfmigrator/cli" target="_blank" rel="noopener noreferrer">tfmigrator/cli</a>: CLI to Migrate Terraform Configuration and State with terraform state command and hcledit</li><li><a href="https://github.com/suzuki-shunsuke/renovate-github-tags-datasource-repositories" target="_blank" rel="noopener noreferrer">Renovate github-tags Datasource Repositories</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="tfmigrator">tfmigrator<a class="hash-link" href="#tfmigrator" title="Direct link to heading">​</a></h3><p>Terraform Configuration と State をマイグレーションする tfmigrator の CLI をリリースしました。
tfmigrator には紆余曲折有り(?)、時系列的に</p><ul><li><a href="https://github.com/suzuki-shunsuke/tfmigrator" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/tfmigrator</a> を開発。 CLI</li><li>YAML の設定ファイルの表現力に限界を感じ、 suzuki-shunsuke/tfmigrator をフォークして Go のライブラリ <a href="https://github.com/tfmigrator/tfmigrator" target="_blank" rel="noopener noreferrer">tfmigrator/tfmigrator</a> を開発<ul><li>簡単に CLI を実装できるように API も提供</li><li>ついでに色々改良<ul><li><a href="https://github.com/minamijoyo/hcledit" target="_blank" rel="noopener noreferrer">hcledit</a> のインストールが不要</li><li>ファイルの in place の更新をサポート</li><li>dry run のサポート</li><li>複数のリソースをまとめて扱えるような API も提供 <a href="https://pkg.go.dev/github.com/tfmigrator/tfmigrator@v0.5.1/tfmigrator#QuickRunBatch" target="_blank" rel="noopener noreferrer">QuickRunBatch</a></li><li>etc</li></ul></li></ul></li><li>実際に tfmigrator/tfmigrator を使ってみると Go を書くのがちょっと面倒くさい<ul><li>そもそも複雑な rule を一度に適用しようとするのが間違っていると感じた</li></ul></li><li>tfmigrator/tfmigrator を使い、 CLI も実装 tfmigrator/cli<ul><li>やはり基本的なユースケースでは YAML 書くほうが楽</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="renovate-github-tags-datasource-repositories">Renovate github-tags Datasource Repositories<a class="hash-link" href="#renovate-github-tags-datasource-repositories" title="Direct link to heading">​</a></h3><p>Renovate の Datasource や Manager でサポートされていない package を Renovate で update するために、
package ように GitHub Repository を作って package のバージョンに合わせて GitHub tag を更新し、
<code>github-tags</code> Datasource として使おうというプロジェクトです。
現状 AWS RDS や AWS Elasticache の engine version 用のリポジトリを作っています。
tag は GitHub Actions を毎日定期実行することで更新します。
詳細はリポジトリの README でも読んでください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="新しいバージョンをリリースした-oss">新しいバージョンをリリースした OSS<a class="hash-link" href="#新しいバージョンをリリースした-oss" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">tfcmt</a><ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v2.0.0-0" target="_blank" rel="noopener noreferrer">v2.0.0-0</a></li><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases/tag/v1.1.0" target="_blank" rel="noopener noreferrer">v1.1.0</a><ul><li><a href="https://twitter.com/szkdash/status/1416263752475836416" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1416263752475836416</a></li></ul></li></ul></li></ul><p>terraform v0.15.4 から Terraform 以外での変更も plan に出力されるようになって
わかりにくいと感じたので、 tfcmt でテンプレート変数追加して見やすくできるようにしました。
Refreshing state のログを除外したり、warning 目立たせたりもできて便利です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="blog">Blog<a class="hash-link" href="#blog" title="Direct link to heading">​</a></h2><ul><li><a href="https://techblog.szksh.cloud/archives/2021/07/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/archives/2021/07/</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2021-06-01 ~ 2021-06-30]]></title>
        <id>/2021/06/01/job-06-30</id>
        <link href="https://techblog.szksh.cloud/2021/06/01/job-06-30"/>
        <updated>2021-07-12T20:47:11.000Z</updated>
        <summary type="html"><![CDATA[* GCP を Terraform で管理するための developer support]]></summary>
        <content type="html"><![CDATA[<ul><li>GCP を Terraform で管理するための developer support</li><li>miam を Terraform に移行</li><li>Docker Hub から ECR への移行</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[OPA で Table Driven Tests っぽいことをしてみる]]></title>
        <id>/opa-table-driven-test</id>
        <link href="https://techblog.szksh.cloud/opa-table-driven-test"/>
        <updated>2021-07-09T10:38:55.000Z</updated>
        <summary type="html"><![CDATA[OPA で Table Driven Tests っぽく Policy を Test する方法について考えたので紹介します。]]></summary>
        <content type="html"><![CDATA[<p>OPA で Table Driven Tests っぽく Policy を Test する方法について考えたので紹介します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="背景">背景<a class="hash-link" href="#背景" title="Direct link to heading">​</a></h2><p>先日 <a href="https://mercari.connpass.com/event/211073/" target="_blank" rel="noopener noreferrer">Open Policy Agent Rego Knowledge Sharing Meetup</a> で発表する機会を頂きました。
発表の資料は<a href="https://gist.github.com/suzuki-shunsuke/9372337aa62a6f8394bb136582ec068e" target="_blank" rel="noopener noreferrer">こちら</a>。
普段他社の事例を聞いたり OPA について話たりする機会がないので、非常に貴重な時間になりました。</p><p>その中で <a href="https://twitter.com/deeeet" target="_blank" rel="noopener noreferrer">deeeet</a> さんが <a href="https://github.com/golang/go/wiki/TableDrivenTests" target="_blank" rel="noopener noreferrer">Table Driven Tests</a> っぽくテストしたいというようなことをおっしゃっていました。</p><p>だいたいこの辺: <a href="https://youtu.be/0YpJhrz6L0A?t=2990" target="_blank" rel="noopener noreferrer">https://youtu.be/0YpJhrz6L0A?t=2990</a></p><p>その話を受けて改めて自分で考えてみたところ、できなくはないんじゃないかなという気がしたのでちょっとやってみることにしました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="サンプル">サンプル<a class="hash-link" href="#サンプル" title="Direct link to heading">​</a></h2><p>せっかくなので簡単なサンプルを GitHub に用意しました。</p><p><a href="https://github.com/suzuki-shunsuke/example-opa-table-driven-tests" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-opa-table-driven-tests</a></p><p>今回は aws_cloud_watch_log_group の retention_in_days が設定されていることをチェックする Rule の Test をします。</p><ul><li>Rule: <a href="https://github.com/suzuki-shunsuke/example-opa-table-driven-tests/blob/main/policy/cloudwatch_log_retention_in_days.rego" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-opa-table-driven-tests/blob/main/policy/cloudwatch_log_retention_in_days.rego</a></li><li>Policy Test: <a href="https://github.com/suzuki-shunsuke/example-opa-table-driven-tests/blob/main/policy/cloudwatch_log_retention_in_days_test.rego" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-opa-table-driven-tests/blob/main/policy/cloudwatch_log_retention_in_days_test.rego</a></li></ul><p>テストケースを <code>seeds</code> という list で定義し、どれか一つでも false だったら fail するようにしています。
テストケースの中身は</p><ul><li>msg: テストケースを示すメッセージ。テストが失敗したときの trace に含める</li><li>resource: rule の input</li><li>exp: rule の評価結果の期待値</li></ul><p>になっています。</p><p>test の中身は別の rule を否定しているだけになっていますね。</p><div class="codeBlockContainer_I0IT language-rego theme-code-block"><div class="codeBlockContent_wNvx rego"><pre tabindex="0" class="prism-code language-rego codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">test_deny_aws_cloudwatch_log_grop_retention_in_days {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    not any_deny_aws_cloudwatch_log_grop_retention_in_days</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>この書き方は <a href="https://www.openpolicyagent.org/docs/latest/policy-language/#universal-quantification-for-all" target="_blank" rel="noopener noreferrer">Universal Quantification (FOR ALL)</a> で説明されています。</p><p>Set の比較は <code>!=</code>, <code>==</code> で大丈夫です。 <a href="https://www.openpolicyagent.org/docs/latest/policy-language/#sets" target="_blank" rel="noopener noreferrer">https://www.openpolicyagent.org/docs/latest/policy-language/#sets</a></p><div class="codeBlockContainer_I0IT language-rego theme-code-block"><div class="codeBlockContent_wNvx rego"><pre tabindex="0" class="prism-code language-rego codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">    result != seed.exp</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>test に失敗した場合に、どのテストケースでなぜ失敗したのかわかりやすいように必要な情報を trace で出力するようにしています。</p><div class="codeBlockContainer_I0IT language-rego theme-code-block"><div class="codeBlockContent_wNvx rego"><pre tabindex="0" class="prism-code language-rego codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">    trace(sprintf("FAIL %s (%d): %s, wanted %v, got %v", ["test_deny_aws_cloudwatch_log_grop_retention_in_days", i, seed.msg, seed.exp, result]))</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Conftest の場合、 <code>--trace</code> をつけると出力されます。 <code>Note</code> で grep するとわかりやすいです。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ conftest verify --trace | grep Note</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TRAC   | | | | Note "FAIL test_deny_aws_cloudwatch_log_grop_retention_in_days (1): retention_in_days should be greater than 0, wanted {\"aws_cloudwatch_log_group.main: retention_in_days should be set and greater than 0\"}, got set()"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>以上、簡単ですが Rego で Table Driven Tests っぽく test を書く方法を紹介しました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="opa" term="opa"/>
        <category label="conftest" term="conftest"/>
        <category label="rego" term="rego"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform で空の AWS Lambda Function を作る方法]]></title>
        <id>/create-empty-lambda-by-terraform</id>
        <link href="https://techblog.szksh.cloud/create-empty-lambda-by-terraform"/>
        <updated>2021-06-24T12:25:24.000Z</updated>
        <summary type="html"><![CDATA[Terraform で空の AWS Lambda Function を作ろうとした際にちょっとハマったのでやり方を書いておきます。]]></summary>
        <content type="html"><![CDATA[<p>Terraform で空の AWS Lambda Function を作ろうとした際にちょっとハマったのでやり方を書いておきます。</p><p>「空の Lambda Function」という表現は適切ではないかもしれませんが、
Lambda で実行するコードのデプロイは Terraform 以外のツールでやるけど、
Lambda Function の作成は Terraform で行うので、 dummy のコードを指定して Terraform で Lambda を作るという話です。</p><p>自分は今は <a href="https://github.com/fujiwara/lambroll" target="_blank" rel="noopener noreferrer">lambroll</a> というツールで Lambda をデプロイしています。
lambroll は Lambda Function も作ってくれるので Terraform で作る必要は必ずしもありません。</p><p>しかし Lambda Function に関連するリソースを Terraform で管理する場合、
Lambda Function も Terraform で作ると Lambda Function の ARN や Invoke ARN を参照できます。</p><p>また lambroll でデプロイする場合も先に Terraform で IAM Role を作成する必要がありますが、
Terraform で aws_lambda_permission のようなリソースを作成するには Lambda Function が先に作られている必要があるので、
互いに依存関係が発生し、面倒なことになります。</p><p>また Lambda Function の削除も Terraform でできるようになります。</p><p>なので、 Terraform で Lambda Function を作っておいたほうが色々都合が良いです。</p><p>Terraform で作成と削除は行うものの、更新をしたいわけではないので、 <code>ignore_changes = all</code> を指定します。</p><p><a href="https://www.terraform.io/docs/language/meta-arguments/lifecycle.html#ignore_changes" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/language/meta-arguments/lifecycle.html#ignore_changes</a></p><p>Lambda Function を Web UI などから作る場合 Function code はなくても大丈夫ですが、
Terraform で Lambda Function を作る場合、 <code>filename</code> や <code>image_uri</code>, <code>s3_bucket</code> のいずれかが必須になります。
これは issue もありますが、仕様のようにみえます。</p><p><a href="https://github.com/hashicorp/terraform-provider-aws/issues/5945" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-aws/issues/5945</a></p><p>ECR や S3 に dummy のコードを用意するというのも一つの手ですが、環境に依存するのがあまり良い気がしないので、
archive_file data source を使って dummy の zip ファイルを生成するという方法を取ることにしました。</p><p><a href="https://registry.terraform.io/providers/hashicorp/archive/latest/docs/data-sources/archive_file" target="_blank" rel="noopener noreferrer">https://registry.terraform.io/providers/hashicorp/archive/latest/docs/data-sources/archive_file</a></p><p>次のようなコードで CI で terraform apply を実行しましたが、 zip file がないと言われて失敗しました。</p><div class="codeBlockContainer_I0IT language-tf theme-code-block"><div class="codeBlockContent_wNvx tf"><pre tabindex="0" class="prism-code language-tf codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "aws_lambda_function" "main" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # https://www.terraform.io/docs/language/meta-arguments/lifecycle.html#ignore_changes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # Terraform can create and destroy the remote object but will never propose updates to it.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lifecycle {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ignore_changes = all</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  function_name = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  role          = aws_iam_role.main.arn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  handler  = "bootstrap"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  runtime  = "provided.al2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  filename = data.archive_file.dummy.output_path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data "archive_file" "dummy" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type        = "zip"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  output_path = "${path.module}/dummy.zip"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  source {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    content  = "dummy"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    filename = "bootstrap"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Error: unable to load "lambda-base/dummy.zip": open lambda-base/dummy.zip: no such file or directory</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>しかしローカルで terraform plan, apply を実行してみても再現しませんでした。</p><p>CI では Pull Request で plan file を生成して S3 に plan file を upload し、 PR をマージした default branch では terraform plan を実行せずに S3 から plan file をダウンロードして terraform apply を実行しています。</p><p><a href="https://blog.studysapuri.jp/entry/2021/03/10/080000" target="_blank" rel="noopener noreferrer">Pull Request の terraform plan の実行結果を S3 に保存して安全に apply | Quipper Product Team Blog</a></p><p>plan file を指定して terraform apply を実行した際には zip file が作成されず、上記のエラーが発生することがわかりました。</p><p>関連する issue もありました。 <a href="https://github.com/hashicorp/terraform-provider-archive/issues/39" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-archive/issues/39</a></p><p>この issue では幾つかの解決方法が紹介されています。ちなみに 2021-06-24 現在 Hashicorp 側からは特に反応がないように見えます。
random_uuid や random_string を使った方法もありますが、 Lambda を作成するだけなら null_resource に依存させるだけで十分のように思えました。</p><div class="codeBlockContainer_I0IT language-tf theme-code-block"><div class="codeBlockContent_wNvx tf"><pre tabindex="0" class="prism-code language-tf codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">data "archive_file" "dummy" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type        = "zip"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  output_path = "${path.module}/dummy.zip"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  source {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    content  = "dummy"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    filename = "bootstrap"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  depends_on = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    null_resource.main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "null_resource" "main" {}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このように null_resource に依存させると terraform plan では zip file が作られず、 terraform apply ではじめて zip file が作られるため、
terraform apply が失敗することはなくなりました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
        <category label="lambda" term="lambda"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2021-05-01 ~ 2021-05-31]]></title>
        <id>/2021/05/01/job-05-31</id>
        <link href="https://techblog.szksh.cloud/2021/05/01/job-05-31"/>
        <updated>2021-05-29T23:19:32.000Z</updated>
        <summary type="html"><![CDATA[* SRE チームの新メンバーのオンボーディングのサポート]]></summary>
        <content type="html"><![CDATA[<ul><li>SRE チームの新メンバーのオンボーディングのサポート</li><li>GCP<ul><li>dev からのリクエストに応じて権限付与したり対応</li><li>Terraform による GCP の管理 CI/CD の整備</li><li>Workload Identity Federation について調べた</li><li>Terraform による IAM 管理の仕方を検討</li></ul></li><li>Conftest<ul><li><code>opa fmt</code> によるフォーマット(CI も導入)</li><li>Policy Testing (CI も導入)</li></ul></li><li>Upgrade Terraform to v0.15.4</li><li>miam の Terraform 移行を検証</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2021-04-01 ~ 2021-04-30]]></title>
        <id>/2021/04/01/job-04-30</id>
        <link href="https://techblog.szksh.cloud/2021/04/01/job-04-30"/>
        <updated>2021-04-28T00:28:01.000Z</updated>
        <summary type="html"><![CDATA[* SRE チームの新メンバーのオンボーディングのサポート]]></summary>
        <content type="html"><![CDATA[<ul><li>SRE チームの新メンバーのオンボーディングのサポート</li><li>Lambda の Monorepo<ul><li>幾つか実際に Function 作った(developer support)</li><li>幾つかの Release Strategy の実装・検証<ul><li>シンプルな GitHub Flow</li><li>Git Flow をアレンジしたリリースフロー</li><li>Canary Release</li><li>WIP: AWS AppConfig を用いた Dark Launch</li></ul></li></ul></li><li>IAM User の初期パスワード送信の自動化</li><li>Terraform<ul><li>Renovate による Terraform の patch update の自動化</li><li>Docker を使ったローカル開発環境の改善</li><li>ローカルで terraform init したら .terraform.lock.hcl が更新される問題の対応 <a href="https://techblog.szksh.cloud/terraform-providers-lock/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/terraform-providers-lock/</a></li></ul></li><li>GCP の Terraform 管理<ul><li>調査</li><li>WIP</li></ul></li><li>Conftest<ul><li>社内の Rego の活用事例をまとめた</li><li><code>opa fmt</code> によるフォーマット(CI も導入)</li><li>Policy Testing (CI も導入)</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[PR で変更されたファイルや PR Label に応じて matrix build を実行する Github Actions の Workflow のサンプルを書いてみた]]></title>
        <id>/example-github-actions-dynamic-matrix</id>
        <link href="https://techblog.szksh.cloud/example-github-actions-dynamic-matrix"/>
        <updated>2021-04-25T07:09:47.000Z</updated>
        <summary type="html"><![CDATA[GitHub Actions の勉強がてら Pull Request (以下 PR) で変更されたファイルや PR Label に応じて]]></summary>
        <content type="html"><![CDATA[<p>GitHub Actions の勉強がてら Pull Request (以下 PR) で変更されたファイルや PR Label に応じて
Matrix build を実行する Github Actions の Workflow のサンプルを書いてみました。</p><p><a href="https://github.com/suzuki-shunsuke/example-github-actions-dynamic-matrix" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-github-actions-dynamic-matrix</a></p><p>Monorepo で同じ Job を PR で変更されたものに対してだけ実行したい、
けど workflow をサービスごとに定義するのはめんどいみたいな場合に使えるかもしれません。</p><p>勉強がてらちょっと書いてみて軽く動作確認しただけなので、バグってる、あるいは実用的ではないかもしれません。</p><p>ここでは Monorepo の CI を GitHub Actions で実行する場合を考えます。</p><p>GitHub Actions では path filter を用いて workflow の実行有無を制御することができます。
そこでサービスごとに workflow を作成し、 path filter を設定することでそのサービスが更新されたときのみそのサービスの CI を実行するということが簡単にできます。</p><p>しかし多くのサービスが含まれる Monorepo で各サービスに同じ Job を実行したい場合を考えてみましょう。
その場合サービスを追加するたびに workflow を追加していく必要があります。
まぁ .github/workflows 配下に 1 つ YAML をコピペで作成するだけといえばそれまでなのですが、それすらも省略したいとしましょう。</p><p><a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">Terraform の CI/CD を CodeBuild に移行した話</a>では CodeBuild の Batch Build の buildspec を
PR で変更されたファイルおよび PR Label に応じて動的に生成しています。
これの良いところは、サービスを追加したり、リネームしたり、削除したりしても CI をイジる必要がまったくないところです。</p><p>それと似たようなことを GitHub Actions でもやってみました。</p><p>foo と bar という 2 つのサービス(Go のアプリケーション)があり、
CI では setup job で CI を実行するサービスのリストを動的に生成し、後続の build job で対象サービスの build を実行しています。
例えばリポジトリ直下の README.md だけを更新した場合、どのサービスのビルドも実行されません。
サービス foo の main.go だけを更新した場合、サービス foo のビルドだけ実行され、 bar のビルドは実行されません。
<code>target/&lt;サービス名&gt;</code> という PR Label をつけて CI を実行すると指定したサービスのコードが変更されていなくてもビルドを実行できます。</p><p>主に以下のツールを使いつつ、シェルスクリプトで実装しています。</p><ul><li><a href="https://github.com/suzuki-shunsuke/ci-info" target="_blank" rel="noopener noreferrer">ci-info</a></li><li><a href="https://github.com/suzuki-shunsuke/matchfile" target="_blank" rel="noopener noreferrer">matchfile</a></li><li>jq</li></ul><p>詳細は <a href="https://github.com/suzuki-shunsuke/example-github-actions-dynamic-matrix" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-github-actions-dynamic-matrix</a> のコードと <a href="https://github.com/suzuki-shunsuke/example-github-actions-dynamic-matrix/pulls?q=is%3Apr+is%3Aopen+label%3Ademo" target="_blank" rel="noopener noreferrer">Demo 用の PR</a> を見てください。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="github-actions" term="github-actions"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[terraform init で lock ファイルが更新される問題の対応]]></title>
        <id>/terraform-providers-lock</id>
        <link href="https://techblog.szksh.cloud/terraform-providers-lock"/>
        <updated>2021-04-24T12:57:27.000Z</updated>
        <summary type="html"><![CDATA[Terraform v0.14 で local で terraform init すると lock ファイルが更新されてしまう問題に対応しました。]]></summary>
        <content type="html"><![CDATA[<p>Terraform v0.14 で local で <code>terraform init</code> すると lock ファイルが更新されてしまう問題に対応しました。</p><p>結論を最初に言うと、 <a href="https://blog.studysapuri.jp/entry/2021/03/12/080000" target="_blank" rel="noopener noreferrer">100 以上の Terraform 環境をいい感じに v0.14 に upgrade した方法</a>で紹介している方法で Renovate で Terraform Provider を update する際に <code>terraform init -upgrade</code> を実行して lock ファイルを更新してコミット・プッシュしているのですが、
その際に <code>terraform providers lock -platform=darwin_amd64</code> を実行するようにしました。</p><p>Terraform v0.14 で lock ファイル <code>.terraform.lock.hcl</code> が導入されました。
Renovate で Terraform Provider を update する際にも lock ファイルを更新する必要があるので、
<code>terraform init -upgrade</code> を実行して lock ファイルを更新してコミット・プッシュしています。
なのですが、ローカルで <code>terraform init</code> を実行するとなんか lock ファイルが更新されることが良くありました。しばらく放置していたのですが、 developer から「なんかファイル更新されたんだけど、これコミットしていいの？」と聞かれ、このまま放っておいて困惑させたりもやっとさせたりするのは良くないなと思い、調べてみました。</p><p>lock ファイルについて <a href="https://speakerdeck.com/minamijoyo/how-to-update-terraform-dot-lock-dot-hcl-efficiently" target="_blank" rel="noopener noreferrer">.terraform.lock.hcl 完全に理解した</a>で詳しく解説されていたので大変助かりました。</p><ul><li>lock ファイルには provider の hash 値が記録されている</li><li>lock ファイルは <code>terraform init</code> で自動的に更新される</li><li>hash 値は platform (Mac, Linux, etc) によって違う</li><li><code>terraform init</code> 実行時に、その platform の hash 値が lock ファイルになければ追加される<ul><li>デフォルトでは実行環境以外の Platform の hash 値は追加されない</li></ul></li><li>CI は Linux 上で実行しているので、 Linux の hash 値だけが記録される</li><li>ローカルで Mac 上で <code>terraform init</code> すると Mac の hash 値が追加され、 lock ファイルに差分が生じる</li></ul><p>なので差分が出てしまった場合はコミットするで良いとは思いますが、そもそも CI で lock ファイルを更新する際に Mac の hash 値も追加してしまえばローカルで Mac 上で <code>terraform init</code> しても差分が出なくなります。ちなみに Windows 上で <code>terraform init</code> する人は自分の周りにはいなさそうなので、 Windows は対応しないことにしました。</p><p><a href="https://blog.studysapuri.jp/entry/2021/03/12/080000" target="_blank" rel="noopener noreferrer">100 以上の Terraform 環境をいい感じに v0.14 に upgrade した方法</a>で紹介しているようにすでに lock ファイルを更新してコミット・プッシュする仕組みはあるので、変更としては 1 (正確にはコードコメント入れて4)行追加するだけでした。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">github-comment exec -- terraform providers lock -platform=darwin_amd64</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform Module の Template という使い方]]></title>
        <id>/terraform-module-template</id>
        <link href="https://techblog.szksh.cloud/terraform-module-template"/>
        <updated>2021-04-03T02:04:25.000Z</updated>
        <summary type="html"><![CDATA[Terraform Module の使い方として Terraform Module のテンプレートをコピペして使うというアプローチを紹介します。]]></summary>
        <content type="html"><![CDATA[<p>Terraform Module の使い方として Terraform Module のテンプレートをコピペして使うというアプローチを紹介します。</p><p>Terraform の設定ファイル(以下 tfファイル) を書く際、毎回一から書くのは大変です。
多くの場合、既存のコードを再利用したほうが楽でしょう。</p><p>Terraform のコードの再利用の仕組みとして、 Module があります。
Module は勿論便利なのですが、使い方には注意が必要で、「安易に Module 化するな。使うな」というふうな考え方もあるでしょう。
自分も基本的に同意見で、 Module を共用するようになると Module への変更がしづらくなったり、パラメータがどんどん増えて複雑になったりします。</p><p>例えば次のように共用の local Module を作成するアプローチがあります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">modules/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lambda-base/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    README.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    main.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    variables.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    outputs.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">services/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  foo/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    staging/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      main.tf # リポジトリ直下の modules/lambda-base を参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    production/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      main.tf # リポジトリ直下の modules/lambda-base を参照</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすると modules 配下の Module を変更した際にその Module を使っているすべてのサービスに影響が出てしまい、
サービスのオーナーが様々だったり、曖昧だったり不在だったりすると変更が難しいですし、どんどん Module が複雑になったりします。</p><p>Module を別のリポジトリでバージョニングして管理し、バージョンを指定するようにするというやり方もありますが、
結構複雑というか考えることが多いアプローチだとは思います。</p><p>Terraform にそこまで詳しくない developer にも書いてもらうとなると、シンプルなアプローチにするのが望ましいでしょう(当然これは組織によりますが)。</p><p>そこで Module のテンプレートを用意し、 Module を使いたくなったらそれをコピペして使うというアプローチがあります。
例えば <code>lambda-base</code> という Module の Template を foo というサービスの staging 環境と production 環境で使う場合、次のような感じになります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">services/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  foo/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    staging/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      modules/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lambda-base/ # templates からコピー</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      main.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    production/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      modules/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        lambda-base/ # templates からコピー</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      main.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">templates/ # Module のテンプレートを置いておく</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  lambda-base/ # 中身は普通の Module</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    README.md</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    main.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    variables.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    outputs.tf</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすると 2 つの Module はそれぞれ独立しているため、変更がしやすくなりますし、シンプルに保つことが出来ます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="テンプレートエンジンとかは使わない">テンプレートエンジンとかは使わない<a class="hash-link" href="#テンプレートエンジンとかは使わない" title="Direct link to heading">​</a></h2><p>Module の Template をコピペする際に、コードに変数を埋め込んでコピペする際に置換したりとか、高度なテンプレートエンジンを使って動的に内容を変えたりといったことも考えられますが、
個人的には複雑度が上がるのでやらないほうが良いかなと思っています。
変数であれば Module の input variable として渡せばよいし、テンプレートエンジン使いたいのであれば、テンプレートを分けたり、 HCL で表現したりすればよいのではという気がします。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="考えられるデメリット">考えられるデメリット<a class="hash-link" href="#考えられるデメリット" title="Direct link to heading">​</a></h2><p>通常の Module と比べて、デメリットとしては以下のようなことが考えられます。</p><ul><li>コード量が増える(DRY じゃない)</li><li>Module を一箇所で管理できない<ul><li>一括して変更を加えることが出来ない</li><li>設定を強制することができない</li></ul></li></ul><p>しかし、個人的にはこれは大した問題じゃないと思っています。</p><p>コードが増えることに関しては、それはそうとしか言いようがありません。
一括して変更を加えることが出来ないのは、トレードオフだと思っていて、むしろ対処のサービスを限定しながら Module に変更を加えられるというメリットのほうが大きいと思っています。
設定を強制することができないのは、たしかにそれはあると思っていて、コピペした Module に一括して変更を加えたり Conftest などでテストする仕組みが必要かなと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2021-03-01 ~ 2021-03-31]]></title>
        <id>/2021/03/01/job-03-31</id>
        <link href="https://techblog.szksh.cloud/2021/03/01/job-03-31"/>
        <updated>2021-03-28T14:36:55.000Z</updated>
        <summary type="html"><![CDATA[* ブログの執筆]]></summary>
        <content type="html"><![CDATA[<ul><li>ブログの執筆<ul><li><a href="https://blog.studysapuri.jp/entry/2021/03/12/080000" target="_blank" rel="noopener noreferrer">100 以上の Terraform 環境をいい感じに v0.14 に upgrade した方法</a></li><li><a href="https://blog.studysapuri.jp/entry/2021/03/10/080000" target="_blank" rel="noopener noreferrer">Pull Request の terraform plan の実行結果を S3 に保存して安全に apply</a></li></ul></li><li>Terraform のドキュメント作成<ul><li>CI/CD でやってること</li><li>ローカルでの開発環境 setup</li><li>etc</li></ul></li><li>CI の改善<ul><li>CircleCI の job の branch filter を設定して余計な job が実行されないようにした</li><li>(進行中) デプロイをサービスごとに分割</li></ul></li><li>(進行中) Lambda を爆速でデプロイするためのプラットフォームづくり<ul><li>Terraform + lambroll + AWS CodeBuild</li></ul></li><li>MongoDB upgrade (Atlas)</li><li>On Boarding のドキュメントの整理</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2021-02-01 ~ 2021-02-28]]></title>
        <id>/2021/02/01/job-02-28</id>
        <link href="https://techblog.szksh.cloud/2021/02/01/job-02-28"/>
        <updated>2021-02-27T11:51:56.000Z</updated>
        <summary type="html"><![CDATA[* Terraform リポジトリの統合]]></summary>
        <content type="html"><![CDATA[<ul><li>Terraform リポジトリの統合</li><li><a href="https://blog.studysapuri.jp/entry/2021/03/12/080000" target="_blank" rel="noopener noreferrer">Terraform を v0.14 へ upgrade</a></li><li>デプロイをサービスごとに分割</li><li>CircleCI の設定ファイルの分割<ul><li><a href="https://blog.studysapuri.jp/entry/2020/12/01/080000" target="_blank" rel="noopener noreferrer">https://blog.studysapuri.jp/entry/2020/12/01/080000</a> と同様のことを別のリポジトリでもやった</li></ul></li><li>Renovate の設定を改善し、安全性と運用の負担軽減、オープンなままの PR の削減</li><li>miam の Rate Limit 問題の解消</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2021-01-01 ~ 2021-01-31]]></title>
        <id>/2021/01/01/job-01-31</id>
        <link href="https://techblog.szksh.cloud/2021/01/01/job-01-31"/>
        <updated>2021-02-10T23:13:10.000Z</updated>
        <summary type="html"><![CDATA[* CI: PR コメントの非表示]]></summary>
        <content type="html"><![CDATA[<ul><li>CI: PR コメントの非表示<ul><li>github-comment, tfcmt<ul><li>非表示以外にも細かな改善入れている</li></ul></li></ul></li><li>Renovate<ul><li><a href="https://github.com/renovatebot/renovate/pull/8138" target="_blank" rel="noopener noreferrer">label を設定</a></li><li><a href="/renovate-add-compare/">Renovate の PR に便利なリンクを追加</a></li></ul></li><li>Terraform<ul><li>apply こけたときに plan 再実行して S3 に保存している plan file 及び PR コメントを更新</li><li><a href="https://github.com/mercari/tfnotify" target="_blank" rel="noopener noreferrer">tfnotify</a> を <a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">tfcmt</a> にリプレース<ul><li><a href="/fork-tfnotify/">tfnotify を fork した</a></li></ul></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2020-12-01 ~ 2020-12-31]]></title>
        <id>/2020/12/01/job-12-31</id>
        <link href="https://techblog.szksh.cloud/2020/12/01/job-12-31"/>
        <updated>2021-02-10T23:02:11.000Z</updated>
        <summary type="html"><![CDATA[2020-12-01 から 2020-12-31 にかけて仕事でやったことを書ける範囲で書きます。]]></summary>
        <content type="html"><![CDATA[<p>2020-12-01 から 2020-12-31 にかけて仕事でやったことを書ける範囲で書きます。</p><ul><li>AWS SAM Application の開発</li><li><a href="/renovate-add-compare/">Renovate の PR にリンクを追加</a></li><li>Terraform<ul><li>Terraform の CI に関して日々行っている改善点・変更点をチームにシェア</li><li>Docker Compose を用いてローカルで開発しやすいように改善</li><li>ドキュメント・コードコメントの追加</li><li>リファクタリング<ul><li>不要なコードの削除</li><li>不要な secret を削除</li><li>不要な変数の削除</li><li>data.terraform_remote_state を local values に置換</li><li>なぜか環境変数でパラメータを渡していた箇所を、 local value に置換</li></ul></li><li>CI に tflint の導入</li><li>対象の build が 1 つの場合 batch build を実行しないようにする<ul><li><a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">Terraform の CI/CD を CodeBuild に移行した話</a> の改良</li><li>Batch Build の起動に時間がかかる問題の解消</li></ul></li><li>master の HEAD じゃなくても apply できるようにする</li><li>plan file を S3 に保存</li><li>refactor: tfsec で設定ファイルを使うようにする</li><li>Renovate の PR が多すぎて鬱陶しい問題の対応<ul><li>automerge されるものは reviewer を設定しないようにした</li><li><a href="https://docs.renovatebot.com/configuration-options/#prconcurrentlimit" target="_blank" rel="noopener noreferrer">prConcurrentLimit</a> を 1 にした</li><li>branch protection <code>Require branches to be up to date before merging</code> を無効化</li></ul></li></ul></li><li><a href="https://github.com/stackrox/kube-linter" target="_blank" rel="noopener noreferrer">kube-linter</a><ul><li>Rule に基づいて manifest の修正</li></ul></li><li><a href="https://github.com/codenize-tools/miam" target="_blank" rel="noopener noreferrer">miam</a> でリソースが削除されそうなときに警告をするようにした</li><li>ブログの執筆<ul><li><a href="https://blog.studysapuri.jp/entry/2020/12/10/080000" target="_blank" rel="noopener noreferrer">Renovate の Tips</a></li><li><a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">Terraform の CI/CD を CodeBuild に移行した話</a></li><li><a href="https://blog.studysapuri.jp/entry/2020/12/01/080000" target="_blank" rel="noopener noreferrer">巨大な .circleci/config.yml を分割した話</a></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[terraformer で雑に生成した tf ファイル と state を分割したくてツールを書いた]]></title>
        <id>/tfmigrator</id>
        <link href="https://techblog.szksh.cloud/tfmigrator"/>
        <updated>2021-01-31T05:53:23.000Z</updated>
        <summary type="html"><![CDATA[terraformer で雑に生成した Terraform の設定ファイル (以下 tf ファイル) と state を分割したくてツールを書きました。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/GoogleCloudPlatform/terraformer" target="_blank" rel="noopener noreferrer">terraformer</a> で雑に生成した Terraform の設定ファイル (以下 tf ファイル) と state を分割したくてツールを書きました。</p><p><a href="https://github.com/suzuki-shunsuke/tfmigrator" target="_blank" rel="noopener noreferrer">tfmigrator</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="経緯">経緯<a class="hash-link" href="#経緯" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="miam-から-terraform-へ移行したい">miam から Terraform へ移行したい<a class="hash-link" href="#miam-から-terraform-へ移行したい" title="Direct link to heading">​</a></h3><p><a href="https://github.com/codenize-tools/miam" target="_blank" rel="noopener noreferrer">miam</a> というツールで管理されている大量のリソースを Terraform で管理したくなりました。
多くの AWS Resource は Terraform で管理されていますが、 IAM に関しては miam で管理されています。
なぜ Terraform ではなく miam で管理されているかというと、当時のことは自分には分かりませんが、歴史的な経緯もあると思います。
昔は今よりも Terraform の表現力が豊かではなく、 Ruby で自由にかける miam のほうが扱いやすかったとか、
miam だと miam でリソースを管理することを強制できるため、権限管理を厳格にやるという観点では都合が良いという点もあるかと思います。</p><p>ではなぜ Terraform で管理したくなったかというと、
一番大きな理由は miam で頻繁に rate limit に引っかかるようになったからです。
Terraform にしろ miam にしろ CI/CD で test, apply が実行されるようになっています。
miam では毎回全部のリソースを対象に処理が実行されるため、リソースの数が増えるにつれて rate limit に引っかかりやすくなります。
CI を rerun すれば成功するのですが、悪いときは 3 回連続で rate limit に引っかかり、 4 回目でようやく成功するということもありました。</p><p>Terraform ではサービスや環境単位で State が分割されており、 CI も PR でファイルが変更された state に対してのみ実行されるため、
rate limit に引っかかることは基本ないようになっています。</p><p>他にも色々理由はあるのですが、本題からそれるのでやめておきます。
rate limit だけなら miam でも exclude する機能があるので頑張ればなんとかなる気はします。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="やりたかったこと">やりたかったこと<a class="hash-link" href="#やりたかったこと" title="Direct link to heading">​</a></h3><ul><li>Terraform で既存のリソースを管理したい<ul><li>tf ファイル と state を生成したい</li></ul></li><li>Terraform の設定ファイル と state はサービス・環境ごとに分割したい</li><li>Terraform のリソースパスはヒューマンリーダブルにしたい<ul><li>これは難しければ諦めるのもありだが、できればやりたい</li></ul></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraformer-で自動生成するも色々問題があった">terraformer で自動生成するも色々問題があった<a class="hash-link" href="#terraformer-で自動生成するも色々問題があった" title="Direct link to heading">​</a></h3><p>まずは terraformer で雑に tf ファイル と state を生成しました。
今回 terraformer を使うのは初めてで、 terraformer で万事解決なら話は簡単だったのですが、話はそんな簡単ではありませんでした。
これに関しては、自分の問題(使い方を間違っている、ドキュメントをちゃんと読んでいない)なのか、 あるいは terraformer 側の問題なのかよく分かってない部分もあります。</p><p>まずドキュメントを読んでもいまいちリソースのフィルタリングの仕方が分かりませんでした。
試しに IAM role の名前を指定してそれだけ import しようとしましたが、なぜか全 IAM リソースが import されてしまいました。</p><p>良くわからないので、これは全 IAM リソースを雑に import してからサービス・環境ごとに分割するしか無いかなぁと思いました。</p><p>加えて、リソースパスが全然ヒューマンリーダブルではありませんでした。 terraformer としてはこれは仕方ないと思いますが、なんとかリネームしたいと思いました。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="最初手作業で始めるも自動化が必要と悟る">最初手作業で始めるも、自動化が必要と悟る<a class="hash-link" href="#最初手作業で始めるも自動化が必要と悟る" title="Direct link to heading">​</a></h3><p>最初特定のサービスに関して手作業で tf ファイル, state を移行する作業を行ってみました。
簡単なシェルスクリプトを書いて半自動化してみました。
tf ファイルの操作には <a href="https://github.com/minamijoyo/hcledit" target="_blank" rel="noopener noreferrer">hcledit</a> が便利です。</p><p>以下のようなコマンドを使いました。</p><ul><li>terraform state mv</li><li>hcledit block get</li><li>hcledit block mv</li><li>hcledit block list</li></ul><p>で、やってみたものの、なにせ対象が多いので、これを一つ一つ手作業でやるのは大変だし、ヒューマンエラーは避けられないと感じました。
そこでちょっとしたツールを作ることにしました。
手作業で一回やった分手順はイメージできているので、割と簡単にできるだろうと思いました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="tfmigrator">tfmigrator<a class="hash-link" href="#tfmigrator" title="Direct link to heading">​</a></h2><p>そこで作ったのが <a href="https://github.com/suzuki-shunsuke/tfmigrator" target="_blank" rel="noopener noreferrer">tfmigrator</a> です。
今回は AWS の IAM リソースを扱いますが、 tfmigrator は特定の provider などには依存しないツールです。
Terraform CLI と hcledit が必要です。</p><p>まず terraformer で IAM リソースを全部 import してきます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraformer import aws -r iam --compact --path-pattern .</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすると resources.tf と terraform.tfstate が作られます。</p><p>tfmigrator の設定ファイル tfmigrator.yaml を書きます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">items</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 既に Terraform で管理されているものは無視</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">rule</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'"tags" in Values &amp;&amp; Values.tags.ManagedBy == "Terraform"'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">exclude</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">rule</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'"name" not in Values'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">exclude</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># `name` に "foo" が含まれているものはサービス foo のリソースとみなして分割</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">rule</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Values.name contains "foo"'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">state_out</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo/terraform.tfstate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">resource_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"{{.Values.name}}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tf_path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo/resource.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 以下略</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>tfmigrator の処理の流れをなんとなくそれっぽい擬似言語で表現します。
実際の処理の流れとは若干異なりますが、雰囲気が伝わればと思います。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">for resource in state</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  for item config.items</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if item.rule.match(resource)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if item.exclude</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        # このリソースは処理せず次のリソースの処理に移る</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        break</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      # tf の migration (note: 元の tf はそのまま)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      hcledit block get resource.path &lt; tf | hcledit block mv resource.path "${resource.type}.${item.resource_name(resource)}" &gt;&gt; item.tf_path</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      terraform state mv</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      # 次のリソースの処理に移る</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      break</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>各 item の設定の意味はこんな感じです。</p><ul><li>rule: <a href="https://github.com/antonmedv/expr/blob/master/docs/Language-Definition.md" target="_blank" rel="noopener noreferrer">expr</a> の expression 。この条件にマッチしたリソースをこの item で処理する</li><li>exclude: true の場合、この item にマッチしたリソースは無視する</li><li>state_out: <code>terraform state mv</code> の <code>-state-out</code></li><li>resource_name: 新しいリソース名。デフォルトでは名前はそのまま。 Go の <a href="https://golang.org/pkg/text/template/" target="_blank" rel="noopener noreferrer">text/template</a> で処理されます</li><li>tf_path: Terraform の設定ファイルの出力先</li></ul><p>設定ファイルを書いたら tfmigrator を実行します。
いきなりマイグレーションをするというよりは、まずは dry run てきなことをして動作を確認したいですね。
<code>-skip-state</code> をつけると <code>terraform state mv</code> を skip し、分割される tf ファイル を新しいファイルに出力だけします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ cat *.tf | tfmigrator run -skip-state</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>生成された tf ファイル を眺めて、良さそうなら <code>-skip-state</code> をとって実行します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="tf-ファイル生成時の注意点">tf ファイル生成時の注意点<a class="hash-link" href="#tf-ファイル生成時の注意点" title="Direct link to heading">​</a></h2><p>tf ファイルの生成は現状追記モードで実行されます。なので <code>-skip-state</code> をつけて複数回実行すると同じ設定が重複して書き込まれることになります。
それが困る場合は実行前に対象ファイルを消してから実行してください。</p><p>また、tf ファイルの移行は既存の tf ファイルに対して <code>hcledit block get</code>, <code>hcledit block mv</code> を実行して行われるため、
元の tf ファイルはそのまま残ること、また expression は評価されないことに注意が必要です。
例えば <code>name = var.name</code> のように変数を参照している場合、それもそのまま評価されずに残ります。
とりあえず自分がやりたかったのは terraformer で生成した tf ファイルの移行だったので、そんなに問題にはならないだろうと思っています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="エラーハンドリング">エラーハンドリング<a class="hash-link" href="#エラーハンドリング" title="Direct link to heading">​</a></h2><p>あるリソースの処理でエラーが起こったら即座に異常終了するようにしています。
(当然ですが)ロールバックとかはしません(し、できません)。
エラー出力しつつ次のリソースの処理に移る、というのも考えられますが、間違って <code>terraform state mv</code> されると面倒なので、現状即座に終了するようにしています。
問題のあるリソースを無視したい場合は、 tfmigrator の設定でそのリソースにマッチする item を追加し <code>exclude: true</code> とすればよいでしょう。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="このツールの便利なところ">このツールの便利なところ<a class="hash-link" href="#このツールの便利なところ" title="Direct link to heading">​</a></h2><ul><li>expr を用いてリソースを分類できる</li><li>設定ファイルに記述し、ワン・コマンドで実行できる<ul><li>レビューできる</li><li>後で見返せる</li></ul></li></ul><p>ローカルで試行錯誤しながら複数のコマンドを実行していると、後でなにやったかわからなくなりがちですし、途中で作業を中断したりすると、あとで今どういう状態なのか分からなくなったりします。
ワン・コマンドで実行できるとそういう問題がなくて便利ですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="肝心の移行はできたのか">肝心の移行はできたのか<a class="hash-link" href="#肝心の移行はできたのか" title="Direct link to heading">​</a></h2><p>まだできていません。移行するために tfmigrator を作ったので、これから移行していこうという段階です。
なので tfmigrator はまだ全然使い込んでないですし、使ってく中で機能修正したりすることもあると思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最後に">最後に<a class="hash-link" href="#最後に" title="Direct link to heading">​</a></h2><p>terraformer で雑に import してきた tf ファイルと state をいい感じに分割するために tfmigrator というツールを作りました。
tfmigrator が役に立つケースは割と限られているというか、日常的に使うようなツールでもないですが、
terraformer で雑に import してきたのは良いが、扱いに困っているなんて人には役に立つかもしれません。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[skaffold を使って GitOps する]]></title>
        <id>/gitops-skaffold</id>
        <link href="https://techblog.szksh.cloud/gitops-skaffold"/>
        <updated>2021-01-11T07:24:44.000Z</updated>
        <summary type="html"><![CDATA[skaffold を用いてマニフェストを動的に生成しつつ GitOps する方法を考えたので紹介します。]]></summary>
        <content type="html"><![CDATA[<p>skaffold を用いてマニフェストを動的に生成しつつ GitOps する方法を考えたので紹介します。
なお、現時点ではあくまで考えてみただけで実際に導入したりはしていません。</p><p>GitOps はマニフェストを Git リポジトリにコミットしないといけないわけですが、
Docker image をビルド、プッシュし、マニフェストの image tag を書き換えるという一連の処理をどうやってやるのがいいのか
個人的に考えていました。</p><p>自分は FluxCD には詳しくないのですが、
FluxCD では registry をポーリングして自動で最新のタグに書き換える機能があるそうですね。</p><p><a href="https://toolkit.fluxcd.io/guides/image-update/" target="_blank" rel="noopener noreferrer">https://toolkit.fluxcd.io/guides/image-update/</a></p><p>ただし、まだ alpha であることと、 semver に従っていないといけないようです。
これだと master branch が update されるたびに image をビルドして sha でタグを付与するみたいな運用は難しそうです。</p><p>Skaffold だとマニフェストの image tag を自動で書き換えてくれる機能があります。
加えて <a href="https://skaffold.dev/docs/references/cli/#skaffold-render" target="_blank" rel="noopener noreferrer">skaffold render</a> コマンドを使うと manifest の apply はせずにファイルへの出力だけやってくれます。
出力された manifest を Git リポジトリに commit, push すれば GitOps が実現できそうです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="how">How<a class="hash-link" href="#how" title="Direct link to heading">​</a></h2><p>リポジトリを 2 つ用意します。</p><ul><li>app: アプリケーションのコードとマニフェストを管理するリポジトリ</li><li>manifest: GitOps が連携するマニフェストを管理するリポジトリ</li></ul><p>app は Monorepo になっているとします。ディレクトリ構成は次のような感じをイメージしています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">services/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  foo/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    skaffold.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Dockerfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    kubernetes/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      base/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        kustomization.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        deployment.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      overlays/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        develop/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          kustomization.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        production/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          kustomization.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>skaffold.yaml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> skaffold/v2beta10</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tagPolicy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">gitCommit</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">prefix</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> develop</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">artifacts</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">kustomize</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> kubernetes/overlays/develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">profiles</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> production</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">tagPolicy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">gitCommit</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">prefix</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> production</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">kustomize</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> kubernetes/overlays/production</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><a href="https://skaffold.dev/docs/environment/profiles/" target="_blank" rel="noopener noreferrer">profile</a> によって develop と production を区別しています。</p><p>manifest では tag を指定しないようにします。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">containers</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>skaffold render</code> で manifest を生成します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ skaffold render \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -p production \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --default-repo xxx.dkr.ecr.ap-northeast-1.amazonaws.com \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --offline=true \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --loud=true \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --output manifest.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>--loud=true</code> をつけないとなにも出力しないのでなにが起こってるのかわかりません。</p><p>生成されたマニフェストをみると tag が自動で付与されています。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> xxx.dkr.ecr.ap</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">northeast</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">1.amazonaws.com/foo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">production</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">e3a42e0@sha256</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">7032af912c511ab0c8353c28604461d8960833144953fb50853f087db55ffdd0</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>生成した manifest を <code>manifest</code> リポジトリに commit, push します。
manifest リポジトリを checkout してきて git コマンドでやることもできますが、 <a href="https://github.com/int128/ghcp" target="_blank" rel="noopener noreferrer">ghcp</a> を使うとコマンド1つでできるので便利です。</p><p>manifest リポジトリは対象のサービス及び環境ごとにブランチを分けることにします。
そうしたほうが push の際に失敗しにくいと思います(多分。分からないけど)。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ ghcp commit -u suzuki-shunsuke -r manifest -b "foo/production" -m "message" manifest.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>message は実際にはもっと詳細なメッセージにすべきでしょう。 CI で実行することになると思うので、 build URL を含めたりすると良いでしょう。</p><p>こうすると <code>foo/production</code> ブランチに manifest.yaml が push されます。
あとは ArgoCD や FluxCD のような GitOps ツール で foo/production の manifest.yaml をデプロイすればよいはずです。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">apiVersion</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> argoproj.io/v1alpha1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">kind</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Application</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">metadata</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> argocd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">spec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">source</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">repoURL</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/suzuki</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shunsuke/manifest.git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">targetRevision</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo/production</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> manifest.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">destination</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">server</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//kubernetes.default.svc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">namespace</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> production</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="さいごに">さいごに<a class="hash-link" href="#さいごに" title="Direct link to heading">​</a></h2><p>以上、 Skaffold を使っていい感じに tag を書き換えて GitOps する仕組みを考えてみました。
Skaffold 使うと Docker image の build, push といった一連の流れも全部やってくれるので楽で良いなと感じました。</p><p>GitOps じゃなくても CIOps でも Skaffold でデプロイすると便利そうだなと思いました。
その場合は <code>skaffold render</code> ではなく、 <a href="https://skaffold.dev/docs/references/cli/#skaffold-run" target="_blank" rel="noopener noreferrer">skaffold run</a> になりそうですね。</p><p><a href="https://skaffold.dev/docs/workflows/ci-cd/" target="_blank" rel="noopener noreferrer">https://skaffold.dev/docs/workflows/ci-cd/</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="skaffold" term="skaffold"/>
        <category label="gitops" term="gitops"/>
        <category label="k8s" term="k8s"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[tfnotify を fork した]]></title>
        <id>/fork-tfnotify</id>
        <link href="https://techblog.szksh.cloud/fork-tfnotify"/>
        <updated>2021-01-02T10:42:10.000Z</updated>
        <summary type="html"><![CDATA[mercari/tfnotify を Fork して 2 つほど OSS を作りました。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/mercari/tfnotify" target="_blank" rel="noopener noreferrer">mercari/tfnotify</a> を Fork して 2 つほど OSS を作りました。</p><ul><li><a href="https://github.com/suzuki-shunsuke/tfnotify" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfnotify</a> - tfnotify と互換性あり</li><li><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfcmt</a> - tfnotify と互換性がない</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="開発の経緯">開発の経緯<a class="hash-link" href="#開発の経緯" title="Direct link to heading">​</a></h2><p>これまで tfnotify を便利に使わせてもらってたのですが、幾つか改善したいと思うところがあり、本家に PR を投げました。
しかし残念ながらこれまでのところ反応がなく、そこまで本家が活発ではないこと、また他にも色々改修したいところがあったことから、自分でフォークしてメンテすることにしました。
最初は互換性を維持しながら <a href="https://github.com/suzuki-shunsuke/tfnotify" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/tfnotify</a> を開発していました(今もしています)。
しかし、開発を進めるに連れ、自分にとって必要のないプラットフォームなどに関するコードが邪魔であると感じ、それらを消したバージョンを別に開発することにしました。
互換性がなくなることから、名前も変えて tfcmt としました。</p><p><a href="https://github.com/suzuki-shunsuke/tfcmt" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfcmt</a></p><p>こういった経緯から、 tfcmt のほうを優先的に開発していますが、 tfcmt で実装した機能を後から suzuki-shunsuke/tfnotify にも実装してたりもします。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="fork-元のバージョン">Fork 元のバージョン<a class="hash-link" href="#fork-元のバージョン" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/tfnotify" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/tfnotify</a> は <a href="https://github.com/mercari/tfnotify/releases/tag/v0.7.0" target="_blank" rel="noopener noreferrer">mercari/tfnotify v0.7.0</a> <a href="https://github.com/mercari/tfnotify/commit/fb178d8a5a51f88a51b7fda93ed5443ff56dfc8f" target="_blank" rel="noopener noreferrer">fb178d8</a> をフォークしました。
一方 tfcmt は <a href="https://github.com/suzuki-shunsuke/tfnotify/releases/tag/v1.3.3" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/tfnotify v1.3.3</a> をフォークしました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="mercaritfnotify-との違い">mercari/tfnotify との違い<a class="hash-link" href="#mercaritfnotify-との違い" title="Direct link to heading">​</a></h2><p>本家との違いは Release Note とドキュメントを参照してください。</p><ul><li>suzuki-shunsuke/tfnotify<ul><li><a href="https://github.com/suzuki-shunsuke/tfnotify/releases" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfnotify/releases</a></li><li><a href="https://github.com/suzuki-shunsuke/tfnotify/blob/master/COMPARED_WITH_TFNOTIFY.md" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfnotify/blob/master/COMPARED_WITH_TFNOTIFY.md</a></li></ul></li><li>suzuki-shunsuke/tfcmt<ul><li><a href="https://github.com/suzuki-shunsuke/tfcmt/releases" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfcmt/releases</a></li><li><a href="https://github.com/suzuki-shunsuke/tfcmt/blob/master/COMPARED_WITH_TFNOTIFY.md" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tfcmt/blob/master/COMPARED_WITH_TFNOTIFY.md</a></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019-10 から今(2020-12-31)に至るまで仕事でやっていること]]></title>
        <id>/my-work-2020</id>
        <link href="https://techblog.szksh.cloud/my-work-2020"/>
        <updated>2020-12-31T02:00:40.000Z</updated>
        <summary type="html"><![CDATA[2019-10-01 から今の職場で SRE として働いています。]]></summary>
        <content type="html"><![CDATA[<p>2019-10-01 から今の職場で SRE として働いています。
その中で自分がどういうことをやっているかという話をします。</p><p>2020-12-31 現在の内容です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="要約">要約<a class="hash-link" href="#要約" title="Direct link to heading">​</a></h2><ul><li>プロダクト横断的な SRE チームで、プロダクトのプラットフォームを運用・開発している</li><li>特に CI/CD の改善が得意</li><li>developer に CI/CD をいわばサービスとして提供しており、 DX の改善に取り組んでいる</li><li>Monorepo の負の側面(CIが遅い、関係ないTestがこけるetc)の解消にも取り組んでいる</li><li>自分が直面している課題を解決する OSS を色々開発している</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="キーワード">キーワード<a class="hash-link" href="#キーワード" title="Direct link to heading">​</a></h2><ul><li>SRE</li><li>Monorepo</li><li>CI/CD</li><li>Developer Experience</li><li>Terraform</li><li>Go / Shell script</li><li>k8s</li><li>CircleCI / CodeBuild</li><li>Conftest</li><li>Renovate</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="より具体的にやっていることを書いた記事">より具体的にやっていることを書いた記事<a class="hash-link" href="#より具体的にやっていることを書いた記事" title="Direct link to heading">​</a></h2><ul><li>個人ブログ<ul><li><a href="https://techblog.szksh.cloud/job-2020-10-01-10-31/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/job-2020-10-01-10-31/</a></li><li><a href="https://techblog.szksh.cloud/job-2020-07-01-09-30/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/job-2020-07-01-09-30/</a></li><li><a href="https://techblog.szksh.cloud/job-2020-04-01-06-30/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/job-2020-04-01-06-30/</a></li><li><a href="https://techblog.szksh.cloud/job-2020-01-01-03-31/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/job-2020-01-01-03-31/</a></li><li><a href="https://techblog.szksh.cloud/job-2019-10-01-12-31/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/job-2019-10-01-12-31/</a></li></ul></li><li>会社ブログ<ul><li><a href="https://blog.studysapuri.jp/entry/2020/12/10/080000" target="_blank" rel="noopener noreferrer">Renovate の Tips</a></li><li><a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">Terraform の CI/CD を CodeBuild に移行した話</a></li><li><a href="https://blog.studysapuri.jp/entry/2020/12/01/080000" target="_blank" rel="noopener noreferrer">巨大な .circleci/config.yml を分割した話</a></li><li><a href="https://blog.studysapuri.jp/entry/2020/11/02/080000" target="_blank" rel="noopener noreferrer">Docker Hub の Rate Limit 問題に対応した話</a></li><li><a href="https://blog.studysapuri.jp/entry/2020/04/06/080000" target="_blank" rel="noopener noreferrer">CI の修正をリリース前に本番と同じ条件下で検証出来る仕組みを構築した話</a></li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="何をやっているか">何をやっているか<a class="hash-link" href="#何をやっているか" title="Direct link to heading">​</a></h2><p>プロダクト横断的な SRE チームで、プロダクトのプラットフォームを運用・開発しています。</p><p>SRE と一言で言っても、その領域は非常に多岐にわたります。
組織によって <code>SRE</code> の実態は異なるでしょう。
例えば SRE とは別にセキュリティの専門チームがあるような組織もあるとは思いますが、
現職ではそのようなものはないのでそこも SRE が見ています。
全ての領域に関して個人がスペシャリティを持つというのは非常に難しいので、
全体的にある程度カバーしつつも特定の領域に対しスペシャリティを持つというのが割と現実的な話だと思います。</p><p>自分の場合、 CI/CD の改善を強みとし、そこに主に取り組んでいます。
プラットフォームを運用・開発していると言いましたが、それには CI/CD も含まれます。
現職では Monorepo アーキテクチャが採用されています。
Monorepo にすることで複数のサービスにまたがる変更を 1 つの Pull Request (以下PR) でまとめて出来たり、 CI/CD などの仕組みを共通化することが出来ます。
現職では幾つかの Monorepo があります。</p><ul><li>アプリケーションのコードと k8s manifest の Monorepo</li><li>Ansible の Monorepo</li><li>Terraform の Monorepo</li><li>などなど</li></ul><p>Monorepo の中で CI/CD に関しては SRE が ownership を持ち、言わばサービスとして developer に提供しています。
といっても Jenkins や CircleCI のようなものを自作しているという意味ではありません。
CI/CD には主に CircleCI を使っていますが、CIの設定や CI/CD で使われるスクリプトなどをメンテしています。
全てを SRE が書くということではなく、むしろ developer が新しいサービスを追加する際に簡単に CI/CD をセットアップできるようにしています。</p><p>例えば Terraform ではサービス・環境(staging, production, etc) ごとに State をディレクトリを分けていますが、新しいサービスを追加する際は、まずは generator を実行してコード生成し、そこに Terraform の configuration を書けば CI/CD で test や lint, apply が実行されるようになっています。
元々新しいサービスの追加時には .circleci/config.yml に設定を書き足す必要がありましたが、
最近 <a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">Terraform の CI/CD を CircleCI から CodeBuild に移行した</a> ことでそれが一切不要になりました。日々進化しています。
単に PR で terraform plan して master で terraform apply するだけなら簡単ですが、
より DX の高いものにするのが自分の強み・専門性です。</p><p>Lint や Test を導入したりもします。勿論 Rails などで書かれたアプリケーションのテストを書くということではなく(それを書くのは基本 developer)、例えば k8s のマニフェストのテストや Terraform の lint などです。
Lint や Test は、導入して CI が失敗するようになったら終わり、ではありません。
現職では developer が k8s のマニフェストや Terraform の configuration も書きますが、必ずしも全員がそれらに習熟しているわけではありません。
失敗するようになっても、developer が失敗した原因を理解できなかったら、無駄に rerun してみて結局解決しなくて SRE に質問してくるだけです。
そうではなく、 なぜ CI がこけたのか、どうすればいいのか、その lint はどういう経緯で導入されたのかなどを developer が自分で理解し、自己解決できるようにすることが重要です(勿論必要に応じて問い合わせが発生するのは仕方ないですし、遠慮はしてほしくはありません)。
そこで PR にそれらの情報をコメントするようにしています。
シェルスクリプトから簡単にコメントできるように OSS としてツールも開発しています(<a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">gihtub-comment</a>)。 </p><p>Monorepo では単純に全てのサービスのテスト・ビルド・デプロイを実行すると時間がかかったり、 PR に関係ないテストが落ちたりします。
そのため、必要な job だけ実行するような仕組みが必要です。
そのへんをコードを書かずにいい感じに出来るのが理想ではありますが、 Monorepo のエコシステムはそこまで醸成していないと思っており、自分たちである程度コードを書く必要があります。
自分は Go や Shell Script でそういったコードを普段書きます。</p><p>現職の Monorepo のうち、アプリケーションのコードと k8s manifest の Monorepo は非常に大きく、 CI/CD をナイーブに実装すると非常に時間がかかったり効率が悪かったりします。
そういった問題点を見つけ出し、チューニングするといったこともやりました。</p><p>その中で生まれた OSS もあります。
自分が直面している課題を解決する OSS を開発するのが自分のライフワークです。</p><p><a href="https://github.com/suzuki-shunsuke/profile#libraries" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/profile#libraries</a></p><p>仕事でも使っているツールを幾つか紹介します。</p><ul><li><a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">gihtub-comment</a> GitHub の PR, commit にコメントするツール</li><li><a href="https://github.com/suzuki-shunsuke/circleci-config-merge" target="_blank" rel="noopener noreferrer">circleci-config-merge</a> 分割された .circleci/config.yml をマージ</li><li><a href="https://github.com/suzuki-shunsuke/github-ci-monitor" target="_blank" rel="noopener noreferrer">github-ci-monitor</a> CI のステータスを DataDog でモニタリングする AWS SAM application</li><li><a href="https://github.com/suzuki-shunsuke/matchfile" target="_blank" rel="noopener noreferrer">matchfile</a> Monorepo の CI で、特定のサービスが依存するファイルに変更があったか判定するのに便利</li><li><a href="https://github.com/suzuki-shunsuke/ci-info" target="_blank" rel="noopener noreferrer">ci-info</a> GitHub API を使って CI の情報を取得</li><li><a href="https://github.com/suzuki-shunsuke/dd-time" target="_blank" rel="noopener noreferrer">dd-time</a> コマンドの実行時間を DataDog に送る</li><li><a href="https://github.com/suzuki-shunsuke/akoi" target="_blank" rel="noopener noreferrer">akoi</a> バイナリのバージョン管理</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2020-11-01 ~ 2020-11-30]]></title>
        <id>/2020/11/01/job-11-30</id>
        <link href="https://techblog.szksh.cloud/2020/11/01/job-11-30"/>
        <updated>2020-12-29T20:44:14.000Z</updated>
        <summary type="html"><![CDATA[2020-11-01 から 2020-11-30 にかけて仕事でやったことを書ける範囲で書きます。]]></summary>
        <content type="html"><![CDATA[<p>2020-11-01 から 2020-11-30 にかけて仕事でやったことを書ける範囲で書きます。</p><ul><li><a href="/github-ci-monitor/">github-ci-monitor を導入し、 CI の失敗を通知</a><ul><li><a href="https://github.com/suzuki-shunsuke/github-ci-monitor" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/github-ci-monitor</a></li></ul></li><li>Terraform<ul><li>Upgrade AWS Provider: Renovate で自動更新する仕組みの改善</li><li>Upgrade Terraform from v0.12 to v0.13</li><li><a href="https://github.com/tfsec/tfsec" target="_blank" rel="noopener noreferrer">tfsec</a> の導入</li><li>PR の label によって CI(plan/apply) の実行対象を追加できるようにした</li><li><a href="https://blog.studysapuri.jp/entry/2020/12/03/080000" target="_blank" rel="noopener noreferrer">CircleCI から CodeBuild への移行</a></li><li><a href="https://github.com/minamijoyo/tfmigrate" target="_blank" rel="noopener noreferrer">tfmigrate</a> の検証</li></ul></li><li>Monorepo の CI の高速化 (CircleCI)<ul><li>k8s manifest の test を、変更があったものに対してだけ実行するようにした</li></ul></li><li><a href="https://github.com/stackrox/kube-linter" target="_blank" rel="noopener noreferrer">kube-linter</a> の導入</li><li>Renovate<ul><li><a href="https://blog.studysapuri.jp/entry/2020/12/10/080000" target="_blank" rel="noopener noreferrer">https://blog.studysapuri.jp/entry/2020/12/10/080000</a></li><li>additionalBranchPrefix によるブランチの分割</li><li>depName を使ったリファクタリング</li></ul></li><li><a href="https://blog.studysapuri.jp/entry/2020/12/01/080000" target="_blank" rel="noopener noreferrer">.circleci/config.yml の分割</a></li><li>ブログの執筆<ul><li><a href="https://blog.studysapuri.jp/entry/2020/11/02/080000" target="_blank" rel="noopener noreferrer">Docker Hub の Rate Limit 問題に対応した話</a></li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Renovate の PR に便利なリンクを追加]]></title>
        <id>/renovate-add-compare</id>
        <link href="https://techblog.szksh.cloud/renovate-add-compare"/>
        <updated>2020-12-28T05:32:31.000Z</updated>
        <summary type="html"><![CDATA[Renovate による PR をレビューする際、差分がなんなのか分かりづらいときがあります。]]></summary>
        <content type="html"><![CDATA[<p>Renovate による PR をレビューする際、差分がなんなのか分かりづらいときがあります。
例えば data source が github-release の場合、 PR の description に Release Note が含まれており、コードの差分も link があるので便利です。
一方 helm data source の場合、 そういったものがなく差分がなんなのか分からないことがあります。
そういう場合、 <a href="https://docs.renovatebot.com/configuration-options/#prbodynotes" target="_blank" rel="noopener noreferrer">prBodyNotes</a> を利用して link を追加すると便利です。</p><p>例えば、 datadog helm chart の場合</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"datasources"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"helm"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"packageNames"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"datadog"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"prBodyNotes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"[compare](https://github.com/DataDog/helm-charts/compare/datadog-{{currentVersion}}...datadog-{{newVersion}})"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>とすると、 PR の description にリンクが追加されます。地味ですが便利です。
Release page へのリンクを追加しても便利かもしれませんね。</p><p>ex. <a href="https://github.com/suzuki-shunsuke/test-renovate-2/pull/28" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/test-renovate-2/pull/28</a></p><p>template で使える変数は <a href="https://docs.renovatebot.com/templates/" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/templates/</a> を参照してください。
helm chart ごとに設定を書かないといけないのが面倒ですが、仕方ないですね。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="renovate" term="renovate"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Renovate と Dependabot の比較]]></title>
        <id>/compare-renovate-dependabot</id>
        <link href="https://techblog.szksh.cloud/compare-renovate-dependabot"/>
        <updated>2020-12-05T03:37:17.000Z</updated>
        <summary type="html"><![CDATA[普段 Renovate を主に使っている自分が、 Dependabot と Renovate の違いについて調べてみました。]]></summary>
        <content type="html"><![CDATA[<p>普段 Renovate を主に使っている自分が、 Dependabot と Renovate の違いについて調べてみました。
普段 Renovate を主に使っているので、 Renovate 寄りの内容になっています。
気分を害する人がいましたら申し訳ありません。
Dependabot の理解が浅いので間違ってたら指摘してもらえると助かります。
2020-12-01 時点の情報です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定項目の数">設定項目の数<a class="hash-link" href="#設定項目の数" title="Direct link to heading">​</a></h2><ul><li><a href="https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#directory" target="_blank" rel="noopener noreferrer">https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#directory</a></li><li><a href="https://docs.renovatebot.com/configuration-options/" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/configuration-options/</a></li></ul><p>まずは設定のドキュメントを見比べると、 Renovate のほうが設定項目が多いです。
Renovate はよく言うと設定項目が多く、柔軟な設定ができるといえる一方、すべての設定を理解し使いこなすのは難しいです。
決して日本語の情報も多くないので、色々試行錯誤したりすることもあります。
Dependabot の場合、設定がそんなに多くなく割と分かりやすい印象があります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="scheduling">scheduling<a class="hash-link" href="#scheduling" title="Direct link to heading">​</a></h2><ul><li><a href="https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#scheduleinterval" target="_blank" rel="noopener noreferrer">https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#scheduleinterval</a></li><li><a href="https://docs.renovatebot.com/configuration-options/#prhourlylimit" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/configuration-options/#prhourlylimit</a></li><li><a href="https://docs.renovatebot.com/configuration-options/#schedule" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/configuration-options/#schedule</a></li></ul><p>Dependabot は schedule の設定が必須です。
Renovate でも schedule の設定は出来ます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="dependabot-は-1-個-1-個設定しないといけない">Dependabot は 1 個 1 個設定しないといけない？<a class="hash-link" href="#dependabot-は-1-個-1-個設定しないといけない" title="Direct link to heading">​</a></h2><p>Renovate は renovate.json さえ作れば中身がほぼ空でも勝手に update されます。
逆に対象を絞りたかったら明示的に指定する必要があります。</p><p>一方で Dependabot は対象を 1 つ 1 つ指定しないといけないようですね。</p><p>もちろん、これは必ずしも悪いことではないですし、良い面もあります。
設定が明示的に書かれていたほうが挙動を理解しやすいですしね。</p><p>ただし、数が多いと大変ですし、サービスを追加するたびに設定を追加しないといけなさそうです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="renovate-は-circleciconfigyml-などの-update-もサポート">Renovate は .circleci/config.yml などの update もサポート<a class="hash-link" href="#renovate-は-circleciconfigyml-などの-update-もサポート" title="Direct link to heading">​</a></h2><ul><li><a href="https://docs.renovatebot.com/modules/manager/" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/modules/manager/</a></li><li><a href="https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#package-ecosystem" target="_blank" rel="noopener noreferrer">https://docs.github.com/en/free-pro-team@latest/github/administering-a-repository/configuration-options-for-dependency-updates#package-ecosystem</a></li></ul><p>Renovate は .circleci/config.yml や .drone.yml の Docker image のバージョンの update もサポートしています。
Dependabot はサポートしていないようですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="renovate-は正規表現による-update-をサポート">Renovate は正規表現による update をサポート<a class="hash-link" href="#renovate-は正規表現による-update-をサポート" title="Direct link to heading">​</a></h2><p><a href="https://docs.renovatebot.com/modules/manager/regex/" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/modules/manager/regex/</a></p><p>GitHub Releases からバイナリをダウンロードしてきているような場合でも、
Renovate では Regex Manager を使えば update 出来ます。
CI で使っているツールを GitHub Releases からダウンロードしてきているケースが多いので重宝しています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="renovate-は-grouping-をサポート">Renovate は Grouping をサポート<a class="hash-link" href="#renovate-は-grouping-をサポート" title="Direct link to heading">​</a></h2><p>Renovate は複数のソフトウェアのアップデートを同じ PR でまとめて update できます。</p><p><a href="https://docs.renovatebot.com/configuration-options/#group" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/configuration-options/#group</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="renovate-で-pr-をまとめられたくない場合は-additionalbranchprefix-などの設定が必要">Renovate で PR をまとめられたくない場合は additionalBranchPrefix などの設定が必要<a class="hash-link" href="#renovate-で-pr-をまとめられたくない場合は-additionalbranchprefix-などの設定が必要" title="Direct link to heading">​</a></h2><p><a href="https://docs.renovatebot.com/configuration-options/#additionalbranchprefix" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/configuration-options/#additionalbranchprefix</a></p><p>Renovate だと同じパッケージを複数のサービスで使っている場合、何も設定しないと 1 つの PR に更新がまとめられてしまいます。
additionalBranchPrefix を設定することで回避ができますが、この解決策を見つけるまでに少々苦労しました。
Renovate の難しいところですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="renovate-は設定をライブラリのように共有できる">Renovate は設定をライブラリのように共有できる<a class="hash-link" href="#renovate-は設定をライブラリのように共有できる" title="Direct link to heading">​</a></h2><p><a href="https://docs.renovatebot.com/config-presets/" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/config-presets/</a></p><p>Renovate は汎用的な設定を OSS のように公開し再利用することが出来ます。
仕事だと特に使ってないですが、
個人の Go の Project なんかは同じものを使っていて、便利です。</p><ul><li><a href="https://github.com/suzuki-shunsuke/renovate-config/blob/master/golang.json" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/renovate-config/blob/master/golang.json</a></li><li><a href="https://github.com/suzuki-shunsuke/github-comment/blob/master/renovate.json" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/github-comment/blob/master/renovate.json</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="dependabot" term="dependabot"/>
        <category label="renovate" term="renovate"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform の Docker Provider の Collaborator になりました]]></title>
        <id>/collaborator-of-terraform-docker-provider</id>
        <link href="https://techblog.szksh.cloud/collaborator-of-terraform-docker-provider"/>
        <updated>2020-12-03T00:07:32.000Z</updated>
        <summary type="html"><![CDATA[先日 kreuzwerker/terraform-provider-docker の Collaborator になりました。]]></summary>
        <content type="html"><![CDATA[<p>先日 <a href="https://github.com/kreuzwerker/terraform-provider-docker" target="_blank" rel="noopener noreferrer">kreuzwerker/terraform-provider-docker</a> の Collaborator になりました。
<a href="https://github.com/kreuzwerker/terraform-provider-docker" target="_blank" rel="noopener noreferrer">kreuzwerker/terraform-provider-docker</a> は Terraform の Docker Provider であり、 Docker コンテナや image, network などを管理できます。
元々は Hashicorp の Official Provider であった <a href="https://github.com/terraform-providers/terraform-provider-docker" target="_blank" rel="noopener noreferrer">terraform-providers/terraform-provider-docker</a> が <a href="https://github.com/kreuzwerker/terraform-provider-docker" target="_blank" rel="noopener noreferrer">kreuzwerker/terraform-provider-docker</a> に移管され、 Community Provider になりました。
元のリポジトリは hashicorp org に移され archive されています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="collaborator-になった経緯">Collaborator になった経緯<a class="hash-link" href="#collaborator-になった経緯" title="Direct link to heading">​</a></h2><p>リポジトリが移管される際に、メンテナを募集していて過去に contribution していた自分にも声をかけていただきました。</p><p><a href="https://github.com/hashicorp/terraform-provider-docker/issues/306" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-docker/issues/306</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="contributor-になった経緯">Contributor になった経緯<a class="hash-link" href="#contributor-になった経緯" title="Direct link to heading">​</a></h2><p>自分がこの provider に contribution した経緯は、 Terraform の Hands on を書くのに丁度よい provider を探していたことでした。</p><p>Hands on の題材として Docker コンテナを作ったりできたらいいんじゃないかなと思って Docker provider を試してみました。
しかし当時の docker_container リソースは read をちゃんとサポートしていませんでした。
なので import や update がまともに動きませんでした。
それを見かねて修正して PR を投げたのが最初です。</p><ul><li><a href="https://github.com/hashicorp/terraform-provider-docker/pull/234" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-docker/pull/234</a></li><li><a href="https://github.com/hashicorp/terraform-provider-docker/pull/236" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform-provider-docker/pull/236</a></li></ul><p>その後も幾つか contribution をしました。</p><p>なお、 PR を投げたものの、 Hands on は MySQL Provider を使って書きました。</p><p><a href="https://techblog.szksh.cloud/terraform-hands-on-with-mysql-provider/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/terraform-hands-on-with-mysql-provider/</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2020-10-01 ~ 2020-10-31]]></title>
        <id>/2020/10/01/job-10-31</id>
        <link href="https://techblog.szksh.cloud/2020/10/01/job-10-31"/>
        <updated>2020-11-29T02:48:17.000Z</updated>
        <summary type="html"><![CDATA[2020-10-01 から 2020-10-31 にかけて仕事でやったことを書きます。]]></summary>
        <content type="html"><![CDATA[<p>2020-10-01 から 2020-10-31 にかけて仕事でやったことを書きます。
勿論全部は書けないのでいくつかピックアップして書きます。</p><ul><li>Terraform<ul><li>CodeBuild Batch Build による dynamic な build pipeline の導入</li><li>Conftest の実行方法を修正<ul><li><a href="https://www.openpolicyagent.org/docs/latest/terraform/" target="_blank" rel="noopener noreferrer">https://www.openpolicyagent.org/docs/latest/terraform/</a></li><li>tf ファイルに対して conftest を実行するのではなく、公式の方法に従ってテストするようにした</li></ul></li><li>aws_cloudwatch_log_group.retention_in_days が設定されているか Conftest でテスト<ul><li>コスト削減</li></ul></li><li>tfnotify が parse に失敗した場合、 github-comment でコメント<ul><li><a href="https://techblog.szksh.cloud/post-tfnotify-parse-error/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/post-tfnotify-parse-error/</a></li></ul></li></ul></li><li>Docker Hub 認証するようにした<ul><li><a href="https://blog.studysapuri.jp/entry/2020/11/02/080000" target="_blank" rel="noopener noreferrer">Docker Hub の Rate Limit 問題に対応した話</a></li></ul></li><li>kustomize build のテスト(失敗したら PR にコメントをして、なぜ失敗したか分かるようにした)<ul><li>元々 kustomize build に失敗して CI がこけても、なぜこけたのか分かりにくく、 SRE に問い合わせが来て調べるみたいなことがあった</li><li>どの k8s manifest の kustomize build に失敗したのか、 PR に分かりやすくコメントするようにした</li></ul></li><li>CI で kubectl apply --server-dry-run によるテストを導入</li><li>Monorepo<ul><li>差分検知・デプロイパイプラインの改善</li></ul></li><li>Renovate<ul><li>automerge の導入<ul><li><a href="https://github.com/apps/renovate-approve" target="_blank" rel="noopener noreferrer">renovate-approve</a> 便利</li></ul></li><li>CI で renovate-config-validator による validation の導入<ul><li><a href="https://docs.renovatebot.com/reconfigure-renovate/" target="_blank" rel="noopener noreferrer">https://docs.renovatebot.com/reconfigure-renovate/</a></li></ul></li></ul></li></ul>]]></content>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2020-07-01 ~ 2020-09-30]]></title>
        <id>/2020/07/01/job-09-30</id>
        <link href="https://techblog.szksh.cloud/2020/07/01/job-09-30"/>
        <updated>2020-11-29T02:36:44.000Z</updated>
        <summary type="html"><![CDATA[2020-07-01 から 2020-09-30 にかけて仕事でやったことを書きます。]]></summary>
        <content type="html"><![CDATA[<p>2020-07-01 から 2020-09-30 にかけて仕事でやったことを書きます。
勿論全部は書けないのでいくつかピックアップして書きます。</p><ul><li>Terraform<ul><li>CircleCI から CodeBuild への移行<ul><li>Security + DX</li><li>10月以降も継続</li></ul></li><li>tfnotify の導入<ul><li>Monorepo で導入するには一工夫が必要</li><li>コメントが消える挙動がドキュメント化されてなくて軽くハマった</li></ul></li></ul></li><li>Renovate の導入<ul><li>Regex Manager 便利</li></ul></li><li>Monorepo<ul><li>差分検知・デプロイパイプラインの改善</li></ul></li><li>DataDog からのアラートのハンドリング業務の改善<ul><li>どんなアラートがあって、どう対応したかなどのナレッジの共有の改善</li><li>割とアナログな手法だが、ちゃんと work している</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2020-04-01 ~ 2020-06-30]]></title>
        <id>/2020/04/01/job-06-30</id>
        <link href="https://techblog.szksh.cloud/2020/04/01/job-06-30"/>
        <updated>2020-11-29T02:20:07.000Z</updated>
        <summary type="html"><![CDATA[2020-04-01 から 2020-06-30 にかけて仕事でやったことを書きます。]]></summary>
        <content type="html"><![CDATA[<p>2020-04-01 から 2020-06-30 にかけて仕事でやったことを書きます。
勿論全部は書けないのでいくつかピックアップして書きます。</p><ul><li>Monorepo<ul><li>CI で <code>kustomize build</code> の diff を PR にコメント</li><li>Conftest で k8s manifest の validation の導入</li><li>Go で書かれた差分検知のコードのリファクタリング</li><li>CI の高速化・コスト削減</li></ul></li><li>GitOps<ul><li>GitOps を導入するためのツールの開発のサポート</li></ul></li><li>Terraform<ul><li>input variables を local value に置き換え</li></ul></li><li>GuardDuty の導入<ul><li>Terraform で IaC</li><li>False Positive なアラートが多くてハンドリングできてない</li></ul></li><li>ブログの執筆<ul><li><a href="https://blog.studysapuri.jp/entry/2020/04/06/080000" target="_blank" rel="noopener noreferrer">CI の修正をリリース前に本番と同じ条件下で検証出来る仕組みを構築した話</a></li></ul></li><li>Argo Workflows の検証</li><li>MongoDB Atlas への移行サポート<ul><li>Go で Restore Job の開発</li><li>オペレーション</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2020-01-01 ~ 2020-03-31]]></title>
        <id>/2020/01/01/job-03-31</id>
        <link href="https://techblog.szksh.cloud/2020/01/01/job-03-31"/>
        <updated>2020-11-29T01:50:11.000Z</updated>
        <summary type="html"><![CDATA[2020-01-01 から 2020-03-31 にかけて仕事でやったことを書きます。]]></summary>
        <content type="html"><![CDATA[<p>2020-01-01 から 2020-03-31 にかけて仕事でやったことを書きます。
勿論全部は書けないのでいくつかピックアップして書きます。</p><ul><li>Monorepo<ul><li>更新検知のシェルスクリプトを Go でリプレース<ul><li><a href="https://blog.studysapuri.jp/entry/2020/04/06/080000" target="_blank" rel="noopener noreferrer">CI の修正をリリース前に本番と同じ条件下で検証出来る仕組みを構築した話</a></li></ul></li><li>CircleCI のコードリストアの改善(コスト削減・高速化)<ul><li>リポジトリが非常にでかいので全部 checkout, restore すると時間がかかる</li><li>Job ごとに必要最小限のコードだけをリストアすることで高速化</li></ul></li></ul></li><li>サーバの OS upgrade</li><li>Ansible<ul><li>CI の更新検知で、 PR の label で対象を指定できるようにした(コードに変更がなくてもテストが実行できるようにした)<ul><li>たまにテストしたいときはある</li><li>それまではてきとうにコードを修正しないとテストが実行されなかったが、 PR の label で対象の playbook を指定できるようにした</li></ul></li><li>key=value 形式を YAML に変換<ul><li><a href="https://www.ansible.com/blog/ansible-best-practices-essentials" target="_blank" rel="noopener noreferrer">https://www.ansible.com/blog/ansible-best-practices-essentials</a></li><li><ol start="3"><li>Use Native YAML Syntax</li></ol></li></ul></li></ul></li><li>.circleci/config.yml のリファクタリング<ul><li>job を parameterize して共通化したり</li><li>parameterize された command を使って共通化したり</li><li>コード量の大幅な削減</li></ul></li><li>Terraform<ul><li>CircleCI の環境変数を設定することで、 master での CI を一時的に禁止できるようにした<ul><li>State を弄ってたりするときに予期せぬ apply が実行されないようにするため</li></ul></li><li>master branch の CI が終わるまで wait<ul><li>master の CI が走っている間に PR の CI でまだ apply されていないリソースが差分として出るのを防ぐ</li></ul></li><li>shfmt, shellcheck の導入<ul><li>CI/CD でシェルスクリプトを書いているので、それらを lint</li></ul></li><li><a href="https://www.terraform.io/docs/state/locking.html" target="_blank" rel="noopener noreferrer">State Locking</a> の導入</li><li>Terraform Cloud の検証<ul><li>結果、見送り</li><li>すでに CI/CD pipeline を構築している自分たちにとっては、わざわざ移行するメリットが薄いと判断</li></ul></li></ul></li><li>MongoDB upgrade</li><li>Jenkins Alternative の検証<ul><li>RunDeck</li><li>Argo Workflows</li><li>結局、ローカルで検証した程度</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[仕事でやったこと 2019-10-01 ~ 2019-12-31]]></title>
        <id>/2019/10/01/job-12-31</id>
        <link href="https://techblog.szksh.cloud/2019/10/01/job-12-31"/>
        <updated>2020-11-29T01:38:57.000Z</updated>
        <summary type="html"><![CDATA[2019-10-01 から 2019-12-31 にかけて仕事でやったことを書きます。]]></summary>
        <content type="html"><![CDATA[<p>2019-10-01 から 2019-12-31 にかけて仕事でやったことを書きます。
勿論全部は書けないのでいくつかピックアップして書きます。</p><ul><li>Terraform<ul><li><strong>terraform fmt の導入</strong></li><li><strong>Terraform の upgrade v0.11 =&gt; v0.12</strong></li><li><strong>State の分割 3 =&gt; 40 弱(正確な数は忘れた)</strong></li><li>Conftest による lint: Remote Backend のパスを間違えるとまずいので test を導入</li><li>新しいサービスを追加するときのための generator (シェルスクリプト)を開発</li><li>CODEOWNERS の設定</li><li>突撃隣の Terraform</li><li><strong>リリースブランチをやめて GitHub Flow に移行</strong></li><li>古いリビジョンで apply の実行の禁止(CI がこけるようにした)</li></ul></li><li>Ansible<ul><li>CI の高速化</li><li>Jenkins job を CircleCI の scheduled job にリプレース(脱 Jenkins)</li><li>ローカルでの開発環境の改善<ul><li>コンテナを使い回せるようにする</li></ul></li><li><a href="https://github.com/aelsabbahy/goss" target="_blank" rel="noopener noreferrer">goss</a> に置き換えて高速化</li></ul></li><li>CI の改善<ul><li>高速化(無駄な処理の削減)</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Splitting .circleci/config.yml]]></title>
        <id>/splitting-circleci-config</id>
        <link href="https://techblog.szksh.cloud/splitting-circleci-config"/>
        <updated>2020-11-07T05:43:10.000Z</updated>
        <summary type="html"><![CDATA[In this post I introduce how to split a huge .circleci/config.yml.]]></summary>
        <content type="html"><![CDATA[<p>In this post I introduce how to split a huge <code>.circleci/config.yml</code>.</p><p>CircleCI doesn't support to split .circleci/config.yml, so we manage all workflows and jobs configuration into one file .circleci/config.yml.
If the repository is <a href="https://en.wikipedia.org/wiki/Monorepo" target="_blank" rel="noopener noreferrer">Monorepo</a>, the more the number of services increases, the more the size of .circleci/config.yml becomes large and it's hard to maintain .circleci/config.yml.
By splitting .circleci/config.yml per service, it makes easy to maintain .circleci/config.yml and we can configure split file's <a href="https://docs.github.com/en/free-pro-team@latest/github/creating-cloning-and-archiving-repositories/about-code-owners" target="_blank" rel="noopener noreferrer">CODEOWNERS</a>.</p><p>To split .circleci/config.yml, you have to generate .circleci/config.yml by merging split files and commit both split files and .circleci/config.yml.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="circleci-config-pack">circleci config pack<a class="hash-link" href="#circleci-config-pack" title="Direct link to heading">​</a></h2><p>We can merge split files with the command <code>circleci config pack</code>, but I introduce the other tool <a href="https://github.com/suzuki-shunsuke/circleci-config-merge" target="_blank" rel="noopener noreferrer">circleci-config-merge</a>.</p><p>CircleCI CLI is an official tool so it's reliable, but I feel the restriction of the file name and the directory structure is a little strict.
We have to manage all files on the same directory, and the file path is reflected to generated YAML content.</p><p>For the detail of <code>circleci config pack</code>, please see the official document.</p><p><a href="https://circleci.com/docs/2.0/local-cli/#packing-a-config" target="_blank" rel="noopener noreferrer">https://circleci.com/docs/2.0/local-cli/#packing-a-config</a></p><p>If you can accept the restriction of <code>circleci config pack</code>, I recommend to use it because it is an official tool.
But if it is difficult to accept the restriction, maybe <a href="https://github.com/suzuki-shunsuke/circleci-config-merge" target="_blank" rel="noopener noreferrer">circleci-config-merge</a> would help you.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="circleci-config-merge">circleci-config-merge<a class="hash-link" href="#circleci-config-merge" title="Direct link to heading">​</a></h2><p>circleci-config-merge is a CLI tool to generate .circleci/config.yml by merging split files.</p><p>The usage of circleci-config-merge is like the following.</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ circleci-config-merge merge &lt;file1&gt; [&lt;file2&gt; ...]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>There is no restriction of file paths, and the format of split file is same as .circleci/config.yml.</p><p>For example, you can manage files on the same directory.</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">.circleci/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  config.yml # generated</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  src/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    service1.yml # split config per service</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    service2.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Or you can also manage files on each service directory.</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">service1/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  circleci/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    workflow.yml # you can split file freely</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jobs.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">service2/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  circleci/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    config.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>circleci-config-merge merges the list of workflow jobs.</p><p>For example,</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">workflows</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> foo</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">workflows</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> bar</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The workflow <code>build</code>'s jobs are merged as the following.</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">workflows</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># sort by job name for comparison</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> foo</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="test-circleciconfigyml-in-ci">Test .circleci/config.yml in CI<a class="hash-link" href="#test-circleciconfigyml-in-ci" title="Direct link to heading">​</a></h2><p>If you split .circleci/config.yml, you should test in CI whether .circleci/config.yml is generated by merging split files.
circleci-config-merge doesn't provide such a feature, but you can implement the test with the other tool like <a href="https://github.com/homeport/dyff" target="_blank" rel="noopener noreferrer">dyff</a>.</p><p>I have created an example repository <a href="https://github.com/suzuki-shunsuke/example-circleci-config-merge" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/example-circleci-config-merge</a>.
You can use this example as a reference to split .circleci/config.yml and setup CI.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="use-case">Use case<a class="hash-link" href="#use-case" title="Direct link to heading">​</a></h2><p>Lastly, I introduce a use case of circleci-config-merge.
Recently, I split a huge .circleci/config.yml which is over 6,000 lines to about 60 files.
It was hard to maintain the original .circleci/config.yml, but by splitting it became easy to maintain .circleci/config.yml.
If you are suffer from a huge .circleci/config.yml, let's split it!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>In this post I introduced how to split a huge .circleci/config.yml.
We can generate .circleci/config.yml by merging split files with <a href="https://github.com/suzuki-shunsuke/circleci-config-merge" target="_blank" rel="noopener noreferrer">circleci-config-merge</a>.
Please see the example <a href="https://github.com/suzuki-shunsuke/example-circleci-config-merge" target="_blank" rel="noopener noreferrer">suzuki-shunsuke/example-circleci-config-merge</a> as a reference to split .circleci/config.yml and setup CI.</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="circleci" term="circleci"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[github-ci-monitor: CI のステータスを DataDog で監視]]></title>
        <id>/github-ci-monitor</id>
        <link href="https://techblog.szksh.cloud/github-ci-monitor"/>
        <updated>2020-11-01T08:51:44.000Z</updated>
        <summary type="html"><![CDATA[自作の OSS github-ci-monitor の紹介です。]]></summary>
        <content type="html"><![CDATA[<p>自作の OSS <a href="https://github.com/suzuki-shunsuke/github-ci-monitor" target="_blank" rel="noopener noreferrer">github-ci-monitor</a> の紹介です。</p><p>GitHub リポジトリの CI のステータスを定期的に取得し、 DataDog に送ることで、 CI のステータスを監視するツールです。
現状は AWS Lambda で動かすことを想定していますが、他の方法でも動かせるようにするつもりです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="motivation">Motivation<a class="hash-link" href="#motivation" title="Direct link to heading">​</a></h2><p>モチベーションは、 PR をマージしたあとに CI がこけた場合に通知が欲しいというものです。
マージしたあとに CI が一瞬で終わるなら無事終わるのを見届けてもいいんですが、
数分かかると待ってるのも時間がもったいないです。
しばらくしたあとに結果を確認すればいいんですが、それも面倒くさいですし、普通に忘れます。
そうするとデプロイしたつもりが実は CI がこけてたなんてことが普通にあります。</p><p>そういうことにすぐ気づけるよう、 Slack に通知がほしいと思っていました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="仕組み">仕組み<a class="hash-link" href="#仕組み" title="Direct link to heading">​</a></h2><p>仕組みは単純です。</p><p>GitHub API で各リポジトリのステータスを取得し、 DataDog API でステータスを送信しています。
DataDog API は <a href="https://docs.datadoghq.com/ja/api/v1/service-checks/" target="_blank" rel="noopener noreferrer">Service Check API</a> を使っています。
status は以下のようになります。</p><ul><li>0: 正常</li><li>1: 異常</li><li>3: ステータスの取得に失敗</li></ul><p>また以下の tag が付きます。</p><ul><li>owner: リポジトリのオーナー</li><li>repo: リポジトリ名</li><li>ref: ブランチ名</li></ul><p>各リポジトリのステータスは現状 3 つをサポートしています。</p><ul><li>Commit Status: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-the-combined-status-for-a-specific-reference" target="_blank" rel="noopener noreferrer">Get the combined status for a specific reference</a></li><li>Check API:<ul><li>Check Run: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/checks#list-check-runs-for-a-git-reference" target="_blank" rel="noopener noreferrer">List check runs for a Git reference</a></li><li>Check Suite: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/checks#list-check-suites-for-a-git-reference" target="_blank" rel="noopener noreferrer">List check suites for a Git reference</a></li></ul></li></ul><p>それぞれ on/off を設定でき、複数指定した場合は、どれか 1 つでも失敗していたら status が 1 になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="lambda-で動かす場合のアーキテクチャ">Lambda で動かす場合のアーキテクチャ<a class="hash-link" href="#lambda-で動かす場合のアーキテクチャ" title="Direct link to heading">​</a></h2><p>CloudWatch Events で定期的(5分毎とか)に Lambda Function を実行します。
リポジトリのリストなどの設定は環境変数で渡し、 GitHub Access Token などのクレデンシャルは AWS Secrets Manager 経由で渡します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="実装方針">実装方針<a class="hash-link" href="#実装方針" title="Direct link to heading">​</a></h2><p>CI がこけたら通知してほしいという要件を満たす方法は色々あると思います。</p><p>まず CI の中でこけた場合に通知を飛ばすようにすることが考えられます。
以下のようなメリットがあります(書いてみたら結構ありますね)。</p><ul><li>ツールをどっかで動かしたりツール自体を監視したりする必要がない</li><li>より詳細なメッセージを送れる<ul><li>コマンドの標準エラー出力を含めたり</li><li>CI のリンク貼ったり、 PR の author をメンションしたりもしやすい</li></ul></li><li>CI がこけたらリアルタイムで通知できる</li><li>ポーリングと違い、無駄に API を叩く必要がない</li></ul><p>一方で、これを漏れなく実装するのはけっこう大変だと思います。
例えば CircleCI だと全ての Job でちゃんとハンドリングしないといけなかったりすると思います。
リポジトリが 1 個だけならそれでもいいですが、何十個もあるとなるとだいぶ大変だと思います。</p><p>今回のツールのような方式だと対象のリポジトリの CI に一切手を加えずに実装できるのが大きいです。</p><p>また、 CI の結果を取得する API として CI サービスが提供する API を使って取得することも考えられます。
しかし、 GitHub API を使えば CI サービス毎に実装したりする必要がなくて楽です。</p><p>Slack API を使ってメッセージを投稿するようなことも一瞬考えましたが、 DataDog を使うことで以下のメリットがあります。</p><ul><li>送信先やメッセージのテンプレートとかをツールで管理しなくて良い</li><li>何度もメッセージを送らないように状態を DB で持たなくて良い</li><li>アラートを一時的に止めたりするのも簡単</li></ul><p>また、時間軸でどれだけ CI が壊れた状態だったか、復旧するのにどのくらい時間がかかったか分かるのもなにかに使えるかもしれません。</p><p>今回のツールに限らず、 Slack に直接通知するより DataDog や Sentry を経由したほうが上手くいくことも結構あると思っています。</p><p>また、定期実行する方法としては Lambda 以外にも</p><ul><li>Jenkins</li><li>適当なサーバで cron</li><li>CI サービス</li><li>k8s の CronJob</li><li>k8s の Deployment</li></ul><p>など色々あると思います。そういう風にも実行できるようにバイナリを今後提供したいと思っています。
Lambda を使うとインフラを管理しなくて良いのがメリットだと思います。</p><p>また、 DataDog API で結果を送る push 型のアーキテクチャとは別に、
DataDog Agent + Prometheus Exporter の pull 型もあるんじゃないかなと思います。
そうするとツール側で DataDog API Key が不要になるというメリットがあります。
こちらのパターンも今後実装してみたいと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[matchfile - 変更されたファイルの一覧から必要なタスクを導出するための CLI ツール]]></title>
        <id>/matchfile</id>
        <link href="https://techblog.szksh.cloud/matchfile"/>
        <updated>2020-10-27T10:39:44.000Z</updated>
        <summary type="html"><![CDATA[自作の CLI ツール matchfile について紹介します。]]></summary>
        <content type="html"><![CDATA[<p>自作の CLI ツール matchfile について紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/matchfile" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/matchfile</a></p><p>この記事の執筆時点で最新バージョンは v0.1.1 です。</p><p>変更されたファイルの一覧から実行する必要のあるタスクを導出するための CLI ツールです。
Go で書かれていて、バイナリをダウンロードしてくれば使えます。</p><p>Pull Request (以下 PR) の CI では PR で変更されたファイルに応じて
必要なタスク(build, test, lint, etc) だけを実行したかったりします。</p><p>そこで、 <code>PR で変更されたファイルパスのリスト</code> と <code>タスクが依存するファイルパスの条件</code> を元に、そのタスクを実行する必要があるか判定するためのコマンドとして matchfile を開発しました。</p><p>ただし、 matchfile の機能としては PR や CI とは独立しているので、もっと別の目的でも使えるとは思います。</p><p>matchfile は <code>PR で変更されたファイルパスのリスト</code> や <code>タスクが依存するファイルパスの条件</code> を取得したりする機能はありません。</p><p><code>PR で変更されたファイルパスのリスト</code> は <a href="https://github.com/suzuki-shunsuke/ci-info" target="_blank" rel="noopener noreferrer">ci-info</a> という自分が作った別のツールを使うと取得できます。</p><p><code>タスクが依存するファイルパスの条件</code> はタスクに大きく依存するので matchfile はカバーしていません。</p><p>matchfile の使い方としては</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ matchfile run &lt;PR で変更されたファイルパスのリストが書かれたファイルへのパス&gt; &lt;タスクが依存するファイルパスの条件が書かれたファイルへのパス&gt;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>で、 <code>PR で変更されたファイルパスのリスト</code> のうち一つでも <code>タスクが依存するファイルパスの条件</code> にマッチすれば <code>true</code> を、マッチしなければ <code>false</code> を標準出力します。
コマンドの exit code で結果を表現することも考えられましたが、そうすると <code>set -e</code> しているときに若干面倒くさいので、標準出力で表現しました。</p><p>ごく簡単な例を示します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ echo template/foo.tpl &gt; changed_files.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ echo template &gt; template_dependencies.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ matchfile run changed_files.txt template_dependencies.txt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">true</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>タスクが依存するファイルパスの条件</code> は独自のフォーマットで指定します。
<a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener noreferrer">gitignore のフォーマット</a>にインスパイアされていますが、正規表現が使えるなど、独自のフォーマットになっています。
CI の中でシェルスクリプトで動的に生成することを想定し、行指向のフォーマットになっています。
Go 実装のパーサーが提供されたよく知られた行指向の(コマンドで生成しやすい)フォーマットがあれば良かったんですが、見つからなかったので簡単にフォーマットを定義してみました。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">[#][!][&lt;kind&gt;,...] &lt;path&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>1行に1つ条件を書きます。
上から全部評価されます(どれかマッチしても終わりません)。
<code>#</code> はコメントです。行の途中にコメントを書くことはできません。</p><p><code>!</code> は gitignore と似ていますが、その行を評価する時点で評価結果が <code>true</code> であり、<code>!</code> を除いたその行の評価が <code>true</code> の場合、評価結果が <code>false</code> になります。
日本語が下手くそですね。</p><p>簡単な例を示すと、 <code>foo/foo.txt 以外の foo ディレクトリ直下のファイル</code> としたい場合、次のようになります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">glob foo/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">!glob foo/foo.txt</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>kind</code> は <code>path</code> をどう扱うかを示していて、幾つか種類があります。</p><ul><li>equal: ファイルパスが文字列として完全に一致すればマッチ</li><li>dir: ファイルパスが <code>&lt;path&gt;/</code> で始まればマッチ</li><li>regexp: 正規表現</li><li>glob: グロブ。 <code>**</code> はサポートされてません</li></ul><p>kind はカンマつなぎで複数指定でき、複数指定した場合は、先に指定したものからマッチするかテストされ、一つでもマッチしたらその条件がマッチするものとして扱われます。</p><p>kind の指定は任意で、指定しない場合、 kind は <code>equal,dir,glob</code> として扱われます。</p><p>つまり</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">foo.txt</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>は</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">equal,dir,glob foo.txt</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>と同じです。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[なぜ buildflow を作ったのか]]></title>
        <id>/buildflow-goal</id>
        <link href="https://techblog.szksh.cloud/buildflow-goal"/>
        <updated>2020-10-18T00:53:08.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書きます。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書きます。</p><p>この記事では なぜ buildflow を作ったのかについて説明します。
開発者である自分の好みや置かれた環境などが所々に反映された内容になっています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="解決したい課題">解決したい課題<a class="hash-link" href="#解決したい課題" title="Direct link to heading">​</a></h2><p>自分は CI/CD の DX の改善に業務として取り組んでいます。
リポジトリはたくさんあり、横断的にメンテナンスしています。
幾つかのリポジトリはモノレポになっており、 CI の複雑さが増していたり、 CI の実行時間が長かったりします。</p><p>現在の CI/CD には以下のような問題があると感じています(他にもあるんですが、 buildflow と関係ないので割愛)。</p><ul><li>実行時間が長い<ul><li>PR とは関係ない処理(test, build, etc) が実行されている</li></ul></li><li>金銭的に高い<ul><li>実行時間が長いので無駄にお金がかかっている</li><li>CI サービスによっては並列度を上げることで実行時間が縮む場合があるが、それでもその分お金がかかる</li></ul></li><li>PR とは直接関係ないところで失敗する<ul><li>PR とは関係ない処理(test, build, etc) が実行されていて、それらが flaky で失敗する</li></ul></li><li>メンテナンス性が悪い<ul><li>属人化気味</li><li>何をやっているのか分かりにくい</li></ul></li><li>同じような機能を複数のリポジトリで実装・メンテしたくない</li></ul><p>これらの問題を解決するために buildflow を開発しました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="buildflow-で必要な処理だけを実行する">buildflow で必要な処理だけを実行する<a class="hash-link" href="#buildflow-で必要な処理だけを実行する" title="Direct link to heading">​</a></h2><p>buildflow では PR の情報を自動で取得し、それらに応じて実行する処理を変更できます。
変更されたファイルに応じてだけでなく、 label や PR の author などでも変更できます。
Tengo script を用いて柔軟なロジックを実装できます。
JSON や YAML の読み込みもサポートしているので、依存関係などの設定を別ファイルで管理することも出来ます。</p><p>一部の CI サービスはこれを解決するための機能を提供しています。
CodeBuild は Webhook の Filter で特定のファイルが変更された場合のみ build を実行できますし、
GitHub Actions でも似たようなことが出来ます。 </p><ul><li><a href="https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths" target="_blank" rel="noopener noreferrer">https://docs.github.com/ja/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#onpushpull_requestpaths</a></li></ul><p>それらで事足りるならそれでも良いでしょう。
それらだけだと難しい場合、 buildflow を使うとより柔軟に対応できるかもしれません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="並列処理による高速化">並列処理による高速化<a class="hash-link" href="#並列処理による高速化" title="Direct link to heading">​</a></h2><p>シェルスクリプトで for loop などで処理していて時間がかかっている場合、
buildflow で並列処理すると高速化するかもしれません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="メンテナンス性">メンテナンス性<a class="hash-link" href="#メンテナンス性" title="Direct link to heading">​</a></h2><p>buildflow を使わなくても「必要な処理だけを実行」したり「並列処理で高速化」したりはできるでしょう。
それでも buildflow を開発したのは、楽をするため、メンテナンス性を高めるためです。</p><p>PR の情報はよく必要になるので自動で取得するようにしています。</p><p>シェルスクリプトで複雑な CI を実装していると、メンテナンス性が悪くなります。
チームメンバーのシェルスクリプトへの習熟度に依存しますが、
シェルスクリプトはエンジニアなら誰でも書ける分全員が習熟しているとは限りませんし、
容易にバグが生まれます。
チームによりますが、Python や Ruby, Go といった他の言語と比べ、 lint や test がされてないことが多いせいもあるとは思います。
アプリケーションのコードは当然 CI で test, lint するのに、
CI とかのシェルスクリプトはしないというのも珍しくないと思います。</p><p>あとはサポートされているデータ構造が貧弱だったり、関数の I/F がわかりにくかったり、ググりにくい機能が多かったり、
コマンドのオプションを逐一調べないとわからなかったりします。</p><p>余談ですが、 shellcheck や shfmt を使うことをオススメします。
shellcheck を始めて使うと、シェルスクリプトにはこんなに色々罠があるのかと気付かされると思います。</p><p><a href="https://google.github.io/styleguide/shellguide.html" target="_blank" rel="noopener noreferrer">Google の Shell Style Guide</a> では次のように書かれています。</p><blockquote><p>If you are writing a script that is more than 100 lines long, or that uses non-straightforward control flow logic, you should rewrite it in a more structured language now</p></blockquote><p>では Ruby や Python といったスクリプト言語で書いたらどうでしょうか？
シェルスクリプトで挙げた問題は解決すると思いますし、非常に自然で合理的な選択だと思います。</p><p>それでも buildflow を実装したのには、幾つか課題感があったからです。
まずは処理系、サードパーティのライブラリ、 OS パッケージに依存することです。
サードパーティのライブラリは使わなければいい話ですが、 Ruby や Python を使っていれば使いたいという声も出てくることはあるでしょう。
アプリケーションで同じ言語を使っていればそれとの共存も気にしないといけないかもしれません。
buildflow に限らず、自分は Go の「ワンバイナリで動く」という世界観が非常に好きです。</p><p>自分はこれまでシェルスクリプトを Go で書き直すということをやってきました。
その場合以下の2つがありますが、どちらにせよ課題感があります。</p><ul><li>ビルド済みのバイナリを使う<ul><li>配布方法を考えないといけない</li></ul></li><li>スクリプト言語のように <code>go run</code> で実行する<ul><li>他のスクリプト言語と同様の問題がある</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="ロジックとコマンドの分離">ロジックとコマンドの分離<a class="hash-link" href="#ロジックとコマンドの分離" title="Direct link to heading">​</a></h2><p>シェルスクリプトを何かしらの言語で書き直す場合、
全てをそれらで書きたいわけではありません。
だからこそ、規模が小さいうちはシェルスクリプトで書くのでしょう。
シェルスクリプトで書いたほうが楽な部分もあるのです。</p><p>buildflow ではコードを以下の3つに分離します。</p><ul><li>設定ファイル(YAML)</li><li>Tengo script</li><li>シェルスクリプト(細かいこと言うと、シェルスクリプト以外も実は使えるけど)</li></ul><p>こうしてシェルスクリプトで書きにくい部分を分離し、適切な粒度で管理することでメンテナンス性を高めるというのが一つの狙いです。
Tengo script は基本的にデータの整形などに役割を限定し、外部ファイルに切り出せるようにすることで
テストしやすいようになっています。</p><p>buildflow にはフレームワークとしての側面があり、
buildflow に乗っかることで共通の機能の実装を省いたり、コードを適切に分割してメンテナンス性を維持することができると期待しています。</p><p>尤もここはトレードオフがあるでしょう。
上記の 3 つを行き来しないといけなくて辛いというフィードバックをもらったこともあります。
コード分割は必須ではないので YAML にインラインで書くことも出来ますが、あまりおすすめしないのと、
そもそも上記のフィードバックはファイルの行き来だけでなく</p><ul><li>buildflow の設定</li><li>Tengo Script</li><li>シェルスクリプト</li></ul><p>という 3 つの異なる言語を行き来するという意味もあるのでしょう。</p><p>それはそういう側面もあるでしょう。
これは buildflow の根本的な部分なので変更されることはないと思います。
もし変更するようなら多分別のツールとして作っているでしょう。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="まとめ">まとめ<a class="hash-link" href="#まとめ" title="Direct link to heading">​</a></h2><p>buildflow は自分が直面している CI/CD の課題</p><ul><li>必要な処理だけ実行したい</li><li>共通の処理を逐一実装したくない</li><li>メンテナンス性を高めたい</li></ul><p>を解決するために作りました。</p><p>buildflow はワンバイナリで動きます。
コードを適切に分離し、シェルスクリプトから複雑なロジックを除去することで、メンテナンス性を高めることを目指しています。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow の実行結果の出力形式]]></title>
        <id>/buildflow-result-output</id>
        <link href="https://techblog.szksh.cloud/buildflow-result-output"/>
        <updated>2020-10-17T23:36:09.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書きます。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書きます。</p><p>この記事では buildflow の実行結果の出力フォーマットなどについて説明します。</p><p>ちょっと出力はわかりにくいかもしれません。
改善したいと思いつつ、どうあるべきなのかまだ見えてないのでこんな感じになっています。</p><p>task の標準出力、標準エラー出力はリアルタイムで出力されます。
また、複数のタスクを並列実行できます。
複数のタスクのログをリアルタイムで出力すると当然混じるので、区別がつくように各行の prefix に <code>timestamp | task name | </code> をつけて出力します。
それでも混じるとわかりにくいので、 phase が完了後に、 phase の全 task のログを混ざらないようにそれぞれ標準エラー出力します。
つまり同じログが 2 回出力されますが 2 回実行されているわけではないです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">==============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= Phase: phase 名 =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10:47:54UTC | task A | + /bin/sh -c echo hello # 実行されるコマンド</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10:47:54UTC | task B | + /bin/sh -c echo foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10:47:54UTC | task A | hello # コマンドの標準(エラー)出力</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">10:47:54UTC | task A | </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">... # リアルタイムに出力されるので複数の task のログが混ざる場合がある</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= Phase Result: phase 名 = # 該当 phase の全 task 完了後に全 task の結果と標準(エラー)出力を出力する</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">status: succeeded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">task: task A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">status: succeeded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exit code: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">start time: 2020-10-14T10:47:54Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end time: 2020-10-14T10:47:54Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">duration: 4.818877ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+ /bin/sh -c echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow が自動で取得する Pull Request の情報]]></title>
        <id>/buildflow-pr-info</id>
        <link href="https://techblog.szksh.cloud/buildflow-pr-info"/>
        <updated>2020-10-17T23:13:48.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書きます。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書きます。</p><p>この記事では buildflow が自動で Pull Request (以下 PR) の情報を取得してくる機能について説明します。</p><p>この機能は GitHub のみサポートしています。 GitLab や BitBucket はサポートしていません。
これは単純に自分が GitHub しか使わないからです。</p><p>PR の CI では</p><ul><li>変更されたものだけテストする</li><li>特定の PR ラベルがついていたら実行する</li><li>特定のユーザーの PR だけ処理を変える(bot とか)</li></ul><p>のように PR の情報に基づいて挙動を変えたくなったりします。</p><p>シェルスクリプトで GitHub API 叩いて情報とってきて jq でパースしてとか、頑張れば別にできるんですが、
毎回そういうコードを書きたくないなと感じていました。</p><p>なお、 PR の情報をとってくる機能はデフォルトで無効化されています(GitHub Access Token 必要ですしね)。
設定で <code>pr: true</code> を指定してください。</p><p>PR の情報をとってくるには、以下の情報が必要です。</p><ul><li>repository owner: 設定ファイルで <code>owner</code> を設定するか、自動取得。 <code>owner</code> を設定してある場合はそちらが優先される</li><li>repository name: 設定ファイルで <code>repo</code> を設定するか、自動取得。 <code>repo</code> を設定してある場合はそちらが優先される</li><li>pull request number: 自動取得</li><li>GitHub Access Token: 環境変数 <code>GITHUB_TOKEN</code> または <code>GITHUB_ACCESS_TOKEN</code> を指定してください</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="取得される情報">取得される情報<a class="hash-link" href="#取得される情報" title="Direct link to heading">​</a></h2><p>以下のパラメータがテンプレートや Tengo script に渡されます。</p><ul><li>PR: PR の情報: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls#get-a-pull-request" target="_blank" rel="noopener noreferrer">GitHub API</a> のレスポンス body</li><li>Files: PR で更新されたファイルの一覧: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls#list-pull-requests-files" target="_blank" rel="noopener noreferrer">GitHub API</a> のレスポンス body</li></ul><p>Files に関してはページネーションされていても全てのファイルが取得できるまで繰り返し API を叩いています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="自動取得の仕組み">自動取得の仕組み<a class="hash-link" href="#自動取得の仕組み" title="Direct link to heading">​</a></h2><p>各種 CI サービスの組み込みの環境変数からそれらの情報を自動で取得してくれます。</p><p>内部的には go-ci-env を使っているので、 PR 情報の自動取得をサポートしている CI サービスは以下のとおりです。</p><p><a href="https://github.com/suzuki-shunsuke/go-ci-env#supported-ci-services" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-ci-env#supported-ci-services</a></p><p>PR 番号が環境変数から取得できない場合、 revision から関連する PR のリストを取得し、一番最初の PR とみなします。
これは PR のマージコミットの CI ではマージされた PR の情報を取得することを意図しています。</p><p>関連する PR が存在しない場合は取得されるパラメータが <code>nil</code> になるだけで、 buildflow は異常終了したりせずに処理を続行します。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow ではなぜ Tengo を採用しているのか]]></title>
        <id>/buildflow-why-tengo</id>
        <link href="https://techblog.szksh.cloud/buildflow-why-tengo"/>
        <updated>2020-10-17T13:35:56.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書きます。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書きます。</p><p>この記事では buildflow でなぜ Tengo を採用しているのかについて説明します。</p><p><a href="https://github.com/d5/tengo" target="_blank" rel="noopener noreferrer">https://github.com/d5/tengo</a></p><p>Tengo に関しては <a href="https://techblog.szksh.cloud/buildflow-1/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/buildflow-1/</a> でも多少触れています。</p><p>なぜ Tengo を採用しているのかに関しては</p><ul><li>なぜスクリプト言語を採用しているのか</li><li>なぜ他の言語ではなく Tengo なのか</li></ul><p>の 2 つの観点で話します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜスクリプト言語を採用しているのか">なぜスクリプト言語を採用しているのか<a class="hash-link" href="#なぜスクリプト言語を採用しているのか" title="Direct link to heading">​</a></h2><p>逆にスクリプト言語を採用しない方法としては、 YAML などで独自 DSL のようなものを定義する方法があります。
DSL と言うと大げさかもしれませんが、 AND, OR, NOT といった論理を YAML のようなデータ記述言語で表現しようと思うとそんな感じになると思います。</p><p>この方法は扱いたいロジックが単純なものに限られるのであれば問題ないですが、
より柔軟なロジックを表現したいとなった場合に、無理があります。</p><ul><li>どうやって表現すればいいのか自分で考えないといけない<ul><li>どう頑張っても独自ルールになるため、ユーザーにとって直感的とは言えない</li></ul></li><li>正しく実装しないといけない</li><li>仕様をドキュメント化しないといけない</li></ul><p>一方、 Go では幾つかのスクリプト言語がサードパーティのライブラリとして実装されており、 buildflow のようなツールに組み込むことが出来ます。</p><p><a href="https://github.com/avelino/awesome-go#embeddable-scripting-languages" target="_blank" rel="noopener noreferrer">https://github.com/avelino/awesome-go#embeddable-scripting-languages</a></p><p>これらを活用すれば上記の問題は解決できるうえに、非常に柔軟にロジックを実装できます(勿論言語によりますが)。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜ他の言語ではなく-tengo-なのか">なぜ他の言語ではなく Tengo なのか<a class="hash-link" href="#なぜ他の言語ではなく-tengo-なのか" title="Direct link to heading">​</a></h2><p>単純に <a href="https://github.com/avelino/awesome-go#embeddable-scripting-languages" target="_blank" rel="noopener noreferrer">https://github.com/avelino/awesome-go#embeddable-scripting-languages</a> で紹介されているライブラリの中で一番要件にマッチしてそうだったからです。
といっても全てをちゃんとチェックしたわけではありませんが。
Lua とかもあるのでそれでも良かったかもですが、自分は Lua を全然知りません。
あとちゃんとバージョンニングされていたのも理由の一つです。
Tengo より人気のある言語もありましたが、バージョニングされてないという理由で見送ったりしました。</p><p>実は Tengo の前に他の言語 <a href="https://github.com/antonmedv/expr" target="_blank" rel="noopener noreferrer">antonmedv/expr</a> を採用していたのですが、途中で表現力が足りてないので移行しました。
github-comment でも antonmedv/expr は使ってますし、便利ではあるのですが、
変数が宣言できず、基本ワンライナーで書くしかないので無理だなと判断しました。</p><p><a href="https://github.com/suzuki-shunsuke/buildflow/issues/20" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/buildflow/issues/20</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="buildflow-でスクリプト言語に求めているもの">buildflow でスクリプト言語に求めているもの<a class="hash-link" href="#buildflow-でスクリプト言語に求めているもの" title="Direct link to heading">​</a></h2><p>buildflow における Tengo の用途はあくまでロジックの記述、シェルスクリプトでは扱いにくい map 等の操作です。
Tengo で外部コマンドを呼び出したりとかファイルを読み書きしたりとかそういうことは考えていません
(てっきりそういうことが出来ない言語なのかと当初思っていましたが、できるようですね)。</p><p>Tengo は Python や Ruby, Go といった言語に比べれば言語仕様がコンパクトであり、
よく知らなくてもなんとなく読めるし、簡単にかけると思っています。</p><p>また、 Tengo ではテキスト処理などに使える標準ライブラリが提供されています(これがないと辛かったけど、あるので十分)。</p><p>なので今の所 Tengo で十分だと考えています。 Tengo よりリッチな言語があったとしても、今の所あまり移行するモチベーションはありません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="tengo-に関する不満">Tengo に関する不満<a class="hash-link" href="#tengo-に関する不満" title="Direct link to heading">​</a></h2><p>Tengo に関する不満を挙げると以下のようなものがあります。</p><ul><li>やはり認知度が低い</li><li>linter などがない</li><li>各種 editor で syntax highlight がない(issue はある) <a href="https://github.com/d5/tengo/issues/146" target="_blank" rel="noopener noreferrer">https://github.com/d5/tengo/issues/146</a></li></ul><p>情報が少ないのに関しては、言語仕様がシンプルなので個人的には今の所困ってません(公式ドキュメント読めば分かる</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="tengo-script-の実行-test">Tengo script の実行、 Test<a class="hash-link" href="#tengo-script-の実行-test" title="Direct link to heading">​</a></h2><p>よく知らない言語であれば、試しに実行してみたり、ちゃんとテストを書いたりしたいですよね。</p><p>実行に関しては公式の方でツールがあったりします。</p><ul><li><a href="https://tengolang.com/" target="_blank" rel="noopener noreferrer">https://tengolang.com/</a></li><li><a href="https://github.com/d5/tengo/blob/master/docs/tengo-cli.md" target="_blank" rel="noopener noreferrer">https://github.com/d5/tengo/blob/master/docs/tengo-cli.md</a></li></ul><p>テストに関しては簡単なツールを別に作りました <a href="https://github.com/suzuki-shunsuke/tengo-tester" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/tengo-tester</a>
従来シェルスクリプトでこういうロジックを実装しても「動けばいい」程度に考えていてテストは書かないことが多かったですが、
ロジックだけを Tengo のスクリプトとして切り出し、テストツールも用意することでちゃんとテストを書くようになることを期待しています。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow の dynamic task]]></title>
        <id>/buildflow-dynamic-task</id>
        <link href="https://techblog.szksh.cloud/buildflow-dynamic-task"/>
        <updated>2020-10-17T12:29:51.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書きます。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書きます。</p><p>この記事では buildflow の dynamic task という機能について説明します。
dynamic task では task.items の値でループを回し、複数の task を動的に生成できます。
勿論 task.items はオプションなので、指定しなければ普通の task として扱われます。
task.items を指定する場合、 map か list か、それらを返す Tengo script でないといけません。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"list {{.Item.Key}} {{.Item.Value.name}}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"echo {{.Item.Key}} {{.Item.Value.name}} {{.Item.Value.age}}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">items</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">age</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">age</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">20</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>上記の設定は dynamic task を使わないとこうなります。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"list 0 foo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"echo 0 foo 10"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"list 1 bar"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"echo 1 bar 20"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>パラメータ <code>Item</code> は Key, Value を持ち、 Items が map の場合、それぞれ map の key, value が渡され、 list の場合、 index と value が渡されます。</p><p>上記の例は単純すぎてイマイチかもしれませんが、
例えばファイルなどの一覧を返すコマンドの実行結果を元に
dynamic task でファイルごとに別の task で並列に処理するとかが考えられそうです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="制約">制約<a class="hash-link" href="#制約" title="Direct link to heading">​</a></h2><p>task.items は phase の最初に評価されます。
つまり同じ phase の task の結果を参照したり出来ません。</p><p>これは task.dependency の評価時に、 task のリストが定まっていないと評価できないためです。</p><p>ただし、前の phase 及び phase の task の実行結果は参照できるため、 items で特定の task の実行結果を参照したい場合は、phase を分けることになります。</p><p>実は dynamic task を実現する上で上記の問題をクリアするために phase という概念を導入したという経緯があったります。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow の task の input, output という機能]]></title>
        <id>/buildflow-input-output</id>
        <link href="https://techblog.szksh.cloud/buildflow-input-output"/>
        <updated>2020-10-17T12:05:41.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書きます。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書きます。</p><p>この記事では buildflow の task の input, output という機能について説明します。
task の input, output は Tengo script で task のパラメータを整形する機能です。</p><p>task の command.command や write_file.template など、幾つかの設定では Go の text/template が使えますが、 text/template は複雑なロジックを記述したりするのには向いていません。
そこで task の input で Tengo script を使って必要なデータの整形を行うことで、
template は比較的きれいな状態に保つことが出来ます。</p><p>これは MVC モデルで View とロジックを分離するみたいな考え方と似ているかもしれません。</p><p>output ではコマンドの実行結果を整形することが出来ます。
例えばコマンドの標準出力をユニークな文字列のリストにしたり出来ます。</p><p>task.input は task.when が評価されたあと、 task の command などが実行される前に評価されます。
つまり、 task.when や task.dependency で同じ task の input の結果を参照は出来ません。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow で設定ファイルを分割する]]></title>
        <id>/buildflow-split-files</id>
        <link href="https://techblog.szksh.cloud/buildflow-split-files"/>
        <updated>2020-10-17T11:49:28.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうかなと思います。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書こうかなと思います。</p><p>この記事では buildflow の設定ファイルを分割する方法について説明します。</p><p>buildflow では一部の設定項目について他のファイルのパスを指定して読み込むということが出来ます。
1 つのファイルに全部の設定を書いていると、ファイルが大きくなってメンテナンス性が悪くなったり、
コードオーナーが曖昧になったりするので、そういう場合は分割すると良いでしょう。
コードオーナーが異なる複数のサービスで共通の設定ファイルを用いる場合、ファイルを分割して
GitHub の CODEOWNERS を設定するのもよいでしょう。
あまりないかもしれませんが、ファイルを分割すると同じファイルを読み込んで再利用も出来ます。</p><p>また、 Tengo script を独立したファイルに分割すると、 test が可能になります。
Tengo script をテストするためのツールとして <a href="https://github.com/suzuki-shunsuke/tengo-tester" target="_blank" rel="noopener noreferrer">tengo-tester</a> というツールも開発しているので、そちらをお使いください。</p><p>以下のようなファイル読み込みの設定があります。</p><ul><li>phase.import</li><li>task.import:</li><li>task.input_file</li><li>task.output_file</li><li>task.when_file</li><li>command.command_file</li><li>command.env[].value_file</li><li>write_file.template_file</li></ul><p>ファイルのパスは、絶対パスか、実行中の build の設定ファイルが存在するディレクトリからの相対パスになります。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow の script や template に渡される parameter]]></title>
        <id>/buildflow-parameter</id>
        <link href="https://techblog.szksh.cloud/buildflow-parameter"/>
        <updated>2020-10-17T10:44:39.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうと思います。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書こうと思います。</p><p>この記事では buildflow の Tengo script やテンプレートにパラメータとして渡される変数について紹介します。</p><p>buildflow では Tengo script はテンプレートが使える設定項目が多くあります。それらの設定には共通のフォーマットのパラメータが渡されます。</p><ul><li>PR: Pull Request の情報: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls#get-a-pull-request" target="_blank" rel="noopener noreferrer">GitHub API</a> のレスポンス body</li><li>Files: Pull Request で更新されたファイルの一覧: <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/pulls#list-pull-requests-files" target="_blank" rel="noopener noreferrer">GitHub API</a> のレスポンス body</li><li>Phases: 対象の Phase よりも前の Phase の結果</li><li>Phase: 対象の Phase</li><li>Tasks: 対象の Phase の Task の結果</li><li>Task: 対象の Task</li><li>Item: dynamic task のパラメータとして渡される</li><li>Meta: 設定 meta</li></ul><p>Phase</p><ul><li>Status: Phase の実行結果<ul><li>succeeded</li><li>failed</li><li>skipped</li></ul></li><li>Tasks: Phase の task の実行結果</li><li>Meta: phase の 設定 meta</li></ul><p>Task</p><p>type によらず共通</p><ul><li>Type: task の type</li><li>Name: task 名</li><li>Status: Task の実行結果<ul><li>queue</li><li>running</li><li>succeeded</li><li>failed</li><li>skipped</li></ul></li><li>Meta: task の meta の設定</li><li>Input:</li><li>Output:</li></ul><p>command</p><ul><li>ExitCode</li><li>StdOut</li><li>StdErr</li><li>CombinedOutput</li></ul><p>read_file</p><ul><li>File<ul><li>Text: ファイルの内容</li><li>Data: read_file の format を指定した場合、パースされた結果</li></ul></li></ul><p>write_file</p><ul><li>File<ul><li>Text: ファイルの内容</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="template-でパラメータを参照する">Template でパラメータを参照する<a class="hash-link" href="#template-でパラメータを参照する" title="Direct link to heading">​</a></h2><p>例えば command の場合</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'echo "{{.Task.Name}}"'</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="tengo-script-でパラメータを参照する">Tengo script でパラメータを参照する<a class="hash-link" href="#tengo-script-でパラメータを参照する" title="Direct link to heading">​</a></h2><p>例えば task foo が成功した場合のみ、 task bar を実行したい場合</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">dependency</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      task := {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      for t in Tasks {</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        if t.Name == "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">          task = t</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">          break</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      result := task.Status == "succeeded"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このように他の task の実行結果や PR の情報などを使ってビルドの挙動を変えることが出来ます。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow の task の設定項目]]></title>
        <id>/buildflow-task</id>
        <link href="https://techblog.szksh.cloud/buildflow-task"/>
        <updated>2020-10-17T09:26:57.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうと思います。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書こうと思います。</p><p>この記事では buildflow の task の基本的な設定項目などについて説明します。
数が多いので、個々の設定の詳細はまた別の記事に書きます。</p><p>task には幾つか type がありますが、全ての type に共通するパラメータが以下になります。</p><ul><li>name: task 名。 unique である必要はない。 Go の text/template が使える</li><li>when: task を実行するか否か。 真偽値か Tengo script<ul><li>when_file で外部ファイルを読み込める</li></ul></li><li>dependency: task の依存関係の定義。 task 名のリストか、 Tengo script</li><li>items: dynamic task の設定。 loop を使って複数の task を動的に生成できる<ul><li>任意の list か map か、 Tengo script</li></ul></li><li>input: Tengo script で task のコマンドのパラメータを生成できる<ul><li>input_file で外部ファイルを読み込める</li></ul></li><li>output: Tengo script で task の実行結果を整形できる。他の task が参照して挙動を変えたりできる<ul><li>output_file で外部ファイルを読み込める</li></ul></li><li>meta: ユーザーが自由にパラメータを定義できる map</li></ul><p>上記の設定は name 以外はオプションです。</p><p>task の type としては以下のものがあります。</p><ul><li>command: 外部コマンドを実行</li><li>read_file: ファイルを読み込む。ファイルの内容を他の task で参照できる</li><li>write_file: ファイルを書き込む</li></ul><p>command の設定</p><ul><li>shell, shell_opts: コマンドの実行シェル。デフォルトは <code>/bin/sh -c</code></li><li>command: コマンド。 Go の text/template で処理される<ul><li>command_file で外部ファイルを読み込める</li></ul></li><li>stdin: コマンドの標準入力。 Go の text/template で処理される<ul><li>stdin_file で外部ファイルを読み込める</li></ul></li><li>env: 環境変数。環境変数名と値は Go の text/template で処理される</li></ul><p>read_file の設定</p><ul><li>path: ファイルのパス。Go の text/template で処理される</li><li>format: ファイルのフォーマット。オプション。 json と yaml をサポート。指定するとパースした結果を他の task が参照できる</li></ul><p>write_file の設定</p><ul><li>path: ファイルのパス。Go の text/template で処理される</li><li>template: ファイルの内容。Go の text/template で処理される<ul><li>template_file で外部ファイルを読み込める</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow の build, phase, task について]]></title>
        <id>/buildflow-build-phase-task</id>
        <link href="https://techblog.szksh.cloud/buildflow-build-phase-task"/>
        <updated>2020-10-17T09:09:19.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうと思います。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書こうと思います。</p><p>この記事では buildflow の概念である build, phase, task について書きたいと思います。</p><p>buildflow には Build, Phase, Task という概念があります。
CircleCI の Pipeline, Workflow, Job みたいなものと思ってもらえるとよいと思います。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ buildflow run</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>で 1 つの build が実行されます。
build は複数の phase からなり、 phase が 1 つずつ順に実行されます。
phase は複数の task からなり、 task が全て終了すると、その phase も終了となります。
task は並列に実行したり、依存関係を定義したりできます。
task では外部コマンドを実行したりできます。</p><p>設定ファイルでは phases, tasks をそれぞれ配列で指定します。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> setup</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">dependency</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> post build</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo hello</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>上の例では 3 つの phase setup, build, post build が順に実行されます。
デフォルトではどれかの phase が失敗するとそれ以降の phase は実行されません(この挙動は変えられます)。</p><p>task も phase 同様配列で指定しますが、配列の順序に意味はありません。
依存関係がない限り、並列で実行されますし、実行順序は不定です。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow での Tengo の使い方]]></title>
        <id>/buildflow-tengo</id>
        <link href="https://techblog.szksh.cloud/buildflow-tengo"/>
        <updated>2020-10-17T08:18:34.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので buildflow というタグをつけて何回かに分けてブログを書こうかなと思います。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので <code>buildflow</code> というタグをつけて何回かに分けてブログを書こうかなと思います。</p><p>この記事では buildflow で Tengo というスクリプト言語をどのように使っているか書きたいと思います。</p><p><a href="https://github.com/d5/tengo" target="_blank" rel="noopener noreferrer">https://github.com/d5/tengo</a></p><p>buildflow の設定では task.when や task.dependency, task.input などで Tengo script が使えますが、
1 つの共通のルールがあります。
<code>result</code> という変数を宣言し、 script の実行結果をその変数に持たせるというルールです。
これは Tengo の仕様とかではなく、 buildflow 特有のルールです。
もっとも単純な例だと次のような感じです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">result := true</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>task.input, output などだと result の値が Task.Input, Task.Output として参照できるようになります。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">input</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      result := {</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        foo: "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'echo "{{.Task.Input.foo}}"'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"result := true"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="tengo-の標準ライブラリ">Tengo の標準ライブラリ<a class="hash-link" href="#tengo-の標準ライブラリ" title="Direct link to heading">​</a></h2><p>Tengo には<a href="https://github.com/d5/tengo/blob/master/docs/stdlib.md" target="_blank" rel="noopener noreferrer">標準ライブラリ</a>があります。
buildflow では全ての標準ライブラリが使えます。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[buildflow というワークフローエンジンのようなタスクランナーのようなツールを作っている]]></title>
        <id>/buildflow-1</id>
        <link href="https://techblog.szksh.cloud/buildflow-1"/>
        <updated>2020-10-17T07:06:31.000Z</updated>
        <summary type="html"><![CDATA[buildflow というツールを開発しているので紹介します。]]></summary>
        <content type="html"><![CDATA[<p>buildflow というツールを開発しているので紹介します。
<code>buildflow</code> というタグをつけて何回かに分けてブログを書こうかなと思います。
1本目のこの記事では</p><ul><li>どんなツールか</li><li>Hello World</li><li>特徴</li></ul><p>について簡単に説明します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="どんなツールか">どんなツールか<a class="hash-link" href="#どんなツールか" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/buildflow" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/buildflow</a></p><p>ワークフローを実行するための CLI ツールです。
ワークフローエンジンと言うと Airflow とか Azkaban, Argo Workflows のようなツールをイメージするかと思いますが、
それらとは目的も機能も違います。
一部の CI サービスではワークフローのローカル実行をサポートしてたりしますが、そんなイメージで良いかもしれません。
buildflow では task と task の依存関係を設定ファイルに定義し、コマンドを実行するとローカルでタスクが実行されます。
そういうとタスクランナーといったほうがいいのかもしれませんが、個別のタスクを指定して実行するような機能はないので、タスクランナーとも違う気がします。</p><p>CI サービス上で実行することを目的として開発しています(汎用的なツールなので他の目的でも使えるとは思います)。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="hello-world">Hello World<a class="hash-link" href="#hello-world" title="Direct link to heading">​</a></h2><p>まだどんなツールかピンと来てない人もいるかもしれないので、簡単な Hello World をやってみましょう。</p><p><a href="https://github.com/suzuki-shunsuke/buildflow/releases" target="_blank" rel="noopener noreferrer">GitHub Releases</a> からバイナリをダウンロードしてください。</p><p>次のような設定ファイル <code>.buildflow.yaml</code> を用意します。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">phases</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> echo hello</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>次のコマンドを実行すると task が実行されます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ buildflow run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= Phase: main =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">==============</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">07:50:46UTC | hello | + /bin/sh -c echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">07:50:46UTC | hello |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">07:50:46UTC | hello | hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">07:50:46UTC | hello |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">= Phase Result: main =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">================</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">status: succeeded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">task: hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">status: succeeded</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exit code: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">start time: 2020-10-17T07:50:46Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">end time: 2020-10-17T07:50:46Z</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">duration: 4.317259ms</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+ /bin/sh -c echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">hello</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="特徴">特徴<a class="hash-link" href="#特徴" title="Direct link to heading">​</a></h2><p>task を依存関係に基づいて並列実行できます。加えて以下のような特徴があります。</p><ul><li>ワンバイナリで動く。他に依存するものがない<ul><li>Go で書かれています</li></ul></li><li>他のタスクの実行結果によってタスクの挙動を変えられる<ul><li>標準(エラー)出力、 exit code, etc</li><li>dynamic に task を生成することも可能</li></ul></li><li>Tengo というスクリプト言語を用いて柔軟な設定を書ける<ul><li>設定ファイルは YAML ですが、一部の設定に Tengo というスクリプト言語が使えます</li><li>Tengo の処理系も buildflow に内包されているので、 Tengo の処理系をインストールする必要はありません</li></ul></li><li>CI で実行時に Pull Request (以下 PR) の情報に基づいて処理を変えられる<ul><li>GitHub 前提(GitLab や BitBucket はサポート外)</li><li>自動で PR の情報を取得</li></ul></li></ul><p>Tengo は Go で実行されたスクリプト言語です。 <a href="https://github.com/d5/tengo" target="_blank" rel="noopener noreferrer">https://github.com/d5/tengo</a> を参照してください。
なぜ Tengo を採用したかとかは別に書きたいと思います。</p><p>Tengo は Python や Ruby, Go といった言語に比べれば言語仕様がコンパクトであり、
よく知らなくてもなんとなく読めるし、簡単にかけると思っています。
加えて、そもそも buildflow の中での Tengo の役割は限定されており、 Tengo をゴリゴリ書く必要はないと思います。</p><p>PR の情報に基づき、例えば以下のようなことが出来ます。</p><ul><li>特定のラベルがついたら task を実行する</li><li>特定のファイルが PR で更新されたら task を実行する</li><li>特定のユーザー(botとか)からの PR では task を実行しない</li></ul><p>これらのロジックは自分がよく欲しくなるので、 buildflow を使えば簡単に実装できるようにしました。</p><p>他にも様々な機能がありますので、また別の記事で紹介できたらと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="buildflow" term="buildflow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[tfnotify の parse error を通知する]]></title>
        <id>/post-tfnotify-parse-error</id>
        <link href="https://techblog.szksh.cloud/post-tfnotify-parse-error"/>
        <updated>2020-09-11T23:05:59.000Z</updated>
        <summary type="html"><![CDATA[tfnotify が terraform の標準出力のパースに失敗してコメントを投稿できないことがあります。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/mercari/tfnotify" target="_blank" rel="noopener noreferrer">tfnotify</a> が terraform の標準出力のパースに失敗してコメントを投稿できないことがあります。</p><p>コメントを投稿できなくてもビルドのログには残るのですが、やはりコメントを投稿できると便利なので、tfnotify がパースエラーでコメントの投稿に失敗したら、 <a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">github-comment</a> でコメントを投稿するようにしました。</p><p>なお、この記事を書いている時点のバージョンは tfnotify v0.7.0, github-comment v1.9.0 です。</p><p>例えば <code>tfnotify plan</code> がパースエラーになった場合、 <code>cannot parse plan result</code> というメッセージが標準エラー出力されます。
そこで標準エラー出力に <code>cannot parse plan result</code> が含まれていたら github-comment でコメントするようにします。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">terraform plan | github-comment exec -k plan -- tfnotify plan</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>.github-comment.yml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 細かく template を分けているが、別に分けなくてもよい</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">templates</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># header は CodeBuild の場合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'{{Env "TARGET"}} [Build link]({{Env "CODEBUILD_BUILD_URL"}})'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">exit_code</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">':{{if eq .ExitCode 0}}white_check_mark{{else}}x{{end}}: Exit Code {{.ExitCode}}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">join_command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    ```</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    $ {{.JoinCommand}}</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    ```</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">hidden_combined_output</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    &lt;details&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;pre</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain">&lt;code</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">.CombinedOutput</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain">&lt;/code</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain">&lt;/pre</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    &lt;/details</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">exec_default</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    {{template "header" .}}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">template "exit_code" .</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">template "join_command" .</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">template "hidden_combined_output" .</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">exec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">plan</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      Stderr contains "cannot parse plan result"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">template</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      {{template "exec_default" .}}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>tfnotify apply</code> の場合は <code>cannot parse apply result</code> というメッセージを出力するので
次のようになります。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">terraform apply -auto-approve | github-comment exec -k apply -- tfnotify apply</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">exec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">apply</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      Stderr contains "cannot parse apply result"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">template</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      {{template "exec_default" .}}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="tfnotify-のコードを確認">tfnotify のコードを確認<a class="hash-link" href="#tfnotify-のコードを確認" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/mercari/tfnotify/blob/v0.7.0/terraform/parser.go#L158" target="_blank" rel="noopener noreferrer">https://github.com/mercari/tfnotify/blob/v0.7.0/terraform/parser.go#L158</a></li><li><a href="https://github.com/mercari/tfnotify/blob/v0.7.0/terraform/parser.go#L111" target="_blank" rel="noopener noreferrer">https://github.com/mercari/tfnotify/blob/v0.7.0/terraform/parser.go#L111</a></li><li><a href="https://github.com/mercari/tfnotify/blob/v0.7.0/notifier/github/notify.go#L20-L21" target="_blank" rel="noopener noreferrer">https://github.com/mercari/tfnotify/blob/v0.7.0/notifier/github/notify.go#L20-L21</a></li><li><a href="https://github.com/mercari/tfnotify/blob/v0.7.0/main.go#L193" target="_blank" rel="noopener noreferrer">https://github.com/mercari/tfnotify/blob/v0.7.0/main.go#L193</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
        <category label="tfnotify" term="tfnotify"/>
        <category label="github-comment" term="github-comment"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS CodeBuild 良さそう]]></title>
        <id>/codebuild-1</id>
        <link href="https://techblog.szksh.cloud/codebuild-1"/>
        <updated>2020-08-02T04:21:37.000Z</updated>
        <summary type="html"><![CDATA[AWS CodeBuild を検証しているんですが、結構良いですね。]]></summary>
        <content type="html"><![CDATA[<p>AWS CodeBuild を検証しているんですが、結構良いですね。
現状 Jenkins や CircleCI で実行しているジョブや CI/CD を一部移行したいなと思いました。</p><p>一部と言っているのは、単純に全部いきなり移行するのは難しいから共存する前提で考えるくらいの意味です。</p><p>なお、これを書いている時点ではまだ軽く検証しているだけなので、CodeBuild の理解は浅いです。</p><p>特徴としては</p><ul><li>Managed</li><li>AWS 以外のサービスに AWS の credential を登録しなくて良い<ul><li>Secret を AWS Secrets Manager で管理できる</li><li>Secret を至るところに設定するのではなく、 AWS Secrets Manager か何かで一元管理するのが理想</li><li>Role 作って Build Project の Service Role として指定するだけなら credential を扱う必要がなくて楽で安心</li></ul></li><li>VPC 内で実行できる</li><li>GitHub 連携も簡単<ul><li>Webhook の設定で PR の細かなイベント(merge とか reopen とか)に対応しているのも良い</li><li>PR を merge したときも PR で変更されたファイルによって Webhook をフィルタできるのが良い</li></ul></li><li>変更されたファイルによって実行するBuild Project を変更するようなロジックを実現できる(monorepo で特に有効)</li></ul><p>といった点が挙げられます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="変更検知について">変更検知について<a class="hash-link" href="#変更検知について" title="Direct link to heading">​</a></h2><p>上記の特徴についてはだいたい「まぁそうだね」というふうに思ってもらえるのではないかと思いますが、変更検知の部分について補足します。
monorepo をやっているとサービス A 関連のジョブはサービス A 関連のコードが変更された場合のみ実行したいというのがあります。
なのですが、 CircleCI だと自分の知る限りそれはできません。</p><p><a href="https://circleci.com/docs/2.0/configuration-reference/" target="_blank" rel="noopener noreferrer">https://circleci.com/docs/2.0/configuration-reference/</a></p><p>なので現状 Job を実行してからサービス A 関連のコードが変更されているかチェックし、変更されていなかったら skip ないし
<code>circleci step halt</code> で Job を終了しています。
ただ、差分検知の部分を自分で実装しないといけないし、 <code>circleci step halt</code> で終了するにしても Job の起動自体にそこそこ時間がかかったりするし(これだけでも金銭的コストがかかっているはず)、 Job の実行時間や error rate のモニタリングでもノイズとして混じってきてしまいます。</p><p>CodeBuild の場合、1つのリポジトリに複数の Build Project を設定でき、 Build Project ごとに buildspec を指定できます。
Build Project の Webhook の <code>FILE_PATH</code> の設定で特定のファイルが変更された場合のみビルドを実行することもできます。
なのでサービス A 用の build spec 及び Build Project を作成し、サービス A のコードが変更されたときのみその Build Project が実行されるように Webhook を設定すれば良さそうです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="気になる点">気になる点<a class="hash-link" href="#気になる点" title="Direct link to heading">​</a></h2><ul><li><code>FILE_PATH</code> で 1 個の正規表現しか設定できないので、場合によっては複雑な正規表現を書かないといけない</li><li>Terraform で管理するのが結構面倒くさい<ul><li>いい感じにモジュール化とかテンプレート化しないとだめかも</li></ul></li><li>Pull Request のラベルがついていたらこのジョブを実行する、みたいな複雑なことは一工夫必要かも<ul><li>Webhook の設定だと無理なので、 build は実行しつつラベルが設定されていなかったら skip とかしないといけない</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="おまけ-codebuild-関連のニュース">おまけ: CodeBuild 関連のニュース<a class="hash-link" href="#おまけ-codebuild-関連のニュース" title="Direct link to heading">​</a></h2><p>以前検証したときより良くなってる気がするなと思って更新をチェックしたらやっぱ色々更新があるみたいですね。</p><p><a href="https://aws.amazon.com/jp/new/?whats-new-content-all.sort-by=item.additionalFields.postDateTime&amp;whats-new-content-all.sort-order=desc&amp;awsf.whats-new-developer-tools=general-products%23aws-codebuild" target="_blank" rel="noopener noreferrer">https://aws.amazon.com/jp/new/?whats-new-content-all.sort-by=item.additionalFields.postDateTime&amp;whats-new-content-all.sort-order=desc&amp;awsf.whats-new-developer-tools=general-products%23aws-codebuild</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="aws" term="aws"/>
        <category label="codebuild" term="codebuild"/>
        <category label="ci" term="ci"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[github-comment - GitHub にコメントを投稿する CLI]]></title>
        <id>/github-comment</id>
        <link href="https://techblog.szksh.cloud/github-comment"/>
        <updated>2020-07-31T11:42:54.000Z</updated>
        <summary type="html"><![CDATA[GitHub の issue や pull request, commit にコメントを投稿する CLI ツールを作りました(結構前の話ですが)。]]></summary>
        <content type="html"><![CDATA[<p>GitHub の issue や pull request, commit にコメントを投稿する CLI ツールを作りました(結構前の話ですが)。</p><p><a href="https://github.com/suzuki-shunsuke/github-comment" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/github-comment</a></p><p>このブログの執筆時点で最新は v1.5.0 です。</p><p>Go 製なので、 GitHub Releases からダウンロードしてくれば簡単にインストールできます。</p><p>想定している主な用途は、 CI/CD の 結果をコメントで通知することで DX を向上することです。
例えば CI がこけたらこけたコマンドとエラーメッセージを通知するなどです。</p><p>github-comment には</p><ul><li>init: 設定ファイルの雛形を生成する</li><li>post: コメントを投稿する</li><li>exec: 外部コマンドを実行し、その結果を元にコメントを投稿する</li></ul><p>という 3 つのサブコマンドがあります。</p><p>コメントの投稿には GitHub の Access Token が必要です。
コマンドライン引数 <code>-token</code> でも渡せますが、環境変数として設定しましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ export GITHUB_TOKEN=xxx # GITHUB_ACCESS_TOKEN も可</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="post-コマンド">post コマンド<a class="hash-link" href="#post-コマンド" title="Direct link to heading">​</a></h2><p>こんな感じでコメントを投稿できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment post -org suzuki-shunsuke -repo github-comment -pr 1 -template test</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>パラメータの数が多いですが、いくつかの Platform では環境変数から自動でパラメータを補完してくれます。</p><ul><li>Drone</li><li>CircleCI</li><li>GitHub Actions</li></ul><p>そうするとこれでよくなります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment post -template test</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>コメントは Go の <a href="https://golang.org/pkg/text/template/" target="_blank" rel="noopener noreferrer">text/template</a> で処理されます。
<code>{{.Org}}</code> <code>{{.Repo}}</code> といった感じでパラメータを参照できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment post -template "{{.Org}}/{{.Repo}} test"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><ul><li>PRNumber</li><li>Org</li><li>Repo</li><li>SHA1</li><li>TemplateKey</li><li>Vars</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="exec-コマンド">exec コマンド<a class="hash-link" href="#exec-コマンド" title="Direct link to heading">​</a></h2><p>コマンドの実行結果(標準出力、標準エラー出力、 exit code) を元にコメントを投稿したい場合に、 exec コマンドが使えます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment exec -template "{{.ExitCode}} {{.Stdout}}" -- echo hello</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>コマンドを実行した上でコメントを投稿します。テンプレートの変数として、 post でも渡されるパラメータの他にコマンドの実行結果が渡されます。</p><ul><li>ExitCode</li><li>Stdout</li><li>Stderr</li><li>CombinedOutput</li><li>Command: <a href="https://golang.org/pkg/os/exec/#Cmd.String" target="_blank" rel="noopener noreferrer">exec.Command.String</a></li><li>JoinCommand: コマンド引数(配列)をスペース <code>" "</code> でつないだ文字列</li></ul><p>github-comment exec の標準入力は実行するコマンドに渡されますし、 github-comment exec の exit code は実行したコマンドの exit code になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定ファイル">設定ファイル<a class="hash-link" href="#設定ファイル" title="Direct link to heading">​</a></h2><p>上記の例では投稿するコメントを <code>-template</code> で渡していましたが、ごく短いコメント以外は設定ファイルに記述したほうが良いでしょう。
設定ファイルは <code>github-comment init</code> で雛形を生成できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment init</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こんな感じで複数のテンプレートを記述できます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">post</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">default</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    foo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">hello</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    hello</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>そして <code>post</code> 実行時に <code>-template-key (-k)</code> で使用するテンプレートを指定します。
<code>-template</code> と <code>-k</code> 両方指定しない場合、デフォルトで <code>default</code> テンプレートが使用されます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment -k hello</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="exec-の設定">exec の設定<a class="hash-link" href="#exec-の設定" title="Direct link to heading">​</a></h3><p><code>exec</code> の設定はもう少し複雑です。
それはコマンドの実行結果によって使用するテンプレートを変えたり、あるいはコメントを投稿しなかったりできるようにするためです。
一つのテンプレートキーに対し、複数のテンプレートを配列で設定します。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">exec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">default</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ExitCode == 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">template</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        success</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ExitCode </span><span class="token tag" style="color:#00009f">!=</span><span class="token plain"> 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">template</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        failed</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>そしてテンプレート文字列とは別に <code>when</code> という、そのテンプレートを使う条件を設定します。
この条件は <a href="https://github.com/antonmedv/expr" target="_blank" rel="noopener noreferrer">antonmedv/expr</a> によって処理されます。
テンプレートの text/template とはまた別の構文なのがややこしいですね。
条件の評価結果は当然真偽値ではないといけません。
評価結果が true ならばそれを使ってコメントし、あとは無視されます。
false なら次のテンプレートを評価します。
全部マッチしなければコメントは投稿されませんし、エラーにもなりません。
<code>dont_comment: true</code> とすると、その条件にマッチした場合はコメントを投稿せずに終了します(後続のテンプレートも無視されます)。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">exec</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">hello</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ExitCode </span><span class="token tag" style="color:#00009f">!=</span><span class="token plain"> 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">dont_comment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">template</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">        Hello, world</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="テンプレートの再利用">テンプレートの再利用<a class="hash-link" href="#テンプレートの再利用" title="Direct link to heading">​</a></h3><p><code>templates</code> を使うと複数のテンプレートでヘッダーなどを共通化して再利用できます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">templates</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">header</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"# {{.Org}}/{{.Repo}}"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">post</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">default</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">    {{template "header" .}}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Go の <a href="https://golang.org/pkg/text/template/" target="_blank" rel="noopener noreferrer">text/template</a> に馴染みがないとわかりにくいかと思いますが、</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">templates</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">テンプレート名</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> テンプレート</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>でテンプレートを定義して</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">{{template "テンプレート名" .}}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>でテンプレートを参照できます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="テンプレートの変数をコマンドライン引数で渡す">テンプレートの変数をコマンドライン引数で渡す<a class="hash-link" href="#テンプレートの変数をコマンドライン引数で渡す" title="Direct link to heading">​</a></h2><p><code>-var 変数名:値</code> でパラメータを渡せます。
<code>{{.Var.変数名}}</code> で参照できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ github-comment post -var name:foo -template "Hello, {{.Var.name}}"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定ファイルで変数を定義する">設定ファイルで変数を定義する<a class="hash-link" href="#設定ファイルで変数を定義する" title="Direct link to heading">​</a></h2><p>設定ファイルで変数を定義できます。任意の型の変数を定義できます。
<code>{{.Var}}.変数名</code> で参照できます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">vars</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">foo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">zoo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">foo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>{{.Var.zoo.foo}}</code></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="post-コマンドの標準入力でテンプレートを渡す">post コマンドの標準入力でテンプレートを渡す<a class="hash-link" href="#post-コマンドの標準入力でテンプレートを渡す" title="Direct link to heading">​</a></h2><p><code>github-comment post</code> の標準入力でテンプレートを渡せます。 exec の場合はそうはならない(実行するコマンドに渡される)ので注意してください。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ echo foo | github-comment post</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="パラメータの補完">パラメータの補完<a class="hash-link" href="#パラメータの補完" title="Direct link to heading">​</a></h2><p>先に述べたとおり、いくつかの Platform では環境変数から自動でパラメータを補完してくれます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="circleci">CircleCI<a class="hash-link" href="#circleci" title="Direct link to heading">​</a></h3><p>プラットフォームの判別: <code>CIRCLECI</code> の有無</p><table><thead><tr><th>パラメータ</th><th>ソース</th></tr></thead><tbody><tr><td>.Org</td><td>CIRCLE_PROJECT_USERNAME</td></tr><tr><td>.Repo</td><td>CIRCLE_PROJECT_REPONAME</td></tr><tr><td>.PRNumber</td><td>CIRCLE_PULL_REQUEST</td></tr><tr><td>.SHA1</td><td>CIRCLE_SHA1</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_mojV" id="drone">Drone<a class="hash-link" href="#drone" title="Direct link to heading">​</a></h3><p>プラットフォームの判別: <code>DRONE</code> の有無</p><table><thead><tr><th>パラメータ</th><th>ソース</th></tr></thead><tbody><tr><td>.Org</td><td>DRONE_REPO_OWNER</td></tr><tr><td>.Repo</td><td>DRONE_REPO_NAME</td></tr><tr><td>.PRNumber</td><td>DRONE_PULL_REQUEST</td></tr><tr><td>.SHA1</td><td>DRONE_COMMIT_SHA1</td></tr></tbody></table><h3 class="anchor anchorWithStickyNavbar_mojV" id="github-actions">GitHub Actions<a class="hash-link" href="#github-actions" title="Direct link to heading">​</a></h3><p>プラットフォームの判別: <code>GITHUB_ACTIONS</code> の有無</p><table><thead><tr><th>パラメータ</th><th>ソース</th></tr></thead><tbody><tr><td>.Org</td><td>GITHUB_REPOSITORY</td></tr><tr><td>.Repo</td><td>GITHUB_REPOSITORY</td></tr><tr><td>.PRNumber</td><td>GITHUB_EVENT_PATH</td></tr><tr><td>.SHA1</td><td>GITHUB_SHA1</td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_mojV" id="exec-のパラメータの-command-と-joincommand">exec のパラメータの Command と JoinCommand<a class="hash-link" href="#exec-のパラメータの-command-と-joincommand" title="Direct link to heading">​</a></h2><p>実行したコマンドを示すパラメータとして Command と JoinCommand があります。
これらは似てますが、微妙に違います。</p><p>Command は <a href="https://golang.org/pkg/os/exec/#Cmd.String" target="_blank" rel="noopener noreferrer">exec.Cmd の .String()</a> から取得されるのですが、コマンドが絶対パスになったりするので、あまり望ましくないこともあるでしょう。</p><p>例えば <code>echo hello</code> の場合 <code>/usr/local/opt/coreutils/libexec/gnubin/echo foo</code> となったりします。</p><p>一方 JoinCommand はコマンド文字列を単にスペースでつないだものになります。</p><p>exec.Cmd の .String() のドキュメントに書いてあるとおり、 .Command と .JoinCommand はそのまま shell で実行するのには適さない形式なので注意してください。</p><blockquote><p>String returns a human-readable description of c.
It is intended only for debugging.
In particular, it is not suitable for use as input to a shell.
The output of String may vary across Go releases.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定ファイルのパス">設定ファイルのパス<a class="hash-link" href="#設定ファイルのパス" title="Direct link to heading">​</a></h2><p>設定ファイルのパスは <code>--config -c</code> オプションで指定できます。
何も指定しない場合、カレントディレクトリからルートディレクトリに向かって <code>.github-comment.yml</code>, <code>.github-comment.yaml</code> を探索し、最初に見つかったものを使います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定ファイルで-org-repo-を指定する">設定ファイルで .Org, .Repo を指定する<a class="hash-link" href="#設定ファイルで-org-repo-を指定する" title="Direct link to heading">​</a></h2><p>設定ファイルでコメント先のリポジトリを指定できます。
Platform で補完される場合や、明示的にパラメータで指定する場合は不要です。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">base</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">org</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzuki</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shunsuke</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">repo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> github</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">comment</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[clap - 簡単にツールをインストールするためのツールを作った]]></title>
        <id>/clap</id>
        <link href="https://techblog.szksh.cloud/clap"/>
        <updated>2020-07-06T07:52:58.000Z</updated>
        <summary type="html"><![CDATA[多分車輪の再発明だとは思いますが、簡単にツールをインストールするための CLI ツールを作りました。]]></summary>
        <content type="html"><![CDATA[<p>多分車輪の再発明だとは思いますが、簡単にツールをインストールするための CLI ツールを作りました。
tarball や zip をダウンロードして展開して指定したパスにインストールするツールです。</p><p><a href="https://github.com/suzuki-shunsuke/clap" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/clap</a></p><p>Go で書かれています。
ツールの名前(clap)には特別な意味や理由はなく、なんとなくです。</p><p>CI で何かしらのツールをインストールすることがままあって、そのためのシェルスクリプトを都度書くのが割と面倒なのでツール化しました。</p><p>このブログを書いている時点でバージョンは v0.1.0-1 で、最低限の機能しかありませんが、9割型ニーズを満たせるかなと思います。</p><p>使い方は以下のようになっています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ clap &lt;URL&gt; &lt;インストールするファイルのアーカイブ内での相対パス&gt;:&lt;インストール先&gt; [&lt;インストールするファイルのアーカイブ内での相対パス&gt;:&lt;インストール先&gt;...]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>例えば <a href="https://github.com/open-policy-agent/conftest" target="_blank" rel="noopener noreferrer">conftest</a> を /usr/local/bin にインストールする場合次のようになります。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">CONFTEST_VERSION=0.18.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">clap install https://github.com/instrumenta/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz conftest:/usr/local/bin/conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod a+x /usr/local/bin/conftest</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>パーミッションの付与はやってくれないので必要に応じてやってください。
ファイルの圧縮形式は URL から自動で判別してくれます。</p><p>上記の conftest のインストールを今までは次のようなシェルスクリプトを書いていました。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">#!/usr/bin/env bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">set -eu</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CONFTEST_VERSION=0.18.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">dirpath=$(mktemp -d)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">pushd "$dirpath"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">TARFILE=conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curl -OL https://github.com/instrumenta/conftest/releases/download/v${CONFTEST_VERSION}/${TARFILE}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tar xvzf $TARFILE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mv conftest /usr/local/bin/conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod a+x /usr/local/bin/conftest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">popd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rm -R "$dirpath"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>地味に面倒ですね。これをツール毎に書いて、しかも圧縮形式によって微妙に変えないといけません。</p><p>clap 自体のインストールはどうするかというと、 <a href="https://github.com/suzuki-shunsuke/clap/releases" target="_blank" rel="noopener noreferrer">GitHub Releases で tarball の他にバイナリ単体でも配布</a>しているので簡単にインストールできます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">CLAP_VERSION=0.1.0-1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">curl -L -o /usr/local/bin/clap https://github.com/suzuki-shunsuke/clap/releases/download/v${CLAP_VERSION}/clap_${CLAP_VERSION}_linux_amd64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chmod a+x /usr/local/bin/clap</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>以上、簡単な紹介でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CircleCI の run の実行時間を DataDog に送る]]></title>
        <id>/send-circleci-run-execution-time-to-datadog</id>
        <link href="https://techblog.szksh.cloud/send-circleci-run-execution-time-to-datadog"/>
        <updated>2020-05-23T05:20:53.000Z</updated>
        <summary type="html"><![CDATA[小ネタです。]]></summary>
        <content type="html"><![CDATA[<p>小ネタです。</p><p><a href="https://techblog.szksh.cloud/dd-time/" target="_blank" rel="noopener noreferrer">dd-time</a> を使って CircleCI の <code>run</code> を使ったコマンドの実行時間をどう計測したらいいのかちょっと考えました。</p><p>以前、コマンドの実行時間を DataDog に送るツール dd-time を作りました。</p><ul><li><a href="https://techblog.szksh.cloud/dd-time/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/dd-time/</a></li><li><a href="https://github.com/suzuki-shunsuke/dd-time" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/dd-time</a></li></ul><p>これは基本的に以下のように引数として <code>--</code> 以降に実行するコマンドを指定します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ dd-time -m dd_time.execution_time -t command:docker-build -- docker build .</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>実行するスクリプトを標準入力で渡したい場合はこうします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl https://example.com/install.sh | dd-time -m dd_time.execution_time -- sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>もちろんシェルスクリプトである必要はなくて例えば Python だったらこうなります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl https://example.com/setup.py | dd-time -m dd_time.execution_time -- python</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>CircleCI の <code>run</code> では <code>shell</code> オプションで shell を指定できます。</p><p><a href="https://circleci.com/docs/2.0/configuration-reference/#run" target="_blank" rel="noopener noreferrer">https://circleci.com/docs/2.0/configuration-reference/#run</a></p><p>なので command 全体の時間を計測したい場合は、 shell を次のようにします。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test dd</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">time</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">shell</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /usr/local/bin/dd</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">time </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">m dd_time.test </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sh </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">eo pipefail</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      echo start</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      sleep 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">      echo end</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすると <code>shell</code> 以外を弄ることなく実行時間を計測して DataDog に送ることが出来ます。</p><p>この <code>shell</code> のカスタマイズは dd-time に限らず使えるかも知れないですね。</p><ul><li>ログをどっかに送ったりとか</li><li>コマンドが失敗したらエラーを握りつぶしつつどっかに通知したりとか</li><li>etc</li></ul><p>以上、小ネタでした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="circleci" term="circleci"/>
        <category label="dd-time" term="dd-time"/>
        <category label="datadog" term="datadog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CircleCI の checkout の注意点]]></title>
        <id>/circleci-checkout-default-branch</id>
        <link href="https://techblog.szksh.cloud/circleci-checkout-default-branch"/>
        <updated>2020-04-24T07:53:01.000Z</updated>
        <summary type="html"><![CDATA[CircleCI の組み込みの command checkout の注意点について書きます。]]></summary>
        <content type="html"><![CDATA[<p>CircleCI の組み込みの command <code>checkout</code> の注意点について書きます。</p><p>なお、ここに書かれている内容は 2020/04/24 時点のものであり、予告なしに <code>checkout</code> の挙動が変わる可能性があります。</p><p>また、今回は話を簡略化するため、 <code>checkout</code> 実行時点で <code>.git</code> がない(つまりキャッシュしていない)ものとします。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最初に結論">最初に結論<a class="hash-link" href="#最初に結論" title="Direct link to heading">​</a></h2><p>先に結論を書くと</p><ul><li>CircleCI ではローカルのデフォルトブランチを参照しないほうが良い($CIRCLE_BRANCH がデフォルトブランチである場合は除く)<ul><li>履歴が origin と異なり、 $CIRCLE_BRANCH と同様になっているため</li></ul></li><li>代わりに origin のデフォルトブランチを参照したほうが良い</li><li><code>git branch -f &lt;デフォルトブランチ&gt; origin/&lt;デフォルトブランチ&gt;</code> を実行してデフォルトブランチの履歴を修正するのもあり</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="checkout-がなにをやっているか">checkout がなにをやっているか<a class="hash-link" href="#checkout-がなにをやっているか" title="Direct link to heading">​</a></h2><p><code>checkout</code> でなにをやっているかは実際に使ってみて CircleCI の job の詳細画面(?) から確認できます。</p><p>サンプル: <a href="https://app.circleci.com/pipelines/github/suzuki-shunsuke/test-circleci/73/workflows/5611059c-d6b1-4a34-91b5-45d6f149d408/jobs/96" target="_blank" rel="noopener noreferrer">https://app.circleci.com/pipelines/github/suzuki-shunsuke/test-circleci/73/workflows/5611059c-d6b1-4a34-91b5-45d6f149d408/jobs/96</a></p><p>ここでは <code>checkout</code> の全てについては触れません。一部抜粋します。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">elif [ -n "$CIRCLE_BRANCH" ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git reset --hard "$CIRCLE_SHA1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git checkout -q -B "$CIRCLE_BRANCH"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>git reset --hard</code> などをしています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜこんなことをしているのか">なぜこんなことをしているのか？<a class="hash-link" href="#なぜこんなことをしているのか" title="Direct link to heading">​</a></h2><p>なんでこんなことをしているのでしょうか？単に <code>git checkout $CIRCLE_BRANCH</code> とかじゃだめなんでしょうか？</p><p>本当のところは CircleCI の中の人に聞かないとわかりませんが、自分なりに考えてみました。</p><p>昔実行した job を rerun することを思い浮かべてみましょう。
rerun するタイミングではすでに remote branch が削除されているかもしれません。そうなれば単に <code>git checkout</code> では失敗します。
また、branch があったとしても $CIRCLE_SHA1 がその branch の HEAD とも限りません。
force push で履歴が変更され、 $CIRCLE_SHA1 が CIRCLE_BRANCH の履歴上にないかもしれません。</p><p>そういったケースを考慮し、このような実装になっているのだと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="注意点">注意点<a class="hash-link" href="#注意点" title="Direct link to heading">​</a></h2><p>しかし、 <code>git reset --hard</code> していることにより、一つ注意が必要です。
<code>git reset --hard</code> は branch を $CIRCLE_BRANCH に切り替える前に実行しているため、
実行しているブランチ(基本的にデフォルトブランチ)の履歴が変更されています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="ローカルで再現してみる">ローカルで再現してみる<a class="hash-link" href="#ローカルで再現してみる" title="Direct link to heading">​</a></h2><p>CircleCI の rerun with SSH でも確認できますが、
ローカルの適当なリポジトリで同様のコマンドを叩いてみることで簡単に再現できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ mkdir sample</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ cd sample</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git commit --allow-empty -m "master first commit"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ export CIRCLE_BRANCH=feature/hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git checkout -b $CIRCLE_BRANCH</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git commit --allow-empty -m "$CIRCLE_BRANCH first commit"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git log</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git checkout master  # clone 直後の状態</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ export CIRCLE_SHA1=$(git rev-parse $CIRCLE_BRANCH)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ここから CircleCI 同様のコマンドを叩いてみる</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git reset --hard "$CIRCLE_SHA1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ git checkout -q -B "$CIRCLE_BRANCH"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ここで git log してみると master branch の履歴が $CIRCLE_BRANCH と同様になっているのが分かると思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="何が困るのか">何が困るのか<a class="hash-link" href="#何が困るのか" title="Direct link to heading">​</a></h2><p>デフォルトブランチ を参照しなければ特に困ることはないでしょう。
一方でデフォルトブランチとの差分を検知して変更があったものだけビルドするとかそういうことをやっている場合には注意が必要です。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ git diff --name-only master $CIRCLE_BRANCH</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすると差分がないことになってしまいます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="回避方法">回避方法<a class="hash-link" href="#回避方法" title="Direct link to heading">​</a></h2><p>master の代わりに origin/master を参照すれば良いでしょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ git diff --name-only origin/master $CIRCLE_BRANCH</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ただ、うっかりローカルのデフォルトブランチを参照してしまうことは十分考えられる上に別にエラーは起こらないので間違いに気づきにくいです。</p><p>そこで checkout 直後にローカルのデフォルトブランチの履歴を origin と強制的に同じにしてしまうというテクニック(?)が考えられます。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">DEFAULT_BRANCH=master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [ "${CIRCLE_BRANCH:-}" != "$DEFAULT_BRANCH" ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git branch -f "$DEFAULT_BRANCH" "origin/$DEFAULT_BRANCH"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすれば間違えてローカルのデフォルトブランチを参照してしまっても安心です。
とはいえ、コードを部分的に移植したりする際にも危険(間違いに気づきにくい)なので、 origin を参照することを推奨します。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="circleci" term="circleci"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Skaffold で特定のサービスだけ動かすためのツールを作った]]></title>
        <id>/skaffold-generator</id>
        <link href="https://techblog.szksh.cloud/skaffold-generator"/>
        <updated>2020-04-05T09:53:25.000Z</updated>
        <summary type="html"><![CDATA[自作の CLI ツール skaffold-generator の紹介です。]]></summary>
        <content type="html"><![CDATA[<p>自作の CLI ツール <a href="https://github.com/suzuki-shunsuke/skaffold-generator" target="_blank" rel="noopener noreferrer">skaffold-generator</a> の紹介です。
プロトタイピングみたいなノリで半日くらいで割と手早く作れました。
名前が長くて適当なのでもっと良い名前ないかなと思ってます。</p><p><a href="https://github.com/suzuki-shunsuke/skaffold-generator" target="_blank" rel="noopener noreferrer">Skaffold</a> に欲しい機能がないので補完する感じで作ったのですが、「それ〇〇で出来るよ」とかあったら(GitHub issue とか Twitter で)教えていただけると幸いです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="どんなツールか">どんなツールか<a class="hash-link" href="#どんなツールか" title="Direct link to heading">​</a></h2><p>設定ファイル <code>skaffold-generator.yaml</code> を監視して変更があったら <code>skaffold.yaml</code> を生成するツールです。設定ファイルでサービスの依存関係を定義できたり、コマンドライン引数で指定したサービス及びそれが依存するサービスに関連した設定だけを使って <code>skaffold.yaml</code> を更新します。
このツールは <code>skaffold.yaml</code> を生成するだけなので実際にアプリケーションをビルド・デプロイするには <code>skaffold</code> と組み合わせて使います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜ作ったか">なぜ作ったか<a class="hash-link" href="#なぜ作ったか" title="Direct link to heading">​</a></h2><p>元々ローカルでアプリケーションを動かしながら開発するために Docker Compose を使ってるリポジトリがあるのですが、それを skaffold に移行出来ないか検証しています。
まだ skaffold を触り始めたばかりで理解が浅いのですが、
本番環境は k8s で動いてるからローカルも k8s で動かせるといいかなと思ったり、あとは変更を検知して自動でビルド・デプロイしてくれたりして便利そうかなと思いました。
まぁ結果的に移行しないことになったとしても、 Skaffold と現状の仕組みについて理解が深まればいいかなくらいのつもりです。</p><p>検証の過程で、 以下のようなことが Docker Compose だと出来るけど Skaffold だと難しそうだと思いました。</p><ul><li>サービスの依存関係を定義すること<ul><li>Skaffold というより k8s の問題かとは思いますが</li><li>Docker Compose だと依存するものを自動で起動してくれて便利</li></ul></li><li>コマンドライン引数で指定したサービスだけ起動すること<ul><li>Skaffold だと skafffold.yaml で定義したものすべてがビルド・デプロイされるという認識</li></ul></li></ul><p>サービスの数が少なければ全部ビルド・デプロイでもいいですが、
マイクロサービスをモノレポで管理しているような場合、
すべてのマイクロサービスをビルド・デプロイするのは無駄が大きかったりします。</p><p>そこで <code>skaffold.yaml</code> の元となる設定ファイルを用意し、コマンドライン引数でサービスを指定して必要最小限の <code>skaffold.yaml</code> を生成するツールを作ってみました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="インストール">インストール<a class="hash-link" href="#インストール" title="Direct link to heading">​</a></h2><p>Go のバイナリをダウンロードしてきてください。 <a href="https://github.com/suzuki-shunsuke/skaffold-generator/releases" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/skaffold-generator/releases</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="使い方">使い方<a class="hash-link" href="#使い方" title="Direct link to heading">​</a></h2><p>使い方は簡単です。サブコマンドもありません。
リポジトリにサンプルがあるのでそれを見ましょう。</p><ul><li><a href="https://github.com/suzuki-shunsuke/skaffold-generator#getting-started" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/skaffold-generator#getting-started</a></li><li><a href="https://github.com/suzuki-shunsuke/skaffold-generator/tree/master/examples" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/skaffold-generator/tree/master/examples</a></li></ul><p>まずは <code>skaffold-generator.yaml</code> を用意します。</p><p><code>skaffold-generator.yaml</code> は <code>base</code> と <code>services</code> からなります。</p><p><code>base</code> は生成される <code>skaffold.yaml</code> のベースとなるものです。
<code>deploy.kubectl.manifests</code> と <code>build.artifacts</code> は上書きされるので指定しないでください。</p><p><code>services</code> ではサービスのリストを定義します。
各サービスは以下の属性を持ちます。</p><ul><li>name: サービス名。コマンドライン引数と <code>depends_on</code> でサービスを指定するのに使う。ユニークにする</li><li>manifests: skaffold.yaml の <code>deploy.kubectl.manifests</code> </li><li>artifacts: skaffold.yaml の  <code>build.artifacts</code></li><li>depends_on: サービスが依存するサービス名のリスト</li></ul><p>用意したら <code>skaffold-generator</code> を実行します。 skaffold.yaml が生成(既にあれば上書き)され、 <code>skaffold-generator.yaml</code> の変更を監視した状態になります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ skaffold-generator</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2020/04/05 18:19:37 start to watch skaffold-generator.yaml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>コマンドライン引数でサービス名を指定しない場合、すべてのサービスが <code>skaffold.yaml</code> に反映されます。
別のターミナルで <code>skaffold dev</code> を実行すれば
生成された <code>skaffold.yaml</code> を使ってアプリケーションをビルド・デプロイ出来ます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ skaffold dev</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>skaffold-generator.yaml</code> を変更すれば、その変更を検知し <code>skaffold.yaml</code> が更新され、そして <code>skaffold dev</code> が <code>skaffold.yaml</code> の変更を検知しアプリケーションがビルド・デプロイされます。</p><p>引数無しですべてのサービスをデプロイするとこのツールの意味がないので、コマンドライン引数でサービス名を指定しましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ skaffold-generator api</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうするとサービス <code>api</code> と <code>api</code> が依存するサービス(依存関係は再帰的に処理されます)だけが <code>skaffold.yaml</code> に反映されます。
依存関係は循環してても大丈夫です。</p><p>使い方は以上です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="docker-compose-みたいにできないこと">Docker Compose みたいにできないこと<a class="hash-link" href="#docker-compose-みたいにできないこと" title="Direct link to heading">​</a></h2><p>Docker Compose みたいに依存関係を定義できるようになりましたが、
Docker Compose みたいにデプロイの順序は考慮されません。
まぁこのツールは <code>skaffold.yaml</code> を生成するだけなので仕方ないですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最後に">最後に<a class="hash-link" href="#最後に" title="Direct link to heading">​</a></h2><p>以上、 <code>skaffold-generator</code> の紹介でした。
まだ作ったばっかで自分でも使えてないので本当に使い物になるのかは分かりませんが、
興味ある人は触ってみてください。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="k8s" term="k8s"/>
        <category label="skaffold" term="skaffold"/>
        <category label="skaffold-generator" term="skaffold-generator"/>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform ハンズオン with MySQL Provider]]></title>
        <id>/terraform-hands-on-with-mysql-provider</id>
        <link href="https://techblog.szksh.cloud/terraform-hands-on-with-mysql-provider"/>
        <updated>2020-01-17T00:14:08.000Z</updated>
        <summary type="html"><![CDATA[Terraform を勉強するには実際に使ってみるのが一番手っ取り早いですが、]]></summary>
        <content type="html"><![CDATA[<p>Terraform を勉強するには実際に使ってみるのが一番手っ取り早いですが、
では手頃な題材はあるかと言われると少し難しいです。</p><p><a href="https://learn.hashicorp.com/terraform/getting-started/build" target="_blank" rel="noopener noreferrer">公式の Getting Started では AWS が使われています</a>が、
AWS のアカウントやクレデンシャルが必要ですしお金もかかってしまいます(無料枠はありますが)。
もう少し手軽なものが欲しいところです。</p><p>そこで公式の Provider で丁度いいものはないか探したところ、 <a href="https://www.terraform.io/docs/providers/mysql/" target="_blank" rel="noopener noreferrer">MySQL Provider</a> が良さそうでした。
MySQL のユーザーや Database を Terraform で管理したいとは自分は思いませんが、 Terraform の入門で遊ぶにはちょうどよいでしょう。</p><p>ちなみに公式の Provider のリストはこちらです。</p><ul><li><a href="https://github.com/terraform-providers" target="_blank" rel="noopener noreferrer">https://github.com/terraform-providers</a></li><li><a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/index.html</a></li></ul><p>また、 Terraform に関しては <a href="https://techblog.szksh.cloud/terraform-getting-started/" target="_blank" rel="noopener noreferrer">Terraform 入門</a> も参照してください。</p><p>今回の作業用に適当にディレクトリを作成し、そこで作業しましょう。</p><p>以降、コマンドの実行結果は一部省略することがあります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ mkdir workspace</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ cd workspace</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-のバージョンと-tfenv">Terraform のバージョンと tfenv<a class="hash-link" href="#terraform-のバージョンと-tfenv" title="Direct link to heading">​</a></h2><p>Terraform を複数人で使う場合、 Terraform のバージョンを揃えるのが重要です。 理由の一つとして、 Terraform の State は State を作成した Terraform のバージョンを記録しており、それより古いバージョンの Terraform で <code>terraform plan</code> などを実行すると失敗するようになっていることが挙げられます(この点については後でも触れます)。
そういう意味では、 <a href="https://github.com/tfutils/tfenv" target="_blank" rel="noopener noreferrer">tfenv</a> によってバージョン管理するのが良いです。</p><p><code>.terraform-version</code> を作成します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ echo 0.12.19 &gt; .terraform-version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tfenv install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform v0.12.19</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="mysql-を-docker-で動かす">MySQL を Docker で動かす<a class="hash-link" href="#mysql-を-docker-で動かす" title="Direct link to heading">​</a></h2><p>では MySQL を Docker で動かします。</p><p><a href="https://hub.docker.com/_/mysql?tab=description" target="_blank" rel="noopener noreferrer">https://hub.docker.com/_/mysql?tab=description</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="docker-compose-使う場合">Docker Compose 使う場合<a class="hash-link" href="#docker-compose-使う場合" title="Direct link to heading">​</a></h3><p>docker-compose.yml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"3"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">5.7.28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ports</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"23306:3306"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">MYSQL_ROOT_PASSWORD</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> password</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker-compose up -d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ docker-compose ps  # コンテナが起動しているか確認</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>不要になったら削除しましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker-compose rm -sf mysql</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これから Terraform で MySQL の Database を作成します。
作成されているか確認するために MySQL に接続しておきます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker-compose exec mysql mysql -u root -p -P 23306</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show databases;  # database の一覧を確認</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Database           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| information_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| performance_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| sys                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4 rows in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="docker-compose-を使わない場合">Docker Compose を使わない場合<a class="hash-link" href="#docker-compose-を使わない場合" title="Direct link to heading">​</a></h3><p>基本的に Docker Compose 使う場合と変わりません。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ docker run --name terraform-mysql -p "23306:3306" -e MYSQL_ROOT_PASSWORD=password -d mysql:5.7.28</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ docker exec -ti terraform-mysql mysql -u root -p -P 23306</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ docker rm -vf terraform-mysql</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="リソースの作成">リソースの作成<a class="hash-link" href="#リソースの作成" title="Direct link to heading">​</a></h2><p>次のような設定ファイルを用意します。</p><p>main.tf</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">provider "mysql" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  endpoint = "localhost:23306"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  username = "root"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  password = "password"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>設定できる属性やその意味などはドキュメントを確認してください。</p><p><a href="https://www.terraform.io/docs/providers/mysql/r/database.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/mysql/r/database.html</a></p><p>MySQL Provider の設定として MySQL に接続するための情報と、Terraform によって作成するデータベース <code>foo</code> の設定が定義されています。
password が平文で書かれているのが気になるかもしれませんが、一旦スルーしてください。</p><p>この状態で <code>terraform plan</code> を実行してみます。 <code>terraform plan</code> は <code>terraform apply</code> によるリソースの作成を DRY RUN するコマンドです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Could not satisfy plugin requirements</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plugin reinitialization required. Please run "terraform init".</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plugins are external binaries that Terraform uses to access and manipulate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resources. The configuration provided requires plugins which can't be located,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">don't satisfy the version constraints, or are otherwise incompatible.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform automatically discovers provider requirements from your</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">configuration, including providers used in child modules. To see the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">requirements and constraints from each module, run "terraform providers".</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: provider.mysql: no suitable version installed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  version requirements: "(any version)"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  versions installed: none</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>失敗しました。</p><blockquote><p>Plugin reinitialization required. Please run "terraform init".</p></blockquote><p>とある通り、 <code>terraform plan</code> や <code>apply</code> などのコマンドを実行する前に <code>terraform init</code> を実行する必要があります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Initializing the backend...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Initializing provider plugins...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Checking for available provider plugins...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- Downloading plugin for provider "mysql" (terraform-providers/mysql) 1.9.0...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">^C</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The following providers do not have any version constraints in configuration,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">so the latest version was installed.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">To prevent automatic upgrades to new major versions that may contain breaking</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">changes, it is recommended to add version = "..." constraints to the</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">corresponding provider blocks in configuration, with the constraint strings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">suggested below.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">* provider.mysql: version = "~&gt; 1.9"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform has been successfully initialized!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You may now begin working with Terraform. Try running "terraform plan" to see</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">any changes that are required for your infrastructure. All Terraform commands</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">should now work.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">If you ever set or change modules or backend configuration for Terraform,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">rerun this command to reinitialize your working directory. If you forget, other</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">commands will detect it and remind you to do so if necessary.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Provider のダウンロードが行われています。
<code>terraform init</code> を実行すると <code>.terraform</code> というディレクトリが作成されます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ ls -A</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">.terraform  .terraform-version  main.tf</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>terraform init</code> は何度でも安全に実行できます。
<code>.terraform</code> を削除した場合でももう一度 <code>terraform init</code> を実行すれば問題ありません。</p><p>次に <code>terraform plan</code> を実行します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Refreshing Terraform state in-memory prior to plan...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The refreshed state will be used to calculate this plan, but will not be</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">persisted to local or remote state storage.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------------------------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">An execution plan has been generated and is shown below.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Resource actions are indicated with the following symbols:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + create</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">------------------------------------------------------------------------</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Note: You didn't specify an "-out" parameter to save this plan, so Terraform</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">can't guarantee that exactly these actions will be performed if</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">"terraform apply" is subsequently run.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><blockquote><p>Plan: 1 to add, 0 to change, 0 to destroy.</p></blockquote><p>とある通り、リソースが 1 つ作成されるようです。 DRY RUN なのでまだ作成されてません。</p><p>では実際に作成してみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">An execution plan has been generated and is shown below.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Resource actions are indicated with the following symbols:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + create</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Do you want to perform these actions?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Terraform will perform the actions described above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Only 'yes' will be accepted to approve.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value: yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Creating...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Creation complete after 0s [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>途中確認があるので <code>yes</code> と入力すると実際に変更が適用されます。</p><p>本当に Database が作られているか確認します。
MySQL クエリを叩きます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show databases;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Database           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| information_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| foo                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| performance_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| sys                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">5 rows in set (0.01 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME='foo';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| CATALOG_NAME | SCHEMA_NAME | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| def          | foo         | utf8                       | utf8_general_ci        | NULL     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ありました。</p><p>すると <code>terraform.tfstate</code> というファイルが作られているはずです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ ls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose.yml main.tf  terraform.tfstate</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こんな JSON ファイルになります。</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"version"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"terraform_version"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"0.12.19"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"serial"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"lineage"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"7011a551-bfa1-96a5-4153-2c9d6f32251c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"outputs"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"resources"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"mode"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"managed"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"mysql_database"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"foo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"provider"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"provider.mysql"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"instances"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"schema_version"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"attributes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"default_character_set"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"utf8"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"default_collation"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"utf8_general_ci"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"foo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"foo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"private"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bnVsbA=="</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>管理されているリソースの情報と、 Terraform のバージョンなどのメタ情報が保存されています。
このファイルは基本的に terraform によって更新されるものであり、人間が手で修正するものではありません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="古い-terraform-を使ってみる">古い Terraform を使ってみる<a class="hash-link" href="#古い-terraform-を使ってみる" title="Direct link to heading">​</a></h2><p>ここであえて古いバージョンの Terraform を使って <code>terraform plan</code> を実行してみます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ echo 0.12.12 &gt; .terraform-version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tfenv install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Error locking state: Error acquiring the state lock: state snapshot was created by Terraform v0.12.19, which is newer than current v0.12.12; upgrade to Terraform v0.12.19 or greater to work with this state</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform acquires a state lock to protect the state from being written</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">by multiple users at the same time. Please resolve the issue above and try</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">again. For most commands, you can disable locking with the "-lock=false"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag, but this is not recommended.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>失敗しました。 State の lock に失敗したようです。 State の lock については <a href="https://techblog.szksh.cloud/terraform-state-locking/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/terraform-state-locking/</a> も参照してください。</p><p>このように古いバージョンの terraform は使えません。
一方新しいバージョンを使うには問題なく使えますが、 State の <code>terraform_version</code> が更新され、それまでのバージョンを使ってた人が突然 <code>terraform plan</code> などができなくなりますので、注意が必要です。</p><p>これが前述した意味になります。</p><blockquote><p>Terraform を複数人で使う場合、 Terraform のバージョンを揃えるのが重要です。 理由の一つとして、 Terraform の State は State を作成した Terraform のバージョンを記録しており、それより古いバージョンの Terraform で <code>terraform plan</code> などを実行すると失敗するようになっていることが挙げられます(この点については後でも触れます)。</p></blockquote><p>では元のバージョンに戻しましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ echo 0.12.19 &gt; .terraform-version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="リソースの更新">リソースの更新<a class="hash-link" href="#リソースの更新" title="Direct link to heading">​</a></h2><p>同じ調子でもう一つ Database を作ってみましょう。
Database foo の設定をコピーして <code>terraform plan</code> を実行します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Duplicate resource "mysql_database" configuration</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 11:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  11: resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">A mysql_database resource named "foo" was already declared at main.tf:7,1-32.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Resource names must be unique per type in each module.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>失敗しました。エラーメッセージの通り、リソースパスはユニークでないといけません。
修正しましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "bar" { # "foo" を "bar" に変更</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.bar will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>作成されるようです。 apply してみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Creating...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Error 1007: Can't create database 'foo'; database exists</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 11, in resource "mysql_database" "bar":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  11: resource "mysql_database" "bar" {</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>失敗しました。同じ名前のデータベースは作成できないので当然です。
このように plan に成功しても apply に失敗することはあります。</p><p>では name を修正しましょう。ついでに database foo の default character set を修正します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "utf8mb4" # default character set を修正。デフォルトは utf8</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "bar" # 名前を foo から bar に変更</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.bar will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo will be updated in-place</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ~ resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_character_set = "utf8" -&gt; "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        default_collation     = "utf8_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id                    = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name                  = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 1 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Creating...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Modifying... [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Creation complete after 0s [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Error 1253: COLLATION 'utf8_general_ci' is not valid for CHARACTER SET 'utf8mb4'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 7, in resource "mysql_database" "foo":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   7: resource "mysql_database" "foo" {</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>mysql_database.foo の変更に失敗しました。一方 mysql_database.bar の作成には成功しています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show databases;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Database           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| information_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| bar                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| foo                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| performance_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| sys                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6 rows in set (0.00 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME='foo';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| CATALOG_NAME | SCHEMA_NAME | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| def          | foo         | utf8                       | utf8_general_ci        | NULL     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このように、一部の変更の適用に失敗にしても、その他の変更は適用されるという、ある意味中途半端に apply される場合があります。こういった場合に rollback するようなコマンドはないので気をつけましょう。適用された変更はちゃんと State に反映されています。</p><p>では mysql_database.foo の変更に失敗したので、適切に設定を変更しましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci" # utf8_general_ci から変更</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>apply に <code>--auto-approve</code> というオプションをつけると確認なしに適用されます。CIで実行する場合には基本これをつけることになると思います。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply --auto-approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Refreshing state... [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Refreshing state... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Modifying... [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Modifications complete after 0s [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Apply complete! Resources: 0 added, 1 changed, 0 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>変更できました。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME='foo';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| CATALOG_NAME | SCHEMA_NAME | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| def          | foo         | utf8mb4                    | utf8mb4_general_ci     | NULL     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraformtfstatebackup">terraform.tfstate.backup<a class="hash-link" href="#terraformtfstatebackup" title="Direct link to heading">​</a></h2><p>ところで <code>terraform.tfstate.backup</code> というファイルが作られています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ ls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">docker-compose.yml main.tf  terraform.tfstate  terraform.state.backup</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これは名前の通り <code>terraform.tfstate</code> のバックアップです。
<code>terraform.tfstate</code> が terraform のコマンドによって更新される前に自動的にバックアップが作成されます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="リソースの-recreate">リソースの recreate<a class="hash-link" href="#リソースの-recreate" title="Direct link to heading">​</a></h2><p>今度は database の名前を変更してみましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "foo2" # foo から変更</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo must be replaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-/+ resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ id                    = "foo" -&gt; (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ name                  = "foo" -&gt; "foo2" # forces replacement</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 1 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>先程 default_collation と default_character_set を変更した際は既存のデータベースが更新されましたが、今度は新しく作り直されるようです。
これはリソースの定義に依存します。ソースコードを確認しましょう。</p><p><a href="https://github.com/terraform-providers/terraform-provider-mysql/blob/v1.9.0/mysql/resource_database.go#L31" target="_blank" rel="noopener noreferrer">https://github.com/terraform-providers/terraform-provider-mysql/blob/v1.9.0/mysql/resource_database.go#L31</a></p><p>属性の定義で <code>ForceNew: true</code> となっている場合、その属性が変更されるとリソースが作り直されます。デフォルトだと既存のリソースの更新になります。
新しく作り直されるということは、テーブルなどは消えるはずです。試しにテーブルを作っておいて、 apply してみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show tables from foo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Empty set (0.00 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; create table foo.zoo (id int);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 0 rows affected (0.03 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show tables from foo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Tables_in_foo |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| zoo           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+---------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply --auto-approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Refreshing state... [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Refreshing state... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Destroying... [id=foo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Destruction complete after 0s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Creating...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Creation complete after 0s [id=foo2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Apply complete! Resources: 1 added, 0 changed, 1 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><blockquote><p>mysql_database.foo: Destroying... <!-- -->[id=foo]</p></blockquote><p>とあるように一度削除されています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show tables from foo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ERROR 1049 (42000): Unknown database 'foo'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show tables from foo2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Empty set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>新しいデータベースには先程作成したテーブルがありません。このように recreate は危険な操作なのでやるときには注意を払いましょう。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="変数の利用">変数の利用<a class="hash-link" href="#変数の利用" title="Direct link to heading">​</a></h2><p>変数を使ってみましょう。設定を修正します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = var.default_character_set  # 変数 default_character_set を参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Reference to undeclared input variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 9, in resource "mysql_database" "foo":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   9:   default_character_set = var.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">An input variable with the name "default_character_set" has not been declared.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This variable can be declared with a variable "default_character_set" {}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">block.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>エラーになりました。変数を利用するには宣言が必要です。
<code>variables.tf</code> というファイルを作成しましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">variable "default_character_set" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type = string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value:</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>値の入力を求められました。これは変数の値が設定されていないからです。
ここでは <code>foo</code> と入力してみます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value: foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo will be updated in-place</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ~ resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_character_set = "utf8mb4" -&gt; "foo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id                    = "foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name                  = "foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>-input=false</code> にすると入力を求められずにエラーを返します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan -input=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: No value for required variable</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on variables.tf line 1:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   1: variable "default_character_set" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The root module input variable "default_character_set" is not set, and has no</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">default value. Use a -var or -var-file command line argument to provide a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">value for this variable.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>terraform.tfvars</code> というファイルを作成し、値を設定しましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">default_character_set = "utf8mb4"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>terraform.tfvars</code> は特別なファイル名で、カレントディレクトリにこのファイルがあると自動で読み込まれます。</p><p>ファイル名を変えて terraform plan をしてみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ mv terraform.tfvars main.tfvars</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">var.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value:</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>聞かれました。 main.tfvars が読み込まれていません。 <code>-var-file</code> オプションでファイルを指定すれば main.tfvars を読み込めます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan -var-file=main.tfvars</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>もとに戻しておきます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ mv main.tfvars terraform.tfvars</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="他のリソースの属性の参照">他のリソースの属性の参照<a class="hash-link" href="#他のリソースの属性の参照" title="Direct link to heading">​</a></h2><p>設定を修正します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = var.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = mysql_database.foo.default_character_set  # 他のリソースの属性を参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"  # default_character_set に合わせて変更</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.bar will be updated in-place</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ~ resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_character_set = "utf8" -&gt; "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_collation     = "utf8_general_ci" -&gt; "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id                    = "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name                  = "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply --auto-approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Refreshing state... [id=foo2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Refreshing state... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Modifying... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Modifications complete after 0s [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Apply complete! Resources: 0 added, 1 changed, 0 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-state-rm">terraform state rm<a class="hash-link" href="#terraform-state-rm" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/commands/state/rm.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/state/rm.html</a></p><p>Terraform は State によって設定ファイル中のリソースと実際のリソースをマッピングしています。
State からリソースを削除して <code>terraform plan</code> を実行してみると、 Terraform はそのリソースを新規で作成しようとします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform state rm mysql_database.bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Removed mysql_database.bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Successfully removed 1 resource instance(s).</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.bar will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>実際には同じ名前のデータベースは作成できないので <code>apply</code> で失敗するはずです。
<code>terraform state rm</code> は元々 Terraform で管理していたものを Terraform で管理するのを止めたり、あるいは手動で削除してしまったリソースを State からも削除するのに使えます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-import">terraform import<a class="hash-link" href="#terraform-import" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/import/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/import/index.html</a>
<a href="https://www.terraform.io/docs/commands/import.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/import.html</a></p><p><code>terraform import</code> は Terraform で管理されていないリソースを Terraform で管理するために State にリソースのデータを取り込むコマンドです。
ちょうど <code>mysql_database.bar</code> を State から消してしまったので、 import することにしましょう。</p><p><a href="https://www.terraform.io/docs/providers/mysql/r/database.html#import" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/mysql/r/database.html#import</a> にある通り、データベースはデータベース名を指定すれば import 出来ます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform import mysql_database.bar bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Importing from ID "bar"...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Import prepared!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Prepared mysql_database for import</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Refreshing state... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Import successful!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The resources that were imported are shown above. These resources are now in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">your Terraform state and will henceforth be managed by Terraform.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Import 出来ました。 <code>terraform plan</code> を実行して差分がなくなっていることを確認します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>次に手動で Database を作成してそれを import してみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; create database zoo;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 1 row affected (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform import mysql_database.zoo zoo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: resource address "mysql_database.zoo" does not exist in the configuration.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Before importing this resource, please create its configuration in the root module. For example:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # (resource arguments)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>失敗しました。 <code>mysql_database.zoo</code> が存在しないからです。
空で良いのでリソースの設定を追加しましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform import mysql_database.zoo zoo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.zoo: Importing from ID "zoo"...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.zoo: Import prepared!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Prepared mysql_database for import</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.zoo: Refreshing state... [id=zoo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Import successful!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The resources that were imported are shown above. These resources are now in</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">your Terraform state and will henceforth be managed by Terraform.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Import 出来たので zoo を Terraform で管理できるようになりました。
<code>terraform plan</code> を実行してみます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Missing required argument</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 19, in resource "mysql_database" "zoo":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  19: resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The argument "name" is required, but no definition was found.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>zoo の設定が空で name が設定されていないので失敗しました。
修正します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.zoo will be updated in-place</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ~ resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_character_set = "latin1" -&gt; "utf8"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_collation     = "latin1_swedish_ci" -&gt; "utf8_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id                    = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>まだ差分が出てしまいました。</p><p>Import は State にはリソースのデータを反映してくれますが、設定ファイルには反映してくれないので自分で反映させる必要があります。
一部の Provider では、設定ファイルに自動で反映させるためのサードパーティのツールもあります。</p><p>修正します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "latin1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "latin1_swedish_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>無事差分がなくなりました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="リソースの削除">リソースの削除<a class="hash-link" href="#リソースの削除" title="Direct link to heading">​</a></h2><p>次にリソースを削除してみます。</p><p><code>terraform destroy</code> もありますが、今回は設定をコメントアウトします。
ちなみに Terraform の設定ファイルの記述言語である HCL ではコメントアウトは <code>#</code> でも <code>//</code> でもどちらでも良いです。</p><p><a href="https://github.com/hashicorp/hcl#syntax" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/hcl#syntax</a></p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   name                  = "bar"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   default_character_set = mysql_database.foo.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#   default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># }</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.bar will be destroyed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - resource "mysql_database" "bar" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_character_set = "utf8mb4" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_collation     = "utf8mb4_general_ci" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - id                    = "bar" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name                  = "bar" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 0 to change, 1 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply --auto-approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo: Refreshing state... [id=foo2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Refreshing state... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Destroying... [id=bar]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.bar: Destruction complete after 0s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Apply complete! Resources: 0 added, 0 changed, 1 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show databases;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Database           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| information_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| foo2               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| performance_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| sys                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| zoo                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6 rows in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>確かに削除されています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-state-mv">terraform state mv<a class="hash-link" href="#terraform-state-mv" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/commands/state/mv.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/state/mv.html</a></p><p>ここで リソースの名前を変えて <code>terraform plan</code> してみましょう。名前を変えたくなることはまぁあると思います。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "foo2" { # foo から foo2 に変更</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = var.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo will be destroyed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - resource "mysql_database" "foo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_character_set = "utf8mb4" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_collation     = "utf8mb4_general_ci" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - id                    = "foo2" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name                  = "foo2" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.foo2 will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "foo2" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 1 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>既存のデータベースが削除されて新しいデータベースが作成されてしまいそうです。
State に記録されているリソースのパスを修正する必要があります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform state mv mysql_database.foo mysql_database.foo2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Move "mysql_database.foo" to "mysql_database.foo2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Successfully moved 1 object(s).</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>差分がなくなりました。</p><p>このようにコマンドによって State を更新する必要があるので、特に複数人で作業する場合は安易にリソースパスを変更するべきではありません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-refresh">terraform refresh<a class="hash-link" href="#terraform-refresh" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/commands/refresh.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/refresh.html</a></p><p><code>terraform refresh</code> は実際のインフラの情報を取得して State に反映させるコマンドです。
Terraform を使わずに加えた変更を State に反映させるのに使えます。
Terraform を使ってインフラを管理している以上、 Terraform を使わずにインフラを変更するのは望ましくないですが、実際のところはよくある話かと思います。</p><p>Terraform を使わずに default_character_set を変更してみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; ALTER DATABASE zoo DEFAULT CHARACTER SET utf8mb4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Query OK, 1 row affected (0.01 sec)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; select * from INFORMATION_SCHEMA.SCHEMATA where SCHEMA_NAME='zoo';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| CATALOG_NAME | SCHEMA_NAME | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| def          | zoo         | utf8mb4                    | utf8mb4_general_ci     | NULL     |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------+-------------+----------------------------+------------------------+----------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">1 row in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>default_character_set を変えると自動で DEFAULT_COLLATION_NAME も変わりました。
設定ファイルにも変更を反映させましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>-refresh=false</code> をつけて terraform plan を実行してみます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan -refresh=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.zoo will be updated in-place</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ~ resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_character_set = "latin1" -&gt; "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_collation     = "latin1_swedish_ci" -&gt; "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id                    = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Warning: Resource targeting is in effect</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">You are creating a plan with the -target option, which means that the result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">of this plan may not represent all of the changes requested by the current</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">configuration.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The -target option is not for routine use, and is provided only for</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">exceptional situations such as recovering from errors or mistakes, or when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform specifically suggests to use it as part of an error message.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>差分が出てしまいました。これは State が更新されていないからです。
terraform.tfstate を確認してみましょう。</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"mode"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"managed"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"mysql_database"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"zoo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"provider"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"provider.mysql"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"instances"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"schema_version"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"attributes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"default_character_set"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"latin1"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"default_collation"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"latin1_swedish_ci"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"zoo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"zoo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"private"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"eyJzY2hlbWFfdmVyc2lvbiI6IjAifQ=="</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>-refresh=false</code> を取ると今度は差分がなくなるはずです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これは、実は terraform plan はデフォルトでは State の内容と設定ファイルを比較する前に実際のインフラの情報を取得し State の内容をインメモリで更新した上で設定ファイルと比較しているからです。
ただし、インメモリでの更新であり、実際の State が更新されているわけではないです。</p><p>今までスルーしてきましたが、そのことは terraform plan の結果でも説明されています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Refreshing Terraform state in-memory prior to plan...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The refreshed state will be used to calculate this plan, but will not be</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">persisted to local or remote state storage.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ではなんで <code>-refresh=false</code> が必要になるかというと、理由の一つとして <code>terraform plan</code> が速くなることが挙げられます。
むしろ <code>-refresh=false</code> をつけないと、管理するリソースの数が増えれば増えるほど情報を取得してくるのに時間がかかるようになりますし、
場合によっては API の rate limit に引っかかるなんてこともあるかもしれません。</p><p>なので普段 <code>-refresh=false</code> をつけて <code>terraform plan</code> を実行するようにしていると Terraform を使わずに加えたインフラの修正を State に取り込むために <code>terraform refresh</code> を実行する必要が出てきたりします。</p><p>State は更新されていないので <code>-refresh=false</code> とすれば相変わらず差分は出ます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan -refresh=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.zoo will be updated in-place</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ~ resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_character_set = "utf8mb4" -&gt; "latin1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ default_collation     = "utf8mb4_general_ci" -&gt; "latin1_swedish_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        id                    = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 1 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>差分が出ました。 <code>terraform refresh</code> を実行すると State が更新され、差分がなくなるはずです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform refresh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module.app.mysql_database.db: Refreshing state... [id=app]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo2: Refreshing state... [id=foo2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.zoo: Refreshing state... [id=zoo]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"mode"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"managed"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"type"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"mysql_database"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"zoo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"provider"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"provider.mysql"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token property" style="color:#36acaa">"instances"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"schema_version"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"attributes"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"default_character_set"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"utf8mb4"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"default_collation"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"utf8mb4_general_ci"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"zoo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token property" style="color:#36acaa">"name"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"zoo"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token property" style="color:#36acaa">"private"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"eyJzY2hlbWFfdmVyc2lvbiI6IjAifQ=="</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan -refresh=false</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="module">Module<a class="hash-link" href="#module" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/configuration/modules.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/modules.html</a></p><p>簡単なモジュールを作ってみましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ mkdir database</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vi database/database.tf</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "db" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "app"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>では Module を使って database を作ってみます。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">module "app" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  source = "./database"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Module not installed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 25:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  25: module "app" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This module is not yet installed. Run "terraform init" to install all modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">required by this configuration.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>失敗しました。 <code>terraform init</code> する必要があります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform init</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # module.app.mysql_database.db will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "db" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "app"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply --auto-approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Apply complete! Resources: 1 added, 0 changed, 0 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="module-パラメータ">Module パラメータ<a class="hash-link" href="#module-パラメータ" title="Direct link to heading">​</a></h3><p>これで Module を使って Database を作れましたが、 name が "app" 固定なので使いづらいですね。名前を変えられるようにしましょう。</p><p>database/database.tf</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "db" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = var.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>database/variables.tf</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">variable "name" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type = string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Missing required argument</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  on main.tf line 25, in module "app":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  25: module "app" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The argument "name" is required, but no definition was found.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>必須パラメータを指定していないので失敗しました。デフォルト値を設定しましょう。</p><p><a href="https://www.terraform.io/docs/configuration/variables.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/variables.html</a></p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">variable "name" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type    = string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default = "app"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>パラメータを渡して name を変更しましょう。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">module "app" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  source = "./database"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name   = "app2"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # module.app.mysql_database.db must be replaced</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-/+ resource "mysql_database" "db" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ id                    = "app" -&gt; (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ~ name                  = "app" -&gt; "app2" # forces replacement</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>パラメータを渡せました。もとに戻しておきます。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">module "app" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  source = "./database"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name   = "app"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="module-output">Module Output<a class="hash-link" href="#module-output" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/configuration/outputs.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/outputs.html</a></p><p>mysql_database.bar から mysql_database.foo の属性を参照したように、 <code>module.app</code> で作成したデータベースの属性を参照するにはどうしたらよいでしょうか？
モジュール内であれば普通に参照できますが、モジュールの外から参照するには、 Module 側で明示的に公開する必要があります。不便な側面もあるかもしれませんが、カプセル化とも言えますね。</p><p>default_character_set を公開しましょう。</p><p>database/output.tf</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">output "default_character_set" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value = mysql_database.db.default_character_set</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>そして参照します。</p><p>main.tf</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = module.app.default_character_set  # 参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">No changes. Infrastructure is up-to-date.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-destroy">terraform destroy<a class="hash-link" href="#terraform-destroy" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/commands/destroy.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/destroy.html</a></p><p>ここまでお疲れさまでした。
ハンズオンの最後にこれまで作ったデータベースを削除してしまいましょう。
<code>-target</code> オプションでリソースパスを指定して特定のリソースだけ削除できます。
<code>-target</code> オプションは複数回指定することで複数のリソースを指定できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform destroy -target=module.app</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.zoo will be destroyed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_character_set = "utf8mb4" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_collation     = "utf8mb4_general_ci" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - id                    = "zoo" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name                  = "zoo" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # module.app.mysql_database.db will be destroyed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - resource "mysql_database" "db" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_character_set = "utf8mb4" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_collation     = "utf8mb4_general_ci" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - id                    = "app" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name                  = "app" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 0 to change, 2 to destroy.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Do you really want to destroy all resources?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Terraform will destroy all your managed infrastructure, as shown above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  There is no undo. Only 'yes' will be accepted to confirm.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value: yes</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>module.app を消そうとしたら、 mysql_database.zoo も削除されそうになっています。
これは mysql_database.zoo が module.app の属性に依存しているからです。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_character_set = module.app.default_character_set  # module.app に依存</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>-target</code> オプションで <code>mysql_database.zoo</code> を指定すればそれだけ削除されます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform destroy -target=mysql_database.zoo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.zoo will be destroyed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_character_set = "utf8mb4" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - default_collation     = "utf8mb4_general_ci" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - id                    = "zoo" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name                  = "zoo" -&gt; null</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 0 to add, 0 to change, 1 to destroy.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Do you really want to destroy all resources?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Terraform will destroy all your managed infrastructure, as shown above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  There is no undo. Only 'yes' will be accepted to confirm.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value:</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>確認されるので、 yes と入力して削除します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value: yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.zoo: Destroying... [id=zoo]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.zoo: Destruction complete after 0s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Warning: Applied changes may be incomplete</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The plan was created with the -target option in effect, so some changes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">requested in the configuration may have been ignored and the output values may</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">not be fully updated. Run the following command to verify that no other</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">changes are pending:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Note that the -target option is not suitable for routine use, and is provided</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">only for exceptional situations such as recovering from errors or mistakes, or</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">when Terraform specifically suggests to use it as part of an error message.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Destroy complete! Resources: 1 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show databases;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Database           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| information_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| app                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| foo2               |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| performance_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| sys                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">6 rows in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>確かに消えています。
設定ファイルからは消えていないので <code>terraform plan</code> を実行すると Create しようとします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform will perform the following actions:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # mysql_database.zoo will be created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  + resource "mysql_database" "zoo" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_character_set = "utf8mb4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + default_collation     = "utf8mb4_general_ci"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + id                    = (known after apply)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      + name                  = "zoo"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Plan: 1 to add, 0 to change, 0 to destroy.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>リソースパスを指定しないと全てのリソースを削除します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform destroy --auto-approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module.app.mysql_database.db: Refreshing state... [id=app]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo2: Refreshing state... [id=foo2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo2: Destroying... [id=foo2]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module.app.mysql_database.db: Destroying... [id=app]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module.app.mysql_database.db: Destruction complete after 0s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mysql_database.foo2: Destruction complete after 0s</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Destroy complete! Resources: 2 destroyed.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mysql&gt; show databases;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| Database           |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| information_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| mysql              |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| performance_schema |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">| sys                |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">+--------------------+</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">4 rows in set (0.00 sec)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>全部消えました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform 入門]]></title>
        <id>/terraform-getting-started</id>
        <link href="https://techblog.szksh.cloud/terraform-getting-started"/>
        <updated>2020-01-16T00:25:05.000Z</updated>
        <summary type="html"><![CDATA[参考]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="参考">参考<a class="hash-link" href="#参考" title="Direct link to heading">​</a></h2><ul><li><a href="https://qiita.com/Chanmoro/items/55bf0da3aaf37dc26f73" target="_blank" rel="noopener noreferrer">10分で理解するTerraform | Qiita</a></li><li><a href="https://qiita.com/fukubaka0825/items/68506b1e6644404d6cc0" target="_blank" rel="noopener noreferrer">Terraform入門資料(v0.12.0対応) ~基本知識から設計や運用、知っておくべきtipsまで~ | Qiita</a></li><li><a href="https://dev.classmethod.jp/cloud/terraform-getting-started-with-aws/" target="_blank" rel="noopener noreferrer">AWSでTerraformに入門 | Developers.io</a></li><li><a href="https://qiita.com/minamijoyo/items/1f57c62bed781ab8f4d7" target="_blank" rel="noopener noreferrer">Terraform職人入門: 日々の運用で学んだ知見を淡々とまとめる | Qiita</a></li></ul><p>手を動かしたい方は <a href="https://techblog.szksh.cloud/terraform-hands-on-with-mysql-provider/" target="_blank" rel="noopener noreferrer">Terraform ハンズオン with MySQL Provider</a> も参考にしてください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="前提">前提<a class="hash-link" href="#前提" title="Direct link to heading">​</a></h2><ul><li>執筆時点 (2020/01/05) で Terraform の最新バージョンは v0.12.18 です</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-とは">Terraform とは<a class="hash-link" href="#terraform-とは" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/" target="_blank" rel="noopener noreferrer">Terraform</a> は Infrastructure as Code を実現する汎用的なCLIツールです。
インフラの状態を設定ファイルに定義し、コマンドを実行することで、
実際のインフラの状態と設定ファイルの差分を検知し、設定ファイルに記述されたとおりになるようにインフラを変更(CRUD)します。</p><p><a href="https://www.hashicorp.com/" target="_blank" rel="noopener noreferrer">Hashicorp</a> という企業がホストしている OSS になります。
Go で書かれています。 <a href="https://github.com/hashicorp/terraform" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/terraform</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-のインストール">Terraform のインストール<a class="hash-link" href="#terraform-のインストール" title="Direct link to heading">​</a></h2><p>Terraform は Go 製なので 1 バイナリをダウンロードしてインストールするだけです。</p><p><a href="https://www.terraform.io/downloads.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/downloads.html</a></p><p>tfenv を使うと管理が楽です。</p><p><a href="https://github.com/tfutils/tfenv" target="_blank" rel="noopener noreferrer">https://github.com/tfutils/tfenv</a></p><p>tfenv は Terraform のバージョン管理ツールです。
pyenv や rbenv の Terraform 版みたいなものです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="用語集">用語集<a class="hash-link" href="#用語集" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/glossary.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/glossary.html</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="provider">Provider<a class="hash-link" href="#provider" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/glossary.html#terraform-provider" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/glossary.html#terraform-provider</a></p><p>Terraform を「汎用的な」ツールといいましたが、ここでいう「汎用的」とは、 AWS などの特定のサービス専用ではなく、様々なサービスを同じように扱うことが出来るという意味です。
実際に AWS などのインフラを操作する場合にはインフラが提供する API を利用するわけですが、
サービス固有の API 呼び出しなどの処理を <code>Provider</code> という形で Terraform 本体から切り出すことでこの汎用性は実現されています。
Provider は AWS や GCP などの Hashicorp 公式のものもあれば、サードパーティ製のものもありますし、自分で作ってしまうことも出来ます。</p><ul><li>公式 Provider<ul><li><a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/index.html</a></li><li><a href="https://github.com/terraform-providers" target="_blank" rel="noopener noreferrer">https://github.com/terraform-providers</a></li></ul></li><li>サードパーティ Provider<ul><li><a href="https://www.terraform.io/docs/providers/type/community-index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/type/community-index.html</a></li><li>[宣伝][Graylog]<!-- -->(<a href="https://www.graylog.org/products/open-source" target="_blank" rel="noopener noreferrer">https://www.graylog.org/products/open-source</a>) の Provider <a href="https://github.com/suzuki-shunsuke/go-graylog" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog</a></li></ul></li></ul><p>少し突っ込んだ話をすると、 Terraform 本体同様 Provider も実態は Golang で書かれた1バイナリであり、本体から Provider を RPC によって呼び出すという形でプラグイン機構を実現しています。
<a href="https://github.com/hashicorp/go-plugin" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/go-plugin</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="余談-provider-の自作">余談: Provider の自作<a class="hash-link" href="#余談-provider-の自作" title="Direct link to heading">​</a></h3><p>Provider の自作に興味のある方は <a href="https://www.terraform.io/docs/extend/writing-custom-providers.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/extend/writing-custom-providers.html</a> を読むと良いでしょう。
ただし、それを読めば全てわかるということはなく、作りながら Terraform 本体や AWSなどの公式の Provider のソースコードや GoDoc を読みつつ試行錯誤することになると思います。</p><ul><li><a href="https://github.com/terraform-providers/terraform-provider-aws/tree/master/aws" target="_blank" rel="noopener noreferrer">https://github.com/terraform-providers/terraform-provider-aws/tree/master/aws</a></li><li><a href="https://godoc.org/github.com/hashicorp/terraform/helper/schema#Schema" target="_blank" rel="noopener noreferrer">https://godoc.org/github.com/hashicorp/terraform/helper/schema#Schema</a></li><li><a href="https://godoc.org/github.com/hashicorp/terraform/helper/schema#ResourceData" target="_blank" rel="noopener noreferrer">https://godoc.org/github.com/hashicorp/terraform/helper/schema#ResourceData</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="リソース">リソース<a class="hash-link" href="#リソース" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/glossary.html#resource" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/glossary.html#resource</a></p><p>Terraform ではインフラを構成する最小の構成要素を <code>リソース</code> と呼びます。
例えばサーバが 3 台あればそれぞれが別々のリソースと言えます。
リソースごとに設定を記述します。
<code>terraform apply</code> コマンドを実行すると各リソースについて設定と実際のインフラの状態の差分が検知され、リソースごとに CRUD 処理が実行されます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定ファイル">設定ファイル<a class="hash-link" href="#設定ファイル" title="Direct link to heading">​</a></h2><ul><li><a href="https://www.terraform.io/docs/configuration/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/index.html</a></li><li><a href="https://github.com/hashicorp/hcl/blob/hcl2/hclsyntax/spec.md" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/hcl/blob/hcl2/hclsyntax/spec.md</a></li></ul><p>設定ファイルは <a href="https://github.com/hashicorp/hcl" target="_blank" rel="noopener noreferrer">HCL</a> という言語で記述します。
HCL は Hashicorp Configuration Language の略で、 Hashicorp が開発している JSON や YAML のような設定を記述する言語です。</p><p>Terraform v0.12 では HCL の v2 を使います。 v1 は古いので注意してください。</p><p>設定ファイルの拡張子は基本 <code>.tf</code> です。
次のような形でリソースを定義します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># resource "リソースの種類" "リソース名"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">resource "aws_instance" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # 属性名 = 属性値</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ami           = "ami-2757f631"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  instance_type = "t2.micro"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>余談ですが、 <a href="https://github.github.com/gfm/" target="_blank" rel="noopener noreferrer">GFM (GitHub Flavored Markdown)</a> では <code>hcl</code> でシンタックスハイライトができます。</p><p>各リソース定義はパスによって識別されます。
上記のようなシンプルなリソースの定義の場合 <code>リソースの種類.リソース名</code> (<code>aws_instance.example</code>) です。パスは一意でなければいけません。</p><p>設定ファイルは同じ1つのディレクトリに置きます。
<code>terraform plan</code> などのコマンドはカレントディレクトリ直下のファイルしか見ません。</p><p>リソースの属性はリソースの種類によって異なります。
各Provider のドキュメントを参照しましょう。</p><p>例えば AWS の EC2 instance のドキュメントはこちらです。 <a href="https://www.terraform.io/docs/providers/aws/r/instance.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/aws/r/instance.html</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="リソースの属性の参照">リソースの属性の参照<a class="hash-link" href="#リソースの属性の参照" title="Direct link to heading">​</a></h2><p>あるリソースの設定で他のリソースの属性値を参照することが出来ます。</p><p>サンプルを示します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "aws_iam_instance_profile" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # リソース aws_iam_role.example の属性 name の値を参照</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  role = aws_iam_role.example.name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="state">State<a class="hash-link" href="#state" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/state/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/state/index.html</a></p><p>設定ファイルと実際のインフラの差分を検知するには、設定ファイルのリソース定義と実際のインフラのマッピングが必要になります。
設定ファイル上ではリソースはパスによって識別されますが、実際のインフラのリソースはインフラ固有の ID などで識別されます。
設定ファイル上のリソースのパスと、実際のインフラのリソースの ID とのマッピングを保存するストレージが <code>State</code> になります。
ただし State の役割はマッピングだけではありません。詳細は <a href="https://www.terraform.io/docs/state/purpose.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/state/purpose.html</a> を参照してください。
「ストレージ」といいましたがその実態はデフォルトではただの JSON ファイルです。
デフォルトでは <code>terraform apply</code> などを実行すると勝手に <code>terraform.tfstate</code> という名前のファイルがカレントディレクトリに作成、更新されます。
State の保存先は S3 を含め色々サポートされています。</p><p><a href="https://www.terraform.io/docs/backends/types/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/backends/types/index.html</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="発展-state-を持たないツールとの違い">発展: State を持たないツールとの違い<a class="hash-link" href="#発展-state-を持たないツールとの違い" title="Direct link to heading">​</a></h3><p>Terraform の他にもインフラを管理するツールはありますが、その中には State のようなマッピングを持たないものもあります。
マッピングを持たないツールだと、ツールを使わずに作ったリソースがツールによって削除される可能性があります。
一方、 Terraform ではツールを使わずに作ったリソースは変更の対象になりません。
変更の対象にしたい場合はそのリソースの情報を State に追加する必要があります。
ただの JSON ファイルなので手で修正することも出来ますが、 <a href="https://www.terraform.io/docs/commands/import.html" target="_blank" rel="noopener noreferrer">terraform import</a> という専用のコマンドがあるのでそれを使うほうが安全です。</p><p><a href="https://www.terraform.io/docs/import/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/import/index.html</a></p><p>逆に、あまりないケースではありますが、あるリソースについて Terraform で管理するのをやめたい場合、
そのリソースを設定ファイルだけでなく State からも削除する必要があります。
単純に設定ファイルから削除するだけだと、 Terraform によって実際のインフラのリソースが削除されてしまいます。
State から削除するには <a href="https://www.terraform.io/docs/commands/state/rm.html" target="_blank" rel="noopener noreferrer">terraform state rm</a> というコマンドを使います。</p><p>その他 State を管理するためのコマンドが色々あるのでドキュメントを参照してください。</p><p><a href="https://www.terraform.io/docs/commands/state/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/state/index.html</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="発展-remote-state-を使うか否か">発展: Remote State を使うか否か<a class="hash-link" href="#発展-remote-state-を使うか否か" title="Direct link to heading">​</a></h3><p>Terraform を CI/CD によって実行する前提です。
基本的に remote state を使うべきだと思います。</p><p>remote state を使わない場合、 <code>terraform.tfstate</code> を Git で管理することになるでしょう。
その場合、 feature branch の terraform.tfstate と実際のインフラの状態の乖離が起こりえます。
チームの規模が大きく複数の開発が並行して行われれば行われるほど、乖離の弊害が大きくなり、 remote state を使ったほうが良いということになるでしょう。</p><p>また、 CI/CD で更新された <code>terraform.tfstate</code> を commit &amp; push する必要があります。
<code>terraform apply</code> で失敗した場合、一部のリソースの更新には成功し、State が更新されているかもしれません。
<code>terraform apply</code> が失敗しても即座に終了させずに <code>terraform.tfstate</code> を commit &amp; push する必要があります。
これは CI/CD のコードで気をつければ問題ないのでデメリットと言うほどではないですが、昔自分は何度か commit &amp; push し損ねて面倒くさいことになりました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="変数">変数<a class="hash-link" href="#変数" title="Direct link to heading">​</a></h2><ul><li><a href="https://www.terraform.io/docs/glossary.html#variables" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/glossary.html#variables</a></li><li><a href="https://learn.hashicorp.com/terraform/getting-started/variables.html" target="_blank" rel="noopener noreferrer">https://learn.hashicorp.com/terraform/getting-started/variables.html</a></li></ul><p>設定ファイルでは変数が使えます。
変数を使うには宣言が必要です。宣言では型なども指定できます。</p><p><a href="https://www.terraform.io/docs/configuration/types.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/types.html</a></p><p>変数の宣言はつぎのようにします。 <code>.tf</code> のどこに書いても大丈夫です。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># variable "変数名"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">variable "region" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  type    = "string"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  default = "us-east-1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>変数の値の設定は次のようにします。 <code>terraform.tfvars</code> というファイル名に書いておくとコマンド実行時に自動で読み込まれます。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">ami = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "us-east-1" = "ami-abc123"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "us-west-2" = "ami-def456"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>コマンドライン引数で渡すことも出来ます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="provider-の設定">Provider の設定<a class="hash-link" href="#provider-の設定" title="Direct link to heading">​</a></h2><p>Provider を使うには設定が必要です。
設定の属性は Provider によって違います。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># provider "Provider名"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">provider "google" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  project = "acme-app"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  region  = "us-central1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="module">Module<a class="hash-link" href="#module" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/modules/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/modules/index.html</a>
<a href="https://www.terraform.io/docs/configuration/modules.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/modules.html</a></p><p>複数のリソースの設定をまとめて再利用可能な形でパッケージングする仕組みとして Module があります。
リソースが1つだけでも、チーム固有の設定を Module のデフォルト値として設定したり、チームでは使わないリソースの属性を隠蔽したり用途はあるかと思います。</p><p>Module の作り方は通常の Terraform の設定ファイルの記述と同様、 1つのディレクトリ直下にパッケージングするリソースの設定ファイルを記述するだけです。</p><p>Module は次のように使います。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># module "名前"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">module "servers" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # モジュールへのパス</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  source = "./app-cluster"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # モジュールのパラメータ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  servers = 5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Module のパスは <code>module.モジュール名</code> (module.servers) になります。</p><p>Module の <code>source</code> としてはローカルのディレクトリへのパス以外にも様々なものをサポートしています。</p><p><a href="https://www.terraform.io/docs/modules/sources.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/modules/sources.html</a></p><h3 class="anchor anchorWithStickyNavbar_mojV" id="コミュニティの-module">コミュニティの Module<a class="hash-link" href="#コミュニティの-module" title="Direct link to heading">​</a></h3><p>コミュニティによって様々な Module が提供されています。</p><ul><li><a href="https://registry.terraform.io/" target="_blank" rel="noopener noreferrer">https://registry.terraform.io/</a></li><li><a href="https://registry.terraform.io/modules/terraform-aws-modules" target="_blank" rel="noopener noreferrer">https://registry.terraform.io/modules/terraform-aws-modules</a></li><li><a href="https://github.com/terraform-community-modules" target="_blank" rel="noopener noreferrer">https://github.com/terraform-community-modules</a></li><li><a href="https://github.com/terraform-aws-modules" target="_blank" rel="noopener noreferrer">https://github.com/terraform-aws-modules</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="module-化するべきか否か">Module 化するべきか否か<a class="hash-link" href="#module-化するべきか否か" title="Direct link to heading">​</a></h3><p>Go や Python などのプログラミング言語でのモジュール(ライブラリやパッケージ等呼び方は様々ですが)化と比べ、
Terraform の Module 化は慎重でなければなりません。
理由はいくつかありますが、</p><ul><li>Module を変更すると State の変更も必要になる場合もある</li><li>Terraform の設定は中々パワフルだとは思いますが、プログラミング言語に比べると柔軟性が足らず、変更に弱く、複雑になるとメンテナンス性が悪くなります</li></ul><p>偏見かもしれませんが、プログラミング言語に比べると、 Terraform に「精通」している人はそれほど多くないと思います。
初心者は直ぐ Module 化に飛びつくのはやめた方が良いと思います(尤も使ってみないと理解が深まらないという意味では使ったほうが良いですが)。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="output">Output<a class="hash-link" href="#output" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/configuration/outputs.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/outputs.html</a></p><p>Module で定義したリソースの属性は基本的に外部から隠蔽されます。
リソースの属性を参照できるようにするには、次のように個別に Output として宣言する必要があります。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">output "instance_ip_addr" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  value = aws_instance.server.private_ip</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これはモジュールで定義したリソース <code>aws_instance.server</code> の属性 <code>private_ip</code> を Module の属性 <code>instance_ip_addr</code> として外部に公開するという意味です。
Module のパスが module.servers だとすると、 <code>module.servers.instance_ip_addr</code> で参照できます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="data-source">Data Source<a class="hash-link" href="#data-source" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/configuration/data-sources.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/data-sources.html</a></p><p>Data source は Terraform で管理していない(あるいは他の State で管理している)リソースの属性を参照するための仕組みです。</p><p>次のように記述します。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># data "リソースの種類" "リソース名"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">data "aws_ami" "example" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  # リソースを一意に識別するためのクエリ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  most_recent = true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  owners = ["self"]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tags = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Name   = "app-server"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Tested = "true"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Data source では属性によって実際のインフラのリソースを検索します。検索にマッチするリソースは必ず1つでなければならず、
複数マッチしたり1つもマッチしなかったりすると失敗します(厳密には Provider の実装次第ですが)。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="他の-state-で管理されているリソースの属性を-data-source-として参照する">他の State で管理されているリソースの属性を Data source として参照する<a class="hash-link" href="#他の-state-で管理されているリソースの属性を-data-source-として参照する" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/providers/terraform/d/remote_state.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/terraform/d/remote_state.html</a></p><p>他の State で管理されているリソースの属性を Data source を使って参照するために <code>terraform_remote_state</code> があります。
参照するには Module 同様 その属性が Output によって外部に公開されている必要があります。</p><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">data "terraform_remote_state" "vpc" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backend = "remote"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  config = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    organization = "hashicorp"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    workspaces = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name = "vpc-prod"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="workspace">workspace<a class="hash-link" href="#workspace" title="Direct link to heading">​</a></h2><ul><li><a href="https://www.terraform.io/docs/state/workspaces.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/state/workspaces.html</a></li><li><a href="https://blog.mosuke.tech/entry/2018/06/16/terraform-workspaces/" target="_blank" rel="noopener noreferrer">Terraform workspaceを利用して環境毎のリソース名の変更を行う</a></li><li><a href="http://kenzo0107.hatenablog.com/entry/2019/04/17/103558" target="_blank" rel="noopener noreferrer">Terraform 運用ベストプラクティス 2019 ~workspace をやめてみた等諸々~</a></li></ul><p>Terraform には workspace という機能がありますが、こちらの機能は自分は使ったことがないので簡単に触れるだけに留めます。
workspace の代表的なユースケースは production や staging などの異なる環境で同じ設定ファイルを共有しつつ State を switch することだと思います。</p><p>workspace を使わない場合環境ごとにディレクトリ及び設定ファイルを完全に分けることになると思います。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">production/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ec2.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  terraform.tfstate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">staging/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ec2.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  terraform.tfstate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ...</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>workspace を使うと設定ファイルを共有できます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">ec2.tf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">terraform.tfstate.d/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  production/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    terraform.tfstate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  staging/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    terraform.tfstate</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>環境ごとの設定の微妙な違いは設定ファイル内で分岐することになるのでしょう。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="発展-workspace-を使うべきか">発展: workspace を使うべきか<a class="hash-link" href="#発展-workspace-を使うべきか" title="Direct link to heading">​</a></h3><p>workspace を使うべきか否かは意見が分かれている様に思えます。
恐らくユースケースやチームメンバーの Terraform への成熟度にもよるでしょう。</p><p>現状自分は「使わない」というスタンスです。</p><p>自分がこれまで関わってきたチーム事情だと Terraform に全員が精通しているというよりは、むしろ Terraform にそこまで詳しくない人も触ることが多いです。
偏見かもしれませんが、そういうチームは少なくないのではないでしょうか？
そういうチーム状況では、 workspace を使って DRY になるというメリット以上に、 workspace そのものへの学習コストや環境によって設定ファイル内で分岐する学習コストを省き、
Terraform に精通していなくても理解できるくらいシンプルに保つことのほうが大事なのではないかなと思います。</p><p>特に、これまで Terraform を特定のサービス横断的なチームで管理していた状態から各サービスの担当者に ownership を委譲しようとする場合、上述の学習コスト・複雑さが弊害になるのではないかなと感じています。</p><p>ただし、繰り返しになりますが自分は workspace を使ったことがありません。
上記の自分の認識が間違っているかもしれませんし、今後 workspace を使ってみたら考えが変わるかもしれません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-command-の基本的な使い方">Terraform command の基本的な使い方<a class="hash-link" href="#terraform-command-の基本的な使い方" title="Direct link to heading">​</a></h2><p><a href="https://www.terraform.io/docs/commands/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/index.html</a></p><p>設定ファイルを書いた上で基本的なコマンドの使い方について説明します。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-init">terraform init<a class="hash-link" href="#terraform-init" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/init.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/init.html</a></p><p>まず、 <code>terraform init</code> を実行する必要があります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform init</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>terraform init</code> によって、依存する Provider がインストールされたりします。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-fmt">terraform fmt<a class="hash-link" href="#terraform-fmt" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/fmt.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/fmt.html</a></p><p><code>terraform fmt</code> によってコードを整形することが出来ます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform fmt [-check] [-recursive]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>-check</code> をつけると、コードを整形する代わりに、コードが整形されていなかったら exit code が non 0 で終了します。
CI でコードが整形されているかのチェックに使えます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-plan">terraform plan<a class="hash-link" href="#terraform-plan" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/plan.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/plan.html</a></p><p><code>terraform plan</code> によって <code>terraform apply</code> の dry run が出来ます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform plan [-refresh=false]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>実際のインフラは変更されず、 <code>apply</code> を実行した場合にどのような変更が行われるか出力されます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-apply">terraform apply<a class="hash-link" href="#terraform-apply" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/apply.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/apply.html</a></p><p>実際にインフラを設定ファイルに合わせて変更します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform apply [-auto-approve]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>デフォルトでは最初に plan の実行結果が出力されて本当に変更を適用してよいか確認があります。
<code>-auto-approve</code> を指定すると確認を skip 出来ます。</p><p><code>plan</code> に成功しても <code>apply</code> には失敗する場合もあります。
簡単な例としては更新する権限がない場合です。
<code>apply</code> に失敗すると一部のリソースだけ更新されるということは起こりえます。
そうなってもロールバックとかは出来ない(terraform に rollback の機能はない)ので注意してください。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-destroy">terraform destroy<a class="hash-link" href="#terraform-destroy" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/destroy.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/destroy.html</a></p><p>Terraform で作成したインフラを削除します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform destroy</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>恐らく実際の運用でこれを使うことはあまりないと思います。
削除したいなら設定ファイルからそのリソースを消して apply するでしょう。
Terraform の勉強がてら遊びで作ったものを丸っと消すとか主にそういう用途で使われる気がします。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-refresh">terraform refresh<a class="hash-link" href="#terraform-refresh" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/refresh.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/refresh.html</a></p><p>State を実際のインフラの状態に合わせて更新します。
インフラは更新されません。
手動でインフラを変更した場合に、その変更を State に反映させるのに使えます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform refresh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-import">terraform import<a class="hash-link" href="#terraform-import" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/import.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/import.html</a>
<a href="https://www.terraform.io/docs/import/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/import/index.html</a></p><p>Terraform で管理されていないリソースのデータを State にインポートします。
State はリソースパスとインフラのID のマッピングを管理すると言いましたが、 import コマンドの引数ではこの2つを渡すことでマッピングできるようにします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># リソースパス ID</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform import aws_instance.example i-abcd1234</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ちなみに、一部のリソースは import をサポートしてません。
サポートしているかどうかは Provider の実装に依存します。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="terraform-state">terraform state<a class="hash-link" href="#terraform-state" title="Direct link to heading">​</a></h3><p><a href="https://www.terraform.io/docs/commands/state/index.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/commands/state/index.html</a></p><p>State を操作するためのコマンドです。様々なサブコマンドがあります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-の-cicd">Terraform の CI/CD<a class="hash-link" href="#terraform-の-cicd" title="Direct link to heading">​</a></h2><p>terraform apply は原則 CD によって実行されるべきだし、
CI によって <code>terraform fmt -check</code> や <code>terraform plan</code> は実行されるべきだと思っています。</p><p>逆に <code>terraform plan</code> や <code>apply</code> は CI/CD でやってるけど、
<code>terraform state</code> や <code>terraform import</code> はローカルから実行しているというチームも少なくはないのかなという気がしています。</p><p>課題となりうるのは</p><ul><li>Credential の管理</li><li>IP制限</li></ul><p>かなと思います。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="credential-の管理">Credential の管理<a class="hash-link" href="#credential-の管理" title="Direct link to heading">​</a></h3><p>Terraform で使うクレデンシャルは強力な権限を持ちがちなので扱いに注意しないといけません。
権限を絞るのが理想ですが、結構難しかったりします。</p><p>例えば PR の CI では <code>terraform apply</code> を実行しないのであれば、 PR の CI 用に Read Only なクレデンシャルを用意するとかもありかもしれません。</p><p>例えば AWS のインフラ管理を Terraform + CircleCI で行う場合、
AWS のクレデンシャルを CircleCI で参照できるようにする必要があります。
CircleCI では SSH でコンテナにログインできるため、クレデンシャルを盗もうと盗めますし、
CircleCI に限らず悪意のあるコードを CI で実行して外部にクレデンシャルを送ることも出来ます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="ip-制限">IP 制限<a class="hash-link" href="#ip-制限" title="Direct link to heading">​</a></h3><p>CI で Terraform を使う場合、 CI の実行環境からインフラの API にアクセスできる必要があります。
IP 制限をかけている場合、 CI の実行環境からはアクセスできるようにするなどの工夫が必要です。
CI の実行環境の IP range が定まってない場合、話は更に難しくなります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="発展-設定ファイル中で使える関数">発展: 設定ファイル中で使える関数<a class="hash-link" href="#発展-設定ファイル中で使える関数" title="Direct link to heading">​</a></h2><p>設定ファイル内ではビルドイン関数が使えます。
公式ドキュメントを参照してください。</p><p><a href="https://www.terraform.io/docs/configuration/functions.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/functions.html</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="余談-awesome-terraform">余談: awesome-terraform<a class="hash-link" href="#余談-awesome-terraform" title="Direct link to heading">​</a></h2><p><a href="https://github.com/shuaibiyy/awesome-terraform" target="_blank" rel="noopener noreferrer">https://github.com/shuaibiyy/awesome-terraform</a></p><p>Terraform 関連の awesome なツールのリンク集です。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform の State Locking の概要]]></title>
        <id>/terraform-state-locking</id>
        <link href="https://techblog.szksh.cloud/terraform-state-locking"/>
        <updated>2020-01-10T07:18:05.000Z</updated>
        <summary type="html"><![CDATA[Terraform の State Locking という機能の概要について説明します。]]></summary>
        <content type="html"><![CDATA[<p>Terraform の <a href="https://www.terraform.io/docs/state/locking.html" target="_blank" rel="noopener noreferrer">State Locking</a> という機能の概要について説明します。
ただし、自分もちゃんと理解しているわけではないので、推測も混じります。
基本的には公式ドキュメントに書いてある内容なのでそちらをご参照ください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="state-locking-とは">State Locking とは<a class="hash-link" href="#state-locking-とは" title="Direct link to heading">​</a></h2><p><code>terraform plan</code> などのコマンドは State を変更する場合があります。
その処理は atomic ではないため、同時に複数のコマンドが State を書き換えようとすると不整合が生じる可能性があります。</p><hr><p>例えば S3 backend の state を state rm で更新する場合を考えます。
これはコマンド内部で</p><ol><li>現在の State を取得する (READ)</li><li>修正した State を S3 に push する (WRITE)</li></ol><p>という処理を行っているはずであり、複数のコマンドを実行した場合、READ と WRITE の間に他のコマンドによって WRITE されると、その WRITE による変更が消えてしまいます。</p><hr><p>そこで State Locking を使うと各コマンドで State を変更する前に lock を取り、WRITE 後に lock を解除します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="コマンドラインオプション">コマンドラインオプション<a class="hash-link" href="#コマンドラインオプション" title="Direct link to heading">​</a></h2><p>plan, apply, refresh, state rm, state mv, state push には次のようなオプションがあります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">-lock=true          Lock the state file when locking is supported.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-lock-timeout=0s    Duration to retry a state lock.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>-lock</code> はデフォルトで true なので State Locking のことを知らなくても実は State Locking 使ってたということもありえますが、 Backend type によっては State Locking のための設定をしていないと State Locking が無効になっている可能性があります。</p><p>例えば S3 backend で State Locking をするには DynamoDB が必要であり、 DynamoDB の設定 <code>dynamodb_table</code> が設定されていないと State Locking は無効になります。</p><p>また、<code>-lock=false</code> で無効化できますが、公式的に非推奨になります。</p><p><code>-lock-timeout</code> は lock の取得に失敗した場合に何秒後にリトライするかの設定になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="force-unlock">force-unlock<a class="hash-link" href="#force-unlock" title="Direct link to heading">​</a></h2><p>lock の解放に失敗した場合のために、 <a href="https://www.terraform.io/docs/commands/force-unlock.html" target="_blank" rel="noopener noreferrer">force-unlock</a> というコマンドがあります。
何らかのトラブルで lock が解放されない場合に使います。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform force-unlock LOCK_ID</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>例えば plan を実行中にキャンセルすると lock が解放されないことがあるようです。</p><p>lock が解放されていない状態で plan などを実行すると lock の取得に失敗し、次のようなエラーが起こります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">Acquiring state lock. This may take a few moments...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Error: Error locking state: Error acquiring the state lock: ConditionalCheckFailedException: The conditional request failed</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    status code: 400, request id: xxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Lock Info:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ID:        xxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Path:      terraform.tfstate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Operation: OperationTypePlan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Who:       xxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Version:   0.12.13</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Created:   2020-01-09 09:30:37.41120929 +0000 UTC</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Info:      </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform acquires a state lock to protect the state from being written</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">by multiple users at the same time. Please resolve the issue above and try</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">again. For most commands, you can disable locking with the "-lock=false"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">flag, but this is not recommended.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ここで出力される ID を force-unlock の引数として指定します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform force-unlock xxx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Do you really want to force-unlock?</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Terraform will remove the lock on the remote state.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  This will allow local Terraform commands to modify this state, even though it</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  may be still be in use. Only 'yes' will be accepted to confirm.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Enter a value: yes</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Terraform state has been successfully unlocked!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">The state has been unlocked, and Terraform commands should now be able to</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">obtain a new lock on the remote state.</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="s3-backend">S3 backend<a class="hash-link" href="#s3-backend" title="Direct link to heading">​</a></h2><p>State Locking をサポートしているかは Backend type によりますが、 S3 の場合、 DynamoDB を使えばできます。</p><p><a href="https://www.terraform.io/docs/backends/types/s3.html#configuration-variables" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/backends/types/s3.html#configuration-variables</a></p><p>backend の設定で <code>dynamodb_table</code> を設定する必要があります。</p><p><a href="https://www.terraform.io/docs/backends/types/s3.html#dynamodb_table" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/backends/types/s3.html#dynamodb_table</a></p><blockquote><p>dynamodb_table - (Optional) The name of a DynamoDB table to use for state locking and consistency. The table must have a primary key named LockID. If not present, locking will be disabled.</p></blockquote><div class="codeBlockContainer_I0IT language-hcl theme-code-block"><div class="codeBlockContent_wNvx hcl"><pre tabindex="0" class="prism-code language-hcl codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">data "terraform_remote_state" "network" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  backend = "s3"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  config = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bucket = "terraform-state-prod"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    key    = "network/terraform.tfstate"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    region = "us-east-1"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    # state locking の設定</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    dynamodb_table = "???"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>IAMの権限としては <a href="https://www.terraform.io/docs/backends/types/s3.html#dynamodb-table-permissions" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/backends/types/s3.html#dynamodb-table-permissions</a> が必要です。</p><p>DynamoDB のテーブルには <code>LockID</code> という Primary Key が必要です。 型は <code>文字列</code> です。</p><p>そして State Locking を有効にした状態で plan などを実行すると
DynamoDB のテーブルにレコードが State ごとに作られるようです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="state-locking-をすれば安全というわけではない">State Locking をすれば安全、というわけではない<a class="hash-link" href="#state-locking-をすれば安全というわけではない" title="Direct link to heading">​</a></h2><p>State Locking 自体は安全性に寄与する仕組みではありますが、 State Locking さえすれば安全かというとそうではないと思います。</p><p>複数人が同時に plan や apply などを実行する環境では、別のロック機構も必要だと思います。</p><p>詳細はまた別途書こうと思いますが、CI/CD で plan, apply などを実行する場合、 apply 実行中はそれが終わるまで他の plan や apply の実行を wait するような仕組みがないと危険です。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[dd-time - コマンドの実行時間を Datadog に送るツール]]></title>
        <id>/dd-time</id>
        <link href="https://techblog.szksh.cloud/dd-time"/>
        <updated>2019-11-30T04:54:47.000Z</updated>
        <summary type="html"><![CDATA[コマンドの実行時間を Datadog に送る dd-time というツールを作りました。]]></summary>
        <content type="html"><![CDATA[<p>コマンドの実行時間を Datadog に送る <a href="https://github.com/suzuki-shunsuke/dd-time" target="_blank" rel="noopener noreferrer">dd-time</a> というツールを作りました。</p><p>このツールは <a href="https://github.com/yuya-takeyama/circle-dd-bench" target="_blank" rel="noopener noreferrer">circle-dd-bench</a> にインスパイアされていますが、 CircleCI 以外でも需要あると思ったり、他にも幾つか改善したい部分があったので自作することにしました。</p><p>circle-dd-bench については circle-dd-bench の作者が書いたブログ <a href="https://blog.yuyat.jp/post/circle-dd-bench/" target="_blank" rel="noopener noreferrer">https://blog.yuyat.jp/post/circle-dd-bench/</a> も参考にしてください。</p><p>dd-time は Go 製なので <a href="https://github.com/suzuki-shunsuke/dd-time/releases" target="_blank" rel="noopener noreferrer">GitHub Releases</a> からバイナリをダウンロードしてインストールすれば使えます。</p><p>使い方はシンプルで実行時間を計測したいコマンドの前に <code>dd-time --</code> をつけるだけです。
例えば Docker image のビルドの時間を計測したい場合次のような感じになります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ dd-time -t command:docker-build -- docker build .</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Datadog の API key を環境変数 <code>DATADOG_API_KEY</code> として設定する必要があります。
こうすると <a href="https://docs.datadoghq.com/api/?lang=python#post-timeseries-points" target="_blank" rel="noopener noreferrer">Datadog の Post timeseries points API</a> を使い、<code>command_execution_time</code> というメトリックス名(変更可能)でコマンドの実行時間が送られます。</p><p>メトリックスの名前や host, tags はそれぞれ <code>--metric-name (-m)</code>, <code>--host</code>, <code>--tag (-t)</code> で指定できます。
<code>--tag</code> は複数回指定可能で、 <code>key:value</code> というフォーマットで指定します。</p><p>CircleCI で実行した場合、 CircleCI のビルドイン環境変数が tag として勝手に設定されますが、 CircleCI 以外でも使えます。</p><p>dd-time を作る上で意識したことは、<code>透過的にする(元のコードにほとんど影響を与えずに使えるようにする)</code>ということです。
具体的には以下のような点です。</p><ul><li>標準入力をそのままコマンドに渡す</li><li>コマンドの標準出力・標準エラー出力をそのまま出力する</li><li>コマンドの exit code をそのまま dd-time の exit code とする</li><li>Datadog への送信に失敗しても dd-time の exit code は 0 とする
(option で non zero にもできるようにするのもありだが、現状はそうしてない)</li><li>Datadog への送信に失敗した場合のエラーメッセージをファイルに吐き出せる(コマンドの出力と混ざらないようにできる)<ul><li>デフォルトは標準エラー出力だが、 <code>--output (-o)</code> と <code>--apend (-a)</code> オプションで変更できる</li><li><code>--append</code> を指定すると追記モードで出力できる</li></ul></li><li>適切にシグナルハンドリングする(本当に適切と言えるかは分かりませんが)</li></ul><p>以上、簡単ですが dd-time の紹介でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="datadog" term="datadog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[モブレビューやっていきたい]]></title>
        <id>/mobreview</id>
        <link href="https://techblog.szksh.cloud/mobreview"/>
        <updated>2019-11-10T09:31:05.000Z</updated>
        <summary type="html"><![CDATA[最近モブレビュー取り入れたいと感じていて、なんで取り入れたいかなどについて書いてみました。]]></summary>
        <content type="html"><![CDATA[<p>最近モブレビュー取り入れたいと感じていて、なんで取り入れたいかなどについて書いてみました。
モブレビュー自体まだ 2, 3 回しかやってないので説得力にかけますが、ご容赦ください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="想定">想定<a class="hash-link" href="#想定" title="Direct link to heading">​</a></h2><ul><li>チームは 6 人以下</li><li>Pull Request (以下 PR) をマージするには必ず他の誰かが approve しないといけない</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="目的">目的<a class="hash-link" href="#目的" title="Direct link to heading">​</a></h2><ul><li>チーム内の情報共有<ul><li>属人化の解消</li><li>退職や異動などによる情報の喪失(誰も分からない状態)を防ぐ</li><li>チーム外の人とのコミュニケーションにも活用できる</li></ul></li><li>レビュー待ちの短縮</li><li>レビューの品質の改善</li><li>仕事を評価してもらうことで承認欲求を満たす</li><li>オンボーディングの改善<ul><li>レビューを通じて必要な知識を吸収してもらう</li><li>オンボーディングに限ったことではないが、オンボーディングにも有効ではないか</li></ul></li><li>最後までやりきる</li></ul><p>箇条書した内容を補足します。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="情報共有">情報共有<a class="hash-link" href="#情報共有" title="Direct link to heading">​</a></h3><p>属人化の解消は結構重要だと自分は思っていて、特定の人じゃないと出来ないこと、わからないことというのは
ボトルネックや技術的負債だったり、障害対応時に致命的になりかねません(深夜に障害が起こってAさんに聞かないとわからないのに、Aさんと連絡が取れないとか最悪)。
チーム全員とはいかなくても 3 人ぐらいは出来る・分かってる必要があるかなと思います。</p><p>まぁ、当初は 3 人ぐらい分かってても、時間が経って異動やら退職やらで気づいたら分かっている人いなくなってたというのは
ありえなくないので、そういったリスクをどうやって防ぐかというのは考える必要がありますが、今回の話とは外れるので割愛します。</p><p>また、チーム外の人とのコミュニケーションにも活用できると思っていて、
例えばランチや飲み会でチーム外の人とのコミュニケーションを取る際に自分のチームの他の人が対応した件とかが話題に上がったときに
ちゃんと情報共有できてないと、自分は担当外なので分かりませんとなってしまうでしょう。
知っていればむしろ自分から話題にできるかもしれません。
そこから発展して更に新しいタスクの話もできるかもしれません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="レビューの改善">レビューの改善<a class="hash-link" href="#レビューの改善" title="Direct link to heading">​</a></h3><p>せっかくいい仕事をしても中々レビューしてもらえないとなると不満がたまります。
モブレビューを実施することでレビューを促進し、レビュー待ちの時間を短くできることを期待します。
レビューしたくても良くわからなくてレビューできないというパターンもあると思うので、
わからない部分をモブレビューで解消されてレビューが進むと良いですね。</p><p>また、ちゃんと複数人でレビューすることで目先の問題を解決するだけの本質的でない問題解決を防ぐことが出来ることもあると思います。
「いや、それそもそもPRの前提がおかしくない？前提となっている仕様を見直すべきなのでは」
みたいなこともあるかもしれません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="仕事を評価してもらうことで承認欲求を満たす">仕事を評価してもらうことで承認欲求を満たす<a class="hash-link" href="#仕事を評価してもらうことで承認欲求を満たす" title="Direct link to heading">​</a></h3><p>いい仕事したら他の人にも知ってもらいたいというのは自然なことでしょう。
いい仕事を褒めるのは良いチーム・環境であり働きやすさというところにつながるのではないでしょうか。</p><p>ちなみに現職だと Slack で他のチームにも共有して emoji で褒め称えるというのが結構やられていて
気持ちのいい環境だなと思っています。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="オンボーディングへの活用">オンボーディングへの活用<a class="hash-link" href="#オンボーディングへの活用" title="Direct link to heading">​</a></h3><p>そもそもオンボーディングというものをちゃんと受けたのが現職が初めてで、
現職でもオンボーディングについてはまだまだ検討中であり、「何をもってオンボーディングは終わりと言えるのか」みたいな議論が Slack でされてたりして、
自分もよくわかってないのですが、モブレビューがオンボーディングにも活用できるんじゃないかなという気がしています。</p><p>色々なにも分かってない状態の New Joiner でも理解できるように、背景とかを説明したりすることで
会社固有のドメイン知識などを補い、戦力化を促すことが出来るんじゃないかなと思います。
会社固有の略語などが当たり前に使われてたりすると New Joiner には理解できないのですが、そういうのも含めてフォローしてあげる良い機会になると思います。
マイクロサービス化なんかをやっていると New Joiner には名前を聞いただけでは理解できないものも出てきますしね。</p><p>まぁあまり細かな話までしだすとそれはまだ New Joiner には早いということにもなるので、ケースバイケースかもしれません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="最後までやりきる">最後までやりきる<a class="hash-link" href="#最後までやりきる" title="Direct link to heading">​</a></h3><p>PR を投げた後、レビューしてもらえない、説明を書いているのに読んでもらえないといったときに</p><ul><li>自分はやるべきことをやっている</li><li>レビューしない人たちが悪い</li><li>説明を読まない人たちが悪い</li></ul><p>としてそれ以上なにもしないというのはもったいないと思います。
「結果がすべて」だと考えると説明を書いても読んでもらえなかったらそれは書いてないと同じなので
モブレビューという形で読んでもらう努力をするのがより建設的なのでしょう。
モブレビューしてみたら「レビューしようと思ったけど、ここが良くわからなくてやめちゃったんだよね」ということもあったので、
自分の説明も足りてなかったんだなと見直す良い機会にもなります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="解決したい課題">解決したい課題<a class="hash-link" href="#解決したい課題" title="Direct link to heading">​</a></h2><ul><li>他の人が何やってるのかよくわからない</li><li>他の人のをレビューしようとしても良くわからなくてそっとタブを閉じてしまう<ul><li>分からないことを理解する成長チャンスを無駄にしているのでは</li></ul></li><li>レビュー待ちが長い<ul><li>細かく PR を投げたくても前のがマージされてないと先に進めない</li><li>マージされないまま master が更新されて逐一 rebase しないといけない</li></ul></li><li>レビューの品質の低下<ul><li>よくわからないけどマージしてしまえ: レビューの意味がない</li></ul></li><li>issue や PR の説明やコメントが足りてない<ul><li>説明を英語で書かないといけないとかだと、説明不足になりやすい</li><li>モブレビューで口頭で説明してみると、 issue や PR に書いてない情報が出てくる
その情報を追記することで(口頭で説明するだけではだめ。後からその場にいなかった人も見返すもの)改善できる</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="実施方法">実施方法<a class="hash-link" href="#実施方法" title="Direct link to heading">​</a></h2><p>定例を組むのもありですが、個人的には予定を押さえなくても場所を確保できるのなら(フリースペースとかにモニターがあってサッと出来るなら理想的)不定期がいいと思います。
やりたくなったらその旨を Slack でサッと共有し、その場で直ぐできるならやり、
できない場合カレンダー見て空いてそうな枠を見つけて予定を押さえるか、Slackのリマインダーをセットします。
モブレビューで話している内容や、質疑応答などは Slack のスレッドにでもメモっておくと良さそうです。
issue や PR の説明に書いてないことが出てきたら、説明を修正して追記すると良いでしょう。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="定期的に予定をいれる懸念点">定期的に予定をいれる懸念点<a class="hash-link" href="#定期的に予定をいれる懸念点" title="Direct link to heading">​</a></h3><ul><li>定例は少ないほうが良い</li><li>形式的になる</li><li>定例まで待たなくて良いのでは</li><li>定例までレビューしないというモチベーションが働く場合もあるのでは</li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="やりたくなったらやる場合の懸念点">やりたくなったらやる場合の懸念点<a class="hash-link" href="#やりたくなったらやる場合の懸念点" title="Direct link to heading">​</a></h3><ul><li>カレンダーをチェックするのが面倒くさい(コストがかかる)</li><li>人によっては躊躇してしまう</li><li>場所を確保できないかも</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="懸念点">懸念点<a class="hash-link" href="#懸念点" title="Direct link to heading">​</a></h2><ul><li>複数人の時間を拘束して実施することのコスト</li><li>口頭で説明することに甘えてちゃんと issue や PR に書かなくなる<ul><li>レビューの段階で指摘する</li></ul></li><li>場所を押さえられるか<ul><li>会議室足りない問題</li></ul></li><li>モブレビューの意義を共有できるか<ul><li>人によっては時間の無駄と思う人がいてもおかしくない</li><li>不満や提案があったときにちゃんとそれを言える環境でありたい</li></ul></li></ul><p>ちゃんと文章化するのをめんどくさがって口頭での説明で済ましたがるようになったらよろしくないですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="自分の反省点">自分の反省点<a class="hash-link" href="#自分の反省点" title="Direct link to heading">​</a></h2><p>ここまで書いて出てきた自分の反省点としては、 issue や PR の説明でちゃんと Context や Background をもっとちゃんと書かないと駄目かなということです。
口頭で説明する際にはそのへんを最初に意識して話すようにしていますが、説明には書いてないことが少なくないのでちゃんと書くようにしようと思いました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="むすび">むすび<a class="hash-link" href="#むすび" title="Direct link to heading">​</a></h2><p>今回モブレビューについてあれこれ考えてみました。
まだモブレビューは 2, 3 回やった程度なので、ちゃんと取り組んでみて PDCA 回して改善出来たら良いなと思います。
例えば、今の所定期ではやりたくないと思ってますが、やってみたらちゃんと定期じゃないと駄目だったということもあるかもしれませんし、
モブレビューは目的じゃなくて手段なので、他にもっとよい手段があってモブレビュー不要だったということもあるかもしれません。</p><p>やらないと始まらないのでやれたらいいかなと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[go-timeout - command の timeout]]></title>
        <id>/go-timeout</id>
        <link href="https://techblog.szksh.cloud/go-timeout"/>
        <updated>2019-11-04T01:00:21.000Z</updated>
        <summary type="html"><![CDATA[作ったのは 2ヶ月くらい前の話ですが、]]></summary>
        <content type="html"><![CDATA[<p>作ったのは 2ヶ月くらい前の話ですが、
Go の command の timeout を実装するためのライブラリを作ったので紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/go-timeout" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-timeout</a></p><p>基本的には <a href="https://github.com/Songmu/timeout" target="_blank" rel="noopener noreferrer">https://github.com/Songmu/timeout</a> をオススメしますが、これだと上手くいかないパターンがあったので自作しました。</p><p>Go の command の timeout に関しては <a href="https://junkyard.song.mu/slides/gocon2019-spring/#24" target="_blank" rel="noopener noreferrer">https://junkyard.song.mu/slides/gocon2019-spring/#24</a> がとても参考になります。</p><p>上記のスライドでは</p><ul><li>標準ライブラリの <a href="https://golang.org/pkg/os/exec/#CommandContext" target="_blank" rel="noopener noreferrer">exec.CommandContext</a> でも停止できるが、 SIGKILL で強制的に停止することになる<ul><li>子プロセスが停止しない</li></ul></li><li><a href="https://github.com/golang/go/issues/21135" target="_blank" rel="noopener noreferrer">公式見解</a> では、SIGKILL 以外は標準ライブラリではサポートしない。サードパーティでやればよい</li><li><a href="https://github.com/Songmu/timeout" target="_blank" rel="noopener noreferrer">Songmu/timeout</a> 使えば SIGKILL 以外でより安全に停止できる</li></ul><p>ということが丁寧に説明されています。</p><p>自分は <a href="https://github.com/suzuki-shunsuke/cmdx" target="_blank" rel="noopener noreferrer">cmdx</a> という task runner を開発していてその中で task の実行時に timeout を設定出来るようにしました。
当初 <a href="https://github.com/Songmu/timeout" target="_blank" rel="noopener noreferrer">Songmu/timeout</a> を使って実装したのですが、問題があることに気づきました。
それは、 command の中で <a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener noreferrer">fzf</a> を使うと、上手く動かないというものでした。</p><ul><li><a href="https://github.com/suzuki-shunsuke/cmdx/issues/52" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/cmdx/issues/52</a></li><li><a href="https://twitter.com/szkdash/status/1165529415238815745" target="_blank" rel="noopener noreferrer">https://twitter.com/szkdash/status/1165529415238815745</a></li></ul><p>正直この辺の挙動はちゃんと理解できていないのですが、
調べてみると Songmu/timeout だと syscall.SysProcAttr の Setpgid を true に設定していて、そうすると fzf が上手く動かないようでした。</p><p><a href="https://junkyard.song.mu/slides/gocon2019-spring/#48" target="_blank" rel="noopener noreferrer">https://junkyard.song.mu/slides/gocon2019-spring/#48</a></p><p><a href="https://junkyard.song.mu/slides/gocon2019-spring/#45" target="_blank" rel="noopener noreferrer">https://junkyard.song.mu/slides/gocon2019-spring/#45</a></p><p>には timeout の実装方式として</p><ul><li>GNU timeout の場合</li><li>Songmu timeout の場合</li></ul><p>の 2 通り書いてありますが、 suzuki-shunsuke/go-timeout では GNU timeout のパターンで実装しています。 </p><p><a href="https://junkyard.song.mu/slides/gocon2019-spring/#46" target="_blank" rel="noopener noreferrer">https://junkyard.song.mu/slides/gocon2019-spring/#46</a></p><p>に書いてあるとおり、少々乱暴な気もしますが、 <a href="https://github.com/suzuki-shunsuke/cmdx" target="_blank" rel="noopener noreferrer">cmdx</a> で使う分には特に問題ない気がします。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="golang" term="golang"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmdx - task runner]]></title>
        <id>/cmdx</id>
        <link href="https://techblog.szksh.cloud/cmdx"/>
        <updated>2019-08-23T02:35:13.000Z</updated>
        <summary type="html"><![CDATA[最近自作した OSS, cmdx の紹介です。]]></summary>
        <content type="html"><![CDATA[<p>最近自作した OSS, cmdx の紹介です。</p><p><a href="https://github.com/suzuki-shunsuke/cmdx" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/cmdx</a></p><p>cmdx は task runner です。</p><p><code>task runner</code> の定義はググってもわからなかったので、 cmdx を <code>task runner</code> と呼ぶのが適切かわかりませんが、
ここではプロジェクト固有のタスク</p><ul><li>依存するライブラリのインストール</li><li>ビルド</li><li>テスト</li><li>コード整形</li><li>lint</li><li>etc</li></ul><p>などを管理するものとします。</p><p>類似するものとしては以下のようなものがあります。</p><ul><li>Make</li><li><a href="https://docs.npmjs.com/misc/scripts" target="_blank" rel="noopener noreferrer">npm scripts</a></li><li><a href="https://taskfile.dev/" target="_blank" rel="noopener noreferrer">Task</a></li><li><a href="https://github.com/tj/robo" target="_blank" rel="noopener noreferrer">tj/robo</a></li><li><a href="https://github.com/mumoshu/variant" target="_blank" rel="noopener noreferrer">mumoshu/variant</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="使い方">使い方<a class="hash-link" href="#使い方" title="Direct link to heading">​</a></h2><p>詳細は <a href="https://github.com/suzuki-shunsuke/cmdx/blob/master/README.md" target="_blank" rel="noopener noreferrer">README</a> を読んでください。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ cmdx -i</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>で設定ファイルの雛形を生成します。</p><p>そして設定ファイルに task を定義していきます。
設定に関しては <a href="https://github.com/suzuki-shunsuke/cmdx/blob/master/README.md" target="_blank" rel="noopener noreferrer">README</a> を参照してください。</p><p>そうすると <code>cmdx -l</code> でタスクの一覧とその説明が見れます。</p><p>例えば次は <a href="https://github.com/suzuki-shunsuke/cmdx" target="_blank" rel="noopener noreferrer">cmdx</a> のリポジトリでの実行結果です。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ cmdx -l</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">init, i - setup git hooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">coverage, c - test a package (fzf is required)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test, t - test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fmt - format the go code</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">vet, v - go vet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">lint, l - lint the go code</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">release, r - release the new version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">durl - check dead links (durl is required)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ci-local - run the Drone pipeline at localhost (drone-cli is required)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これにより新しくプロジェクトに参画した人もどのような task があるのか直ぐわかります。
例えば test を実行したければ <code>cmdx t</code> を実行すればいいことがわかります。
<code>cmdx help test</code> とすればここのタスクのより詳細なヘルプが見れます。</p><p>ドキュメントに task について書いても、ドキュメントがちゃんと更新されずドキュメントと実態が乖離するなんてことはよくありますが、
cmdx の設定ファイルからヘルプを生成することで乖離しにくくなります(実際に使われてない task が残ってたり、task の description や usage が間違ってたら駄目ですが)。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜ-cmdx-か">なぜ cmdx か<a class="hash-link" href="#なぜ-cmdx-か" title="Direct link to heading">​</a></h2><p>自分は今まで task runner として基本的に npm scripts を使ってきていて、ブログにも書いています。</p><p><a href="https://techblog.szksh.cloud/use-npm/" target="_blank" rel="noopener noreferrer">JS以外でのnpmの活用</a></p><p>しかし、 npm scripts に対しては以下のような不満がありました。</p><ul><li>security alert が定期的に飛んできて対応が面倒くさい<ul><li>これは husky や commitlint などを使っているのが原因なのであって、 npm scripts の問題ではないですが</li></ul></li><li>task に対するヘルプメッセージがない<ul><li>今までは README に書いてたが、本来は help コマンドで自動生成・サポートされるべきだと思っている</li></ul></li></ul><p>他のツールによってこれらの不満は解消できるのですが、他のツールにもそれぞれ微妙に不満があり、
完全に自分のニーズに合うものがなかったので作ることにしました。</p><p>一例ですが、 npm scripts は</p><ul><li>設定ファイル (package.json) を探索</li><li>設定ファイルのあるディレクトリでコマンドを実行</li></ul><p>します。これにより</p><ul><li>カレントディレクトリを意識する必要がない<ul><li>設定ファイルのパスを指定する必要がない</li><li>コマンドの実行ディレクトリがカレントディレクトリに依存しない(逆に言うとカレントディレクトリに依存した処理を実行しにくいという面もありますが)</li></ul></li></ul><p>という良さがあり、 これが意外と他のツールではサポートされてなく(例えば Make だったら <code>-F</code> オプションで Makefile のパスを指定する必要がある)、不満でした。</p><p>また、 Make や Task では task の依存関係を定義し、一回のコマンドで複数のタスクを実行できますが、
cmdx ではそのような機能はサポートしていません。
自分が普段そのような機能をあまり必要としていないからです。</p><p>cmdx では上のような npm scripts の不満を解消するだけでなく、折角なので幾つか細かな機能を追加しています。</p><ul><li>シェルスクリプトだと面倒なオプション引数をサポート</li><li>リッチなプロンプトのサポート</li><li>タイムアウト</li><li>etc</li></ul><p>cmdx から npm scripts に乗り換えた場合の問題点としては husky や commitlint のようなツールが使えなくなることですが、
必須のツールでもないので許容しています。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone Extension のリスク]]></title>
        <id>/risk-of-drone-extension</id>
        <link href="https://techblog.szksh.cloud/risk-of-drone-extension"/>
        <updated>2019-08-14T22:54:23.000Z</updated>
        <summary type="html"><![CDATA[Drone v1 では Extension という仕組みが導入されました。]]></summary>
        <content type="html"><![CDATA[<p>Drone v1 では Extension という仕組みが導入されました。</p><p>これは文字通り Drone を拡張する仕組みで、仕様に従って作れば自由に Drone を拡張できます。</p><p><a href="https://docs.drone.io/extensions/overview/" target="_blank" rel="noopener noreferrer">https://docs.drone.io/extensions/overview/</a></p><p>全てを本体でやるのではなく、拡張する仕組みを提供し、あとはコミュニティに委ねるというのが Drone の一つの方針とも言えると思います。</p><p>Extension は非常に面白い仕組みだと思いますが、 Drone を運用する立場からすると中々頭が痛い仕組みな気がしてて、
自分は導入に対し慎重な立場です。
単なる杞憂で済めば良いのですが、その懸念について書きたいと思います。</p><p>根本は Drone Extension 固有の問題と言うより、一般的な拡張機構全般に言えることだと思います。
ただし、 Drone Extension は全てのビルドに影響を及ぼす、
CI/CDシステムが動かなくなるとサービスのリリースに影響を及ぼしかねないということからよりリスクの高いものになっています。</p><ul><li>本体の drone/drone と比べ、開発は活発ではなく、サードパーティの extension はいつ開発が止まってもおかしくない</li><li>本体の drone/drone と比べ、ドキュメントやサポート体制が貧弱だと思われる(drone に関しては <a href="https://discourse.drone.io" target="_blank" rel="noopener noreferrer">https://discourse.drone.io</a> でサポートされているが、サードパーティの extension では難しい)</li><li>ユーザーからの extension に関する要望を受け付けるようになると、管理者の負担になる</li><li>extension のクォリティはマチマチであり、例外処理が甘かったり、ちゃんとエラーを吐かないものもあるだろう</li><li>トラブルシューティングが難しいと思われる</li><li>extension の仕組み上、extension を必要としないビルドにも影響を及ぼしうる</li><li>一度追加し、依存しだすと消すのが難しくなる</li><li>extension が落ちると全 build に影響するので、耐障害性(冗長化)、モニタリングが必要</li><li>etc</li></ul><p>勿論、上記の懸念点は Extension によって提供される機能とトレードオフであり、
Extension の導入方針は Drone が運用される環境によって大きく依存すると思います。</p><p>例えば全員が顔見知りのような小さな組織で特定のサービス専用に Drone を使っていてかつ Drone の運用体制(人員)に十分余裕があるなら
積極的に Extension を導入しても問題ないかもしれません。</p><p>一方大きな組織で色々なサービスで同じ Drone を使っていてかつ Drone の運用体制が不十分(人手不足)ならば、 Extension の導入には慎重にならざるを得ないのではないかと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone v1 で gRPC が使われなくなった]]></title>
        <id>/drone-v1-deprecate-grpc</id>
        <link href="https://techblog.szksh.cloud/drone-v1-deprecate-grpc"/>
        <updated>2019-08-14T22:39:18.000Z</updated>
        <summary type="html"><![CDATA[v0.8 では server - agent 間の通信に gPRC が使われていましたが、 v1 では使われなくなりました。]]></summary>
        <content type="html"><![CDATA[<p>v0.8 では server - agent 間の通信に gPRC が使われていましたが、 v1 では使われなくなりました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="理由">理由<a class="hash-link" href="#理由" title="Direct link to heading">​</a></h2><ul><li><a href="https://discourse.drone.io/t/curious-about-decision-to-drop-grpc/3987" target="_blank" rel="noopener noreferrer">https://discourse.drone.io/t/curious-about-decision-to-drop-grpc/3987</a><ul><li>gRPC関連のトラブルの問い合わせが多すぎてサポートしきれないので止めた</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="v1-での通信方法">v1 での通信方法<a class="hash-link" href="#v1-での通信方法" title="Direct link to heading">​</a></h2><ul><li><a href="https://discourse.drone.io/t/drone-agents-keep-closing-connections-with-499-code/5197/2" target="_blank" rel="noopener noreferrer">https://discourse.drone.io/t/drone-agents-keep-closing-connections-with-499-code/5197/2</a><ul><li>agent がロングポーリングしている</li><li>30秒後、なんのビルドもなければコネクションを切って、再接続する(張りっぱなしにしてると、LBやファイアウォールにコネクション切られるため)</li></ul></li></ul><hr><p>自分も v0.8 から Drone を運用していて最近 v1 に upgrade しましたが、
v0.8 では gRPC 関連のトラブルが頻発していました。
server のログでは絶えず gRPC 関連のエラーを吐いていましたし、
server - agent 間の TCP connection が切れっぱなしになって戻らくなって agent 数がどんどん減っていったり
ビルドが pending のままになったり、色々ありました。</p><p>関連する issue はあり、幾つか対策を打ってみたりしましたが、結局解決しませんでした。</p><ul><li><a href="https://github.com/drone/drone/issues/2090" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/issues/2090</a></li><li><a href="https://github.com/drone/drone/issues/2246" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/issues/2246</a></li><li><a href="https://github.com/drone/drone/pull/2294" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/pull/2294</a></li><li><a href="https://www.reddit.com/r/droneci/comments/8opifu/drone_stops_working_after_some_little_time/e06d1gn/" target="_blank" rel="noopener noreferrer">https://www.reddit.com/r/droneci/comments/8opifu/drone_stops_working_after_some_little_time/e06d1gn/</a></li></ul><p>それが v1 にアップグレードして gRPC が使われなくなってから解消し、個人的にはとても助かりました。
管理者的にはアップグレードして一番嬉しい点ですね。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
        <category label="grpc" term="grpc"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golang での時刻の扱い方を整理する]]></title>
        <id>/golang-time</id>
        <link href="https://techblog.szksh.cloud/golang-time"/>
        <updated>2019-08-14T11:28:56.000Z</updated>
        <summary type="html"><![CDATA[今更ながら Golang での時刻の扱い方について改めて整理してみました。]]></summary>
        <content type="html"><![CDATA[<p>今更ながら Golang での時刻の扱い方について改めて整理してみました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="まとめ">まとめ<a class="hash-link" href="#まとめ" title="Direct link to heading">​</a></h2><ul><li>time.Local は明示的に設定する(基本UTC)</li><li>DB などには 基本UTC で永続化する</li><li>出力時に必要になったらタイムゾーンを変更する<ul><li>location は出力時に問題になるので出力時に location を明示的に指定する</li><li>逆に言うと出力時以外は問題にならないので無理に location を UTC にしなくても良いかもしれない</li><li>サードパーティ(ex. ORM) に time.Time を渡す場合は location に注意が必要</li></ul></li><li>文字列として時刻の入力を受け付ける場合は location を明示的にセットする</li><li>サードパーティが time.Local に依存する場合、 time.Local を明示的に UTC にしたりする必要があるかもしれない</li><li>アプリケーションで利用する location が分かっている場合、location を取得するヘルパー関数を定義する</li><li><code>time.LoadLocation</code> は環境依存なので予め location が分かっているなら使わないほうがよい</li><li>文字列を time.Time に変換する場合、<code>time.ParseInLocation</code> で Location を指定して time.Time に変換後、time.Time.UTC() で UTC に変換する</li><li>time.Time を文字列に変換する場合、time.In で location を変換後、time.Time.Format で文字列に変換する</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="グローバルな-location">グローバルな location<a class="hash-link" href="#グローバルな-location" title="Direct link to heading">​</a></h2><p><a href="https://golang.org/pkg/time/#Location" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#Location</a></p><blockquote><p>Local represents the system's local time zone.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_mojV" id="location-を設定する">location を設定する<a class="hash-link" href="#location-を設定する" title="Direct link to heading">​</a></h2><p><a href="https://crieit.net/posts/Go-time-LoadLocation" target="_blank" rel="noopener noreferrer">https://crieit.net/posts/Go-time-LoadLocation</a> に書いてあるとおり、
<code>time.LoadLocation</code> を下手に呼び出すと環境によっては <code>unknown time zone</code> エラーが起こるため
次のように time.FixedZone で Location を生成します。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">jp </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">FixedZone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Asia/Tokyo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token operator" style="color:#393A34">*</span><span class="token number" style="color:#36acaa">60</span><span class="token operator" style="color:#393A34">*</span><span class="token number" style="color:#36acaa">60</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>FixedZone という関数名が紛らわしい気もしますが、新しい Location を生成しているだけで副作用はありません。</p><p>ちなみに time.FixedZone に渡す文字列は "foo" みたいな適当な文字列でも動くようです。</p><p><a href="https://golang.org/pkg/time/#FixedZone" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#FixedZone</a></p><p><a href="https://github.com/golang/go/blob/9e277f7d554455e16ba3762541c53e9bfc1d8188/src/time/zoneinfo.go#L263-L308" target="_blank" rel="noopener noreferrer">https://github.com/golang/go/blob/9e277f7d554455e16ba3762541c53e9bfc1d8188/src/time/zoneinfo.go#L263-L308</a></p><p>アプリケーションで利用する location が決まっている場合、次のように location を返すヘルパー関数を用意すると良さそうです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jp </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    jp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">FixedZone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"Asia/Tokyo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">9</span><span class="token operator" style="color:#393A34">*</span><span class="token number" style="color:#36acaa">60</span><span class="token operator" style="color:#393A34">*</span><span class="token number" style="color:#36acaa">60</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">JP</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Location </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> jp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="厳密に-utc-な-location-を取得する">厳密に UTC な Location を取得する<a class="hash-link" href="#厳密に-utc-な-location-を取得する" title="Direct link to heading">​</a></h2><p>厳密に言うと、<code>time.UTC</code> は変更可能なので UTC だとは限りません。
そのため、本来 <code>time.UTC</code> はゲッター関数であるべきだったんじゃないかなという気もします。</p><p>厳密に UTC な Location を取得するにはヘルパー関数を書くと良さそうです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    utc </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Location</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">init</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    utc </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">FixedZone</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"UTC"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">UTC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Location </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> utc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="動作環境に依存しないコードにするために">動作環境に依存しないコードにするために<a class="hash-link" href="#動作環境に依存しないコードにするために" title="Direct link to heading">​</a></h2><p>動作環境によって <code>time.Local</code> の値が違うことで結果が変わってしまう場合があります。
それを防ぐために、プログラムの最初に <code>time.Local</code> を UTC にするという手もありそうです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Local </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">UTC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ただし、それでもグローバル変数である以上、行儀の悪いサードパーティのライブラリによって変更されるかもしれませんし、
必要な箇所で location を明示的に指定してグローバル変数に依存しないようなコードを書くことを心がけたほうが良い気もします。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="文字列を-timetime-に変換する">文字列を time.Time に変換する<a class="hash-link" href="#文字列を-timetime-に変換する" title="Direct link to heading">​</a></h2><ul><li><a href="https://golang.org/pkg/time/#Parse" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#Parse</a></li><li><a href="https://golang.org/pkg/time/#ParseInLocation" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#ParseInLocation</a></li></ul><blockquote><p>ParseInLocation is like Parse but differs in two important ways.
First, in the absence of time zone information, Parse interprets a time as UTC;
ParseInLocation interprets the time as in the given location.
Second, when given a zone offset or abbreviation, Parse tries to match it against the Local location;
ParseInLocation uses the given location.</p></blockquote><p>ParseInLocation と Parse の違い</p><ul><li>文字列に location の情報がない場合、 Parse は UTC として扱う</li><li>zone offset が指定された場合、 Parse は Local location からの offset として扱う<ul><li>ParseInLocation で明示的に Location を指定したほうが良さそう</li></ul></li></ul><p>予め location がわかっている場合 time.ParseInLocation で location を指定して time.Time に変換した後 time.Time.In で UTC にするのが良さそうです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">t</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">ParseInLocation</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"2006-01-02T15:04:05"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"2019-08-13T21:30:00"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> jp</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">t </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">UTC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="timetime-の-location-を変更する">time.Time の Location を変更する<a class="hash-link" href="#timetime-の-location-を変更する" title="Direct link to heading">​</a></h2><p><a href="https://golang.org/pkg/time/#Time.In" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#Time.In</a></p><blockquote><p>In returns a copy of t representing the same time instant,
but with the copy's location information set to loc for display purposes.</p></blockquote><p>time.Time.In は time.Time の Location だけ変更したコピーを返します。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">package</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"fmt"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Local </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">UTC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> time</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Now</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 2019-08-14 12:08:44.150725 +0000 UTC m=+0.000212031</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    t2 </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> t</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">In</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">location</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">JP</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">t2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 2019-08-14 21:08:44.150725 +0900 Asia/Tokyo</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="timetime-を文字列に変換する">time.Time を文字列に変換する<a class="hash-link" href="#timetime-を文字列に変換する" title="Direct link to heading">​</a></h2><p><a href="https://golang.org/pkg/time/#Time.Format" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#Time.Format</a></p><p>time.Time.In で location を変更した後 time.Time.Format で文字列に変換するのが良さそうです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="timenow-の-location">time.Now の location<a class="hash-link" href="#timenow-の-location" title="Direct link to heading">​</a></h2><p>Location は <code>time.Local</code> になります。</p><p><a href="https://golang.org/pkg/time/#Now" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/time/#Now</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="他のパッケージの-location-の扱い">他のパッケージの location の扱い<a class="hash-link" href="#他のパッケージの-location-の扱い" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="log">log<a class="hash-link" href="#log" title="Direct link to heading">​</a></h3><p>log パッケージで出力される時刻のフォーマットと location は log.SetFlags によってある程度変更できます。</p><p>デフォルトは 日時を time.Local で出力します。
log.LUTC をセットすることで UTC になります。</p><ul><li><a href="https://golang.org/pkg/log/#SetFlags" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/log/#SetFlags</a></li><li><a href="https://golang.org/pkg/log/#pkg-constants" target="_blank" rel="noopener noreferrer">https://golang.org/pkg/log/#pkg-constants</a></li></ul><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">SetFlags</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Flags</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">LUTC</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="logrus">logrus<a class="hash-link" href="#logrus" title="Direct link to heading">​</a></h3><p><a href="https://github.com/Sirupsen/logrus" target="_blank" rel="noopener noreferrer">logrus</a> のログの時刻の location も time.Local なようです。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="robfigcron">robfig/cron<a class="hash-link" href="#robfigcron" title="Direct link to heading">​</a></h3><p><a href="https://github.com/robfig/cron" target="_blank" rel="noopener noreferrer">https://github.com/robfig/cron</a></p><blockquote><p>All interpretation and scheduling is done in the machine's local time zone (as provided by the Go time package (<a href="http://www.golang.org/pkg/time" target="_blank" rel="noopener noreferrer">http://www.golang.org/pkg/time</a>).</p></blockquote><p>time.Local なようです。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="go-sql-drivermisql">go-sql-driver/misql<a class="hash-link" href="#go-sql-drivermisql" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/go-sql-driver/mysql#timetime-support" target="_blank" rel="noopener noreferrer">https://github.com/go-sql-driver/mysql#timetime-support</a></li><li><a href="https://www.sambaiz.net/article/189/" target="_blank" rel="noopener noreferrer">https://www.sambaiz.net/article/189/</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="gorm">gorm<a class="hash-link" href="#gorm" title="Direct link to heading">​</a></h3><p><a href="https://github.com/jinzhu/gorm/wiki/How-To-Do-Time" target="_blank" rel="noopener noreferrer">https://github.com/jinzhu/gorm/wiki/How-To-Do-Time</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="golang" term="golang"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone v1 では Jsonnet が extension なしで使える]]></title>
        <id>/drone-jsonnet</id>
        <link href="https://techblog.szksh.cloud/drone-jsonnet"/>
        <updated>2019-08-02T14:02:57.000Z</updated>
        <summary type="html"><![CDATA[Drone では v1 から冗長な YAML を DRY にする一つの手として、 Jsonnet の利用が推奨されています。]]></summary>
        <content type="html"><![CDATA[<p>Drone では v1 から冗長な YAML を DRY にする一つの手として、 Jsonnet の利用が推奨されています。
これについては過去のブログでも触れています。</p><p><a href="https://techblog.szksh.cloud/drone-jsonnet-generator/" target="_blank" rel="noopener noreferrer">https://techblog.szksh.cloud/drone-jsonnet-generator/</a></p><p>しかし、 v1 の rc の時点では Jsonnet の活用には Jsonnet Extension が必要でした。</p><p><a href="https://engineering.linecorp.com/ja/blog/go-oss-ci-cd-platform-drone-1-0-0-rc-1/#title7-1" target="_blank" rel="noopener noreferrer">https://engineering.linecorp.com/ja/blog/go-oss-ci-cd-platform-drone-1-0-0-rc-1/#title7-1</a></p><p>しかし、 v1 の正式版では Jsonnet Extension がなくても Jsonnet が利用できるようになっています。</p><p>まず Drone の管理者側で Drone server に環境変数 <code>DRONE_JSONNET_ENABLED=true</code> を設定する必要があります。</p><p>そうしたら、ユーザー側は次のようにすることで jsonnet が使えます。</p><ol><li>.drone.yml の代わりに .drone.jsonnet をコミットする (.drone.yml は不要)</li><li>各リポジトリの settings の Main &gt; Configuration で設定ファイルのパスを変更する</li></ol><p>こうすることでビルド実行時に自動で Jsonnet が YAML に変換され処理されるようです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="いつから-jsonnet-extension-は不要になったのか">いつから Jsonnet Extension は不要になったのか<a class="hash-link" href="#いつから-jsonnet-extension-は不要になったのか" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/drone/drone/compare/v1.0.0-rc.6...v1.0.0" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/compare/v1.0.0-rc.6...v1.0.0</a></li><li><a href="https://github.com/drone/drone/commit/5013cfa993fa455fc56f10e45b9f36cf1d6dff57" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/commit/5013cfa993fa455fc56f10e45b9f36cf1d6dff57</a></li></ul><p>v1 の rc ではサポートされてませんでしたが、正式版をリリースするタイミングで Jsonnet Extension が不要になっていたようです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="注意点">注意点<a class="hash-link" href="#注意点" title="Direct link to heading">​</a></h2><ul><li>SaaS <a href="https://cloud.drone.io" target="_blank" rel="noopener noreferrer">https://cloud.drone.io</a> は 2019-08-02 時点で未対応</li><li>Jsonnet は pipeline が 1 つでも <code>[]</code> で囲い、配列にする必要がある</li><li>Jsonnet の Imports はサポートしていない</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="リファレンス">リファレンス<a class="hash-link" href="#リファレンス" title="Direct link to heading">​</a></h2><ul><li><a href="https://discourse.drone.io/t/how-to-reduce-yaml-boilerplate/3704" target="_blank" rel="noopener noreferrer">https://discourse.drone.io/t/how-to-reduce-yaml-boilerplate/3704</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Top 10 Most Common Mistakes I’ve Seen in Go Projects を読んでみて]]></title>
        <id>/the-top-10-most-common-mistakes-ive-seen-in-go-projects</id>
        <link href="https://techblog.szksh.cloud/the-top-10-most-common-mistakes-ive-seen-in-go-projects"/>
        <updated>2019-07-21T09:13:53.000Z</updated>
        <summary type="html"><![CDATA[The Top 10 Most Common Mistakes I’ve Seen in Go Projects という記事を読んで面白かったのでメモります。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://itnext.io/the-top-10-most-common-mistakes-ive-seen-in-go-projects-4b79d4f6cd65" target="_blank" rel="noopener noreferrer">The Top 10 Most Common Mistakes I’ve Seen in Go Projects</a> という記事を読んで面白かったのでメモります。
翻訳ではないです。メモなので、原文を読んでください。</p><ol><li>Unknown Enum Value: Unknown であることを表す enum の値は 0 にしよう。値がセットされていない場合に Unknown として扱えるから</li><li>Benchmarking: ベンチマークを取るのは難しい。コンパイラの最適化によってベンチマークの結果が不適切になる場合がある</li><li>Pointers! Pointers Everywhere!: パフォーマンスの観点から基本的にはポインタを使うべきではない。変数を共有する必要がある場合のみ、ポインタを使う</li><li>Breaking a for/switch or a for/select: for, switch が入れ子になっている場合、switch の中で break しても for から抜けられない。抜けたければ labeled break を使う</li><li>Errors Management</li><li>Slice Initialization</li><li>Context Management</li><li>Not Using the -race Option: <code>go test</code> コマンドでは <code>-race</code> オプションをつけよう</li><li>Using a Filename as an Input: 引数としてファイル名を渡すのではなく、 io.Reader や io.Writer を渡そう</li><li>Goroutines and Loop Variables</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="pointers-pointers-everywhere">Pointers! Pointers Everywhere!<a class="hash-link" href="#pointers-pointers-everywhere" title="Direct link to heading">​</a></h2><p>変数はヒープかスタックに割り当てられる。</p><ul><li>スタック: 関数内の変数は、関数が返されると、スタックからポップされる</li><li>ヒープ: 共有変数、グローバル変数</li></ul><p>関数で生成した構造体を返すと、スタックで管理され、返された時点でポップされる。
関数内で生成したポインタを返すと、それは Heap で管理される。
スタックで管理すると、関数が返された時点でポップされてしまい、関数の外でポインタが指す値にアクセスできなくなるため。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getFooValue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> foo </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> result foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Do something</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getFooPointer</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">foo </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> result foo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Do something</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>スタックのほうが効率が良い理由</p><ul><li>ガベージコレクタが不要<ul><li>関数を抜けた時点でスタックからポップされる</li><li>未使用の変数を回収する複雑な処理が不要</li></ul></li><li>スタックの変数は一つの goroutine に属するため、共有のための同期が不要だから</li></ul><p>よって基本的にはポインタを使うべきではない。変数を共有する必要がある場合のみ、ポインタを使う。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="error-management">Error Management<a class="hash-link" href="#error-management" title="Direct link to heading">​</a></h2><ul><li>エラーは一回だけハンドリングされるべき。エラーはロギングされるか、プロパゲートされるべき(ロギングしつつプロパゲートはだめ)</li><li>pkg/errors を使うと根本的なエラーの型を見て条件分岐できる<ul><li>自分が作ってる <a href="https://github.com/suzuki-shunsuke/go-errlog" target="_blank" rel="noopener noreferrer">go-errlog</a> の v0.9.1 だとそれは出来ない。改善すべきか</li></ul></li></ul><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> errors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Cause</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">type</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">default</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">WithError</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Errorf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"unable to server HTTP POST request for customer %s"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> customer</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">ID</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> Status</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">ok</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">db</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">DBError</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">retry</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">customer</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="slice-initialization">Slice Initialization<a class="hash-link" href="#slice-initialization" title="Direct link to heading">​</a></h2><p><a href="https://tour.golang.org/moretypes/11" target="_blank" rel="noopener noreferrer">https://tour.golang.org/moretypes/11</a></p><ul><li>slice には length と capacity がある</li><li>length は slice が保持する要素の数</li><li>capacity は slice の裏にある配列の要素数を slice の最初の要素から数えたもの</li></ul><p><a href="https://golang.org/ref/spec#Making_slices_maps_and_channels" target="_blank" rel="noopener noreferrer">https://golang.org/ref/spec#Making_slices_maps_and_channels</a></p><p>slice の場合</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// length, capacity 共に n</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">T</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> n</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> m</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// length は n, capacity は m</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><a href="https://play.golang.org/p/R1CF1e1K3L6" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/R1CF1e1K3L6</a></p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">a </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 0, 10</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">len</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">cap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 1, 10</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>append</code> はコストが高いからインデックスを指定したほうが良いというが、
<code>make</code> でスライスを生成していれば、<code>append</code> してもそこまでコストは高くない。
若干インデックスを指定したほうが効率が良いが、一貫性という観点では <code>append</code> を使ったほうがよいかもしれない。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="goroutines-and-loop-variables">Goroutines and Loop Variables<a class="hash-link" href="#goroutines-and-loop-variables" title="Direct link to heading">​</a></h2><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">ints </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> ints </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">go</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%v\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これだと全ての goroutine で同じ i を共有してしまう。関数の引数として渡すか、for ループ内の変数として定義する。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">ints </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> ints </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">go</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%v\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">ints </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">{</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> ints </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> i </span><span class="token comment" style="color:#999988;font-style:italic">// 初見だと奇妙に見えるが、正しい。</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">go</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Printf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"%v\n"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="go" term="go"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flute - Golang HTTP client testing framework]]></title>
        <id>/fagott</id>
        <link href="https://techblog.szksh.cloud/fagott"/>
        <updated>2019-07-06T23:20:00.000Z</updated>
        <summary type="html"><![CDATA[2019-07-17 追記]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="2019-07-17-追記">2019-07-17 追記<a class="hash-link" href="#2019-07-17-追記" title="Direct link to heading">​</a></h2><p>プロジェクト名が変わりました</p><p><a href="https://github.com/suzuki-shunsuke/flute/issues/20" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/flute/issues/20</a></p><hr><p>Go の HTTP client のテストフレームワークを作ったので紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/flute" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/flute</a></p><p>執筆時点のバージョンは v0.6.0 です。</p><ul><li>リクエストパラメータのテスト</li><li>HTTP サーバのモッキング</li></ul><p>を目的としています。</p><p>比較的実践的なサンプルとして、ユーザーを作成する簡単な API client とそのテストを書いたので参考にしてください。</p><ul><li><a href="https://github.com/suzuki-shunsuke/flute/blob/master/examples/create_user.go" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/flute/blob/master/examples/create_user.go</a></li><li><a href="https://github.com/suzuki-shunsuke/flute/blob/master/examples/create_user_test.go#L17-L53" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/flute/blob/master/examples/create_user_test.go#L17-L53</a></li></ul><p>元々自分はこの目的のために <a href="https://github.com/h2non/gock" target="_blank" rel="noopener noreferrer">h2non/gock</a> を使っていました。
ただ、 gock だとリクエストがマッチしなかったときに、なぜマッチしないのかがわからず、調査に困るという問題がありました。</p><p>そこで flute では request に対し、matcher と tester という概念を導入し、
matcher でマッチしたリクエストを tester でテストするというふうにしました。
テストでは内部で <a href="https://github.com/stretchr/testify" target="_blank" rel="noopener noreferrer">stretchr/testify</a> の assert を使っており、テストに失敗したときになぜ失敗したのかが分かりやすく出力されるようになっています。</p><p>例えば以下の例は、リクエストの Authorization header にトークンがセットされていなかった場合のエラーメッセージです。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">=== RUN   TestClient_CreateUser</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--- FAIL: TestClient_CreateUser (0.00s)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    tester.go:168:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Error Trace:    tester.go:168</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        tester.go:32</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        transport.go:25</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        client.go:250</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        client.go:174</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        client.go:641</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        client.go:509</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        create_user.go:45</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                        create_user_test.go:56</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Error:          Not equal:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                expected: []string{"token XXXXX"}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                actual  : []string{"token "}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                Diff:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                --- Expected</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                +++ Actual</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                @@ -1,3 +1,3 @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 ([]string) (len=1) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                - (string) (len=11) "token XXXXX"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                + (string) (len=6) "token "</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Test:           TestClient_CreateUser</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                Messages:       the request header "Authorization" should match</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                service: http://example.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                request name: create a user</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>また、当たり前かもしれませんが、モックとしてレスポンスも返します。</p><p>マッチングやテストで使える項目としては</p><ul><li>リクエストパス (ex. "/users")</li><li>method (ex. "GET", "POST")</li><li>クエリパラメータ(パラメータの有無、値)</li><li>ヘッダー(ヘッダーの有無、値)</li><li>リクエストボディ<ul><li>文字列完全一致</li><li>JSONとしての等価性</li></ul></li><li>ユーザー定義のカスタム関数</li></ul><p>などがあります。</p><p>詳細は コード中にコメントを入れているので <a href="https://godoc.org/github.com/suzuki-shunsuke/flute/flute" target="_blank" rel="noopener noreferrer">godoc</a> を読んでください。</p><p>技術的には <a href="https://golang.org/pkg/net/http/#Client" target="_blank" rel="noopener noreferrer">*http.Client</a> の Transport に *flute.Transport を設定することで HTTP サーバのモッキングをしています。</p><p>API のデザイン面で考慮したこととしては、
グローバル変数である http.DefaultClient の変更をライブラリ側でやらないことです。
あくまで http.RoundTripper の実装を提供するだけで、それを http.DefaultClient に設定する場合、それのコントロールはユーザーに任せています。</p><ul><li>ライブラリでグローバル変数の変更を隠蔽し、ユーザーが無意識のうちに変更してたりするのは良くない<ul><li>gock では http.DefaultClient を変更しているが、それを理解しないまま使っているユーザーもいるはず</li><li>グローバル変数の変更には副作用もあるので、ユーザーが理解した上で明示的に行うべきである</li><li>明示的に <code>http.DefaultClient = client</code> のようにユーザーに書かせれば、理解しないまま使うことはないはず</li></ul></li><li>ライブラリの外からも変更できるグローバル変数をライブラリで完全に管理するのは不可能なので、ユーザーに任せる</li></ul><p>以上、簡単ですが自作の OSS <a href="https://github.com/suzuki-shunsuke/flute" target="_blank" rel="noopener noreferrer">flute</a> の紹介でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="golang" term="golang"/>
        <category label="flute" term="flute"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone で「ビルド実行時にパラメータを渡す」っぽいことをする]]></title>
        <id>/how-to-imitate-jenkins-parameterized-build-at-drone</id>
        <link href="https://techblog.szksh.cloud/how-to-imitate-jenkins-parameterized-build-at-drone"/>
        <updated>2019-06-20T08:50:11.000Z</updated>
        <summary type="html"><![CDATA[Jenkins では parameterized build という機能で、ビルド実行時に Web UI からパラメータを指定することができます。]]></summary>
        <content type="html"><![CDATA[<p>Jenkins では parameterized build という機能で、ビルド実行時に Web UI からパラメータを指定することができます。</p><p>Drone では基本的に Git のイベントをフックして動くので「ビルドを実行時に手動でパラメータを設定する」ということは出来ません。</p><p>自分は基本的にできなくても構わないと思っていますが、
こういった機能がないから Drone を使わないという人も中にはいるので、
Drone でもちょっとした工夫でそれっぽいことは出来るんじゃないかと思い、簡単なサンプルを書いてみました。</p><p>一応言っておくと、 Jenkins の parameterized build を完全に代替するようなものではありません。</p><p><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-drone-build-parameter</a></p><p>以下のファイルが必要です。</p><ul><li><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/build_params/params.sh.tpl" target="_blank" rel="noopener noreferrer">build_params/params.sh.tpl</a>: ビルドパラメータを記述するファイルのテンプレート</li><li><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/scripts/deploy.sh" target="_blank" rel="noopener noreferrer">scripts/deploy.sh</a>: デプロイ時に実行するスクリプト</li><li><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/.drone.yml" target="_blank" rel="noopener noreferrer">.drone.yml</a>: Drone の設定ファイル</li></ul><p>スクリプトを実行してデプロイします。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ bash scripts/deploy.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>するとパラメータを記述するファイルがテンプレートから作成され、エディタで開きます。</p><p><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/scripts/deploy.sh#L12-L17" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/scripts/deploy.sh#L12-L17</a></p><p>パラメータを記述し、エディタを閉じます。</p><p>するとそのファイルがコミットされ、新しいタグが作成され、コミットとタグがリモートにプッシュされます。</p><p><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/scripts/deploy.sh#L27-L35" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/scripts/deploy.sh#L27-L35</a></p><p>Drone でタグをプッシュするイベントをフックしてビルドが実行されます。</p><p><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/.drone.yml#L13-L17" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/.drone.yml#L13-L17</a></p><p>ビルドではコミットされたパラメータの設定ファイルを読み込むことでビルドにパラメータを渡せます。</p><p><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/.drone.yml#L10" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/.drone.yml#L10</a></p><p>こうすることでビルドにパラメータを渡すことができます。
パラメータの設定ファイルはコミットされるので Git で管理できるというのも特徴です。</p><p><a href="https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/build_params/2019-07-07T10-04-02JST/params.sh" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example-drone-build-parameter/blob/master/build_params/2019-07-07T10-04-02JST/params.sh</a></p><p>上記のスクリプトではパラメータの設定ファイルとしてシェルスクリプトで環境変数を定義していますが、
シェルスクリプトである必要性はなく、例えば JSON ファイルを記述してビルドで JSON ファイルを読み込んでもよいし、
パラメータを選択させるようなことがしたければ <a href="https://github.com/junegunn/fzf" target="_blank" rel="noopener noreferrer">fzf</a> のようなものを使ってもよいし、
いくらでも改善できます。</p><p>以上、簡単な tips でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone v0.8 の .drone.yml を v1 の .drone.jsonnet に変換するツールを作った]]></title>
        <id>/drone-jsonnet-generator</id>
        <link href="https://techblog.szksh.cloud/drone-jsonnet-generator"/>
        <updated>2019-06-11T22:40:45.000Z</updated>
        <summary type="html"><![CDATA[Drone v0.8 の .drone.yml を v1 の .drone.jsonnet に変換するツールを作ったので紹介します。]]></summary>
        <content type="html"><![CDATA[<p>Drone v0.8 の .drone.yml を v1 の .drone.jsonnet に変換するツールを作ったので紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/drone-jsonnet-generator" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/drone-jsonnet-generator</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="背景">背景<a class="hash-link" href="#背景" title="Direct link to heading">​</a></h2><p><a href="https://docs.drone.io/user-guide/pipeline/migrating/" target="_blank" rel="noopener noreferrer">https://docs.drone.io/user-guide/pipeline/migrating/</a></p><p>Drone は v0.8 から v1 で .drone.yml のフォーマットが大きく変わっています。
Drone v1 ではビルド実行時に自動で変換しているため、v0.8 の .drone.yml でもそのまま動きます(matrix builds も動きます)。</p><p>そのため、Drone v0.8 から v1 に移行する際、すぐに .drone.yml を修正しなくても問題ないのですが、
v1 独自の機能が出てきた場合 v0.8 のフォーマットの場合利用できないかもしれませんし、
いつまでも古いままだと気持ち悪いので出来るならフォーマットを変換したいです。</p><p>drone-cli ではフォーマットを変換する <code>drone convert</code> というコマンドが提供されています。</p><p>ただし、 <code>drone convert</code> は matrix build を multiple pipeline に変換するのですが、
非常に冗長になります。
そのため、<a href="https://jsonnet.org/" target="_blank" rel="noopener noreferrer">jsonnet</a> を利用することが推奨されています。</p><p><a href="https://docs.drone.io/user-guide/pipeline/migrating/" target="_blank" rel="noopener noreferrer">https://docs.drone.io/user-guide/pipeline/migrating/</a></p><blockquote><p>The above syntax can be quite verbose if you are testing a large number of variations.
To simplify your configuration we recommend using jsonnet.</p></blockquote><p>この .drone.jsonnet の生成は <code>drone convert</code> では出来ないですし、手作業になるのですが、結構面倒です。
v0.8 から v1 でフォーマットが変わってますし、jsonnet に馴染みの薄い人も少なくないでしょう。
移行対象のリポジトリが多い場合、非常に苦行になります。</p><p>そこで今回この .drone.jsonnet を生成するツールを開発しました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="使い方">使い方<a class="hash-link" href="#使い方" title="Direct link to heading">​</a></h2><p>非常にシンプルです。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ drone-jsonnet-generator gen [--source .drone.yml] [--target .drone.jsonnet] [--stdout]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>を実行すると .drone.yml から .drone.jsonnet を生成します。</p><p>例えば</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">pipeline</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> golang</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">GO_VERSION</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> echo hello</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">services</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">database</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">DATABASE</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">matrix</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">include</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">GO_VERSION</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1.4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">DATABASE</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">5.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">GO_VERSION</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1.4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">DATABASE</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">6.5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">GO_VERSION</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1.3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">DATABASE</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> mysql</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">5.5</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>から</p><div class="codeBlockContainer_I0IT language-jsonnet theme-code-block"><div class="codeBlockContent_wNvx jsonnet"><pre tabindex="0" class="prism-code language-jsonnet codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">local pipeline(GO_VERSION, DATABASE) = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "kind": "pipeline",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "name": "'GO_VERSION:' + GO_VERSION + ' DATABASE:' + DATABASE",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "platform": {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "arch": "amd64",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "os": "linux"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "services": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "image": "${DATABASE}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": "database",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "pull": "default"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "steps": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "commands": [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        "echo hello"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "image": "golang:${GO_VERSION}",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "name": "build",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      "pull": "default"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">};</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">local args = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "DATABASE": "mysql:5.5",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "GO_VERSION": "1.4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "DATABASE": "mysql:6.5",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "GO_VERSION": "1.4"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "DATABASE": "mysql:5.5",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "GO_VERSION": "1.3"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  pipeline(arg.GO_VERSION, arg.DATABASE) for arg in args</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><strong>残念ながら生成された jsonnet はそのままでは使えません。修正が必要です。</strong>
それでも一から .drone.jsonnet を書くよりは圧倒的に効率が良いです。</p><ul><li>pipeline 中の変数が <code>${変数名}</code> となっているので直す (<code>"golang:${GO_VERSION}"</code> -&gt; <code>"golang:" + GO_VERSION</code>)</li><li>pipeline name が <code>"</code> で囲まれてるので取り除く (<code>"'GO_VERSION:' + GO_VERSION + ' DATABASE:' + DATABASE"</code> -&gt; <code>'GO_VERSION:' + GO_VERSION + ' DATABASE:' + DATABASE</code>)</li></ul><p>あと、一部のコードを JSON として生成しているので、jsonnet としては多少綺麗ではない(フィールドが<code>"</code>で囲まれてたりする)ですが、実用上特に問題ないと思います。</p><p>ちなみに上の例では matrix build の <code>include</code> が使われていますが、使っていない場合にも対応してますし、
<code>include</code> が使われていない場合、若干生成されるコードのテンプレートが違います。</p><p>なお、今回のツールの対象になる .drone.yml は matrix build を使っているのが前提になります。
matrix build が使われていないとエラーを返します。
matrix build を使っていないのであれば jsonnet を使う必要性が弱いですし、 <code>drone convert</code> で変換すれば良い気がします。</p><p>以上、自作のOSSの紹介でした。
Drone v0.8 から v1 への移行で困っている人は是非使ってみてください。
快適な Drone ライフを。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[.drone.jsonnet と .drone.yml を比較する Drone plugin を作った]]></title>
        <id>/drone-plugin-jsonnet-check</id>
        <link href="https://techblog.szksh.cloud/drone-plugin-jsonnet-check"/>
        <updated>2019-05-31T23:34:10.000Z</updated>
        <summary type="html"><![CDATA[久しぶりに Drone plugin を作ったので紹介します。]]></summary>
        <content type="html"><![CDATA[<p>久しぶりに <a href="https://docs.drone.io/plugins/" target="_blank" rel="noopener noreferrer">Drone plugin</a> を作ったので紹介します。</p><p><a href="https://www.github.com/suzuki-shunsuke/drone-plugin-jsonnet-check" target="_blank" rel="noopener noreferrer">https://www.github.com/suzuki-shunsuke/drone-plugin-jsonnet-check</a></p><p>.drone.jsonnet から .drone.yml を生成していて、両方を Git で管理している場合に、
.drone.jsonnet と .drone.yml の状態が一致しているかテストするための plugin です。</p><p>Drone v1 では matrix builds が廃止され、multiple pipeline が導入されました。
matrix builds を <code>drone convert</code> コマンドで multiple pipeline に変換すると、pipeline の数が多いほど冗長でメンテナンス性が悪くなります。
そこで公式では <a href="https://jsonnet.org" target="_blank" rel="noopener noreferrer">jsonnet</a> で記述して .drone.yml に変換する方法が推奨されています。</p><p><a href="https://docs.drone.io/user-guide/pipeline/migrating/" target="_blank" rel="noopener noreferrer">https://docs.drone.io/user-guide/pipeline/migrating/</a></p><blockquote><p>To simplify your configuration we recommend using jsonnet.</p></blockquote><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ drone jsonnet --format --stream</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>jsonnet から yaml への変換は <a href="https://docs.drone.io/extend/config/jsonnet/" target="_blank" rel="noopener noreferrer">Jsonnet extension</a> を使うと Drone がビルド実行時に自動で変換してくれるので .drone.yml を管理する必要はなくなりますが、
使っていない場合、 .drone.jsonnet と .drone.yml を Git で管理し、自前で変換してコミットする必要があります。
この作業をなにかしら自動化しないと .drone.jsonnet と .drone.yml に不整合が生じることもあり得ると思います。</p><ul><li>.drone.jsonnet を更新したけど .drone.yml を更新し忘れる</li><li>.drone.yml を直接更新してしまった</li></ul><p>そこで CI で不整合が生じていないかテストするための plugin を作りました。</p><p>最初は plugin ではなく、ただのサンプルコードとして公開しました。</p><p><a href="https://github.com/suzuki-shunsuke/drone-jsonnet-convert-test" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/drone-jsonnet-convert-test</a></p><p>しかし、折角なので plugin にしました。</p><p>やっていることは単純で、 .drone.jsonnet から YAML を生成し、 .drone.yml と diff を取っているだけです。</p><p>使い方は README を見れば分かると思いますが、</p><p><code>drone jsonnet</code> コマンドのオプションを plugin のパラメータとして渡せます。</p><div class="codeBlockContainer_I0IT language-jsonnet theme-code-block"><div class="codeBlockContent_wNvx jsonnet"><pre tabindex="0" class="prism-code language-jsonnet codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  kind: "pipeline",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name: "test",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  steps: [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      name: "test .drone.yml",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      image: "suzukishunsuke/jsonnet-check:v1.1.1-v0.1.0",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      settings: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        format: true,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ drone exec</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:0] + drone jsonnet --format --target /tmp/.drone.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:1] + diff .drone.yml /tmp/.drone.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:2] --- .drone.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:3] +++ /tmp/.drone.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:4] @@ -12,5 +12,4 @@</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:5]    settings:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:6]      format: true</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:7]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:8] -</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[test .drone.yml:9]  ...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2019/06/01 00:33:27 test .drone.yml : exit code 1</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>シェルスクリプトで実装しました。
テストでは <a href="https://github.com/bats-core/bats-core" target="_blank" rel="noopener noreferrer">bats</a> を使っています。</p><p>以上、簡単ですが、自作 Drone plugin の紹介でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[go-jsoneq - 2つの値がJSONとして等しいか比較するGoライブラリ]]></title>
        <id>/go-jsoneq</id>
        <link href="https://techblog.szksh.cloud/go-jsoneq"/>
        <updated>2019-05-23T02:43:18.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/suzuki-shunsuke/go-jsoneq]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/suzuki-shunsuke/go-jsoneq" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-jsoneq</a></p><p>2つの値がJSONとして等しいか比較するGoライブラリを開発したので紹介します。</p><p>「2つの値がJSONとして等しい」とは、2つの値をそれぞれJSON文字列に変換したら、2つが表現するデータがおなじになるという意味です。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">struct</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Foo </span><span class="token builtin">string</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">`json:"foo"`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    Foo</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bar"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>と</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">map</span><span class="token punctuation" style="color:#393A34">[</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">]</span><span class="token keyword" style="color:#00009f">interface</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"foo"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bar"</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>を JSON に変換したらともに</p><div class="codeBlockContainer_I0IT language-json theme-code-block"><div class="codeBlockContent_wNvx json"><pre tabindex="0" class="prism-code language-json codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token property" style="color:#36acaa">"foo"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"bar"</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>になりますね。</p><p>json.Marshaler のテストや、
実際の JSON 文字列から構造体を定義したときにちゃんと定義できているかチェックするのに使えると思います。</p><p>jsoneq.Equal でやっていることは単純です。</p><ol><li>json.Marshal で []byte に変換</li><li>json.Unmarshal で []byte を map, array と primitive な型からなるオブジェクト(?)に変換</li><li>reflect.DeepEqual で比較</li></ol><p>引数が []byte の場合は 1 は飛ばします。</p><p>GoDoc やサンプルを見れば使い方は簡単にわかると思います。</p><p>以上、簡単ですが、自作ライブラリの紹介でした。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="golang" term="golang"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[durl - 壊れたURLを検知するCLIツール]]></title>
        <id>/durl</id>
        <link href="https://techblog.szksh.cloud/durl"/>
        <updated>2019-04-28T12:25:00.000Z</updated>
        <summary type="html"><![CDATA[結構前に開発したツールですが、まだ記事にしてなかったので紹介します。]]></summary>
        <content type="html"><![CDATA[<p>結構前に開発したツールですが、まだ記事にしてなかったので紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/durl" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/durl</a></p><p>ファイル中の URL が壊れていないかチェックするツールです。
ファイル中の URL を抽出し、HTTPリクエストを投げてステータスコードが 2xx でないものがあった場合、異常終了します。</p><p>なお、ページ内リンク(アンカー)が壊れているものについては検知できません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="インストール">インストール<a class="hash-link" href="#インストール" title="Direct link to heading">​</a></h2><p>Go製で、バイナリを GitHub Releases で公開しています。</p><p><a href="https://github.com/suzuki-shunsuke/durl/releases" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/durl/releases</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="docker-イメージ">Docker イメージ<a class="hash-link" href="#docker-イメージ" title="Direct link to heading">​</a></h2><p><a href="https://quay.io/repository/suzuki_shunsuke/durl" target="_blank" rel="noopener noreferrer">https://quay.io/repository/suzuki_shunsuke/durl</a></p><p>busybox ベースの Docker イメージも提供しています。
CI で使うのに便利です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="使い方">使い方<a class="hash-link" href="#使い方" title="Direct link to heading">​</a></h2><p><code>durl init</code> で設定ファイル <code>.durl.yml</code> を生成します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ durl init</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>durl check</code> に対象ファイルパスのリストを標準入力として渡してください。
<code>find</code> コマンドなどと組み合わせると良いです。</p><p><a href="https://github.com/suzuki-shunsuke/go-errlog/blob/v0.9.0/scripts/durl.sh#L9" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-errlog/blob/v0.9.0/scripts/durl.sh#L9</a></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">find . \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -type d -name node_modules -prune -o \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -type d -name .git -prune -o \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -type d -name vendor -prune -o \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -type f -print | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  grep -v package-lock.json | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  grep -v Gopkg.toml | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  grep -v Gopkg.lock | \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  durl check || exit 1</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>壊れた URL が見つかったら ファイルのパス、URL、HTTPのステータスコードを標準エラー出力します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ echo bar.txt | durl check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[bar.txt] https://github.com/suzuki-shunsuke/dead-repository is dead (404)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="無視するドメイン">無視するドメイン<a class="hash-link" href="#無視するドメイン" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/durl/issues/11" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/durl/issues/11</a></p><p>これらは無視します。</p><ul><li>example.com, example.org, example.net</li><li>localhost</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="設定">設定<a class="hash-link" href="#設定" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/durl#configuration" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/durl#configuration</a></p><ul><li>ignore_urls: 無視するURL(完全一致)のリスト</li><li>ignore_hosts: 無視するドメイン(完全一致)のリスト</li><li>http_method: HTTPリクエストのメソッド<ul><li>head,get: HEADリクエストに失敗したらGETリクエスト</li><li>head: HEADリクエスト</li><li>get: GETリクエスト</li></ul></li><li>max_request_count: 同時に並列でリクエストする最大数</li><li>max_failed_request_count: 最大の失敗URL数。これを超えると即時異常終了する</li><li>http_request_timeout: HTTPリクエストのタイムアウト</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="ci-に組み込む">CI に組み込む<a class="hash-link" href="#ci-に組み込む" title="Direct link to heading">​</a></h2><p>ドキュメントやブログをGitHubなどでホスティングしている場合、CIに組み込むことも出来ます。</p><ul><li><a href="https://github.com/suzuki-shunsuke/go-errlog/blob/v0.9.0/.drone.yml#L35-L38" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-errlog/blob/v0.9.0/.drone.yml#L35-L38</a></li><li><a href="https://github.com/suzuki-shunsuke/go-errlog/blob/v0.9.0/scripts/durl.sh#L9" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-errlog/blob/v0.9.0/scripts/durl.sh#L9</a></li></ul>]]></content>
        <category label="oss" term="oss"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[毎週30分の技術共有会]]></title>
        <id>/2019-knowledge-share-meeting</id>
        <link href="https://techblog.szksh.cloud/2019-knowledge-share-meeting"/>
        <updated>2019-03-17T04:47:40.000Z</updated>
        <summary type="html"><![CDATA[自分が最近職場で行っている技術共有の取り組みについて紹介したいと思います。]]></summary>
        <content type="html"><![CDATA[<p>自分が最近職場で行っている技術共有の取り組みについて紹介したいと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="背景">背景<a class="hash-link" href="#背景" title="Direct link to heading">​</a></h2><p>これまで自分は積極的に自分にとって新しい技術を取り入れてサービスの品質の向上に繋げてきました。
ただし、それらの技術に関して周りに十分に共有できていなかった側面がありました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="やっていること">やっていること<a class="hash-link" href="#やっていること" title="Direct link to heading">​</a></h2><p>毎週30分決まった時間にスライドを使って発表しています。
対象は同じ部署の希望者です。
枠は30分ですが、実質話しているのは20分くらいな気がします。
k8sのハンズオン的なこともやりました(そのときは30分で終わらないので2回に分けてやりました)。</p><p>話したいことはたくさんあるのですが、とりあえず大きなトピックとして以下の3つに絞っています。</p><ol><li>k8s(Rancher): オーケストレーション (いまここ)</li><li>Drone: CI/CD</li><li>Graylog: ログ収集</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="これまで話したこと話す予定のこと">これまで話したこと・話す予定のこと<a class="hash-link" href="#これまで話したこと話す予定のこと" title="Direct link to heading">​</a></h2><p>k8s の初心者が k8s を本番運用を視野に入れつつ検証環境で使ってみるところまでを目指して話しています。</p><ol><li>なぜ k8s を使うのか(部署のコンテキストに合わせて導入意義を説明)</li><li>k8s のリソース(Pod, Service, Deployment, etc) について</li><li>k8s, Rancher ハンズオン(2回) 簡単なアプリケーションをデプロイしてみたり</li><li>Logging (いまここ)</li><li>モニタリング</li><li>IP制限のかかった外部サービスへアクセスする方法</li></ol><h2 class="anchor anchorWithStickyNavbar_mojV" id="毎週30分というペース感について">毎週30分というペース感について<a class="hash-link" href="#毎週30分というペース感について" title="Direct link to heading">​</a></h2><p>以下のようなことを配慮しました。</p><ul><li>集中力が続くこと<ul><li>60分は長すぎる</li></ul></li><li>持続可能であること<ul><li>1, 2 回やっただけでは意味がない</li><li>30分だけなら参加しやすい</li><li>準備のコストも現実的な範囲</li><li>30分と短めなので毎週やる。隔週とかだと頻度が少なすぎるし、1回飛ぶと1ヶ月空いてしまう</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="これまでの結果">これまでの結果<a class="hash-link" href="#これまでの結果" title="Direct link to heading">​</a></h2><p>特に大きな成果があるわけではないですが、
k8sに興味を持ちk8sを検証環境で使ってくれる人が出てきました。
共有会がk8s を触るきっかけになったのだとしたらそれだけでもやってよかったと思います。</p><p>また、自分自身学ぶこともありました。
Logging に関して自分は今まで Sidecar pattern を使っていたのですが、Cluster Level Logging への移行を検討するきっかけになりました。</p><p>今後もこの取組を(無理のない範囲で)続けていきたいと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="job" term="job"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rancherでusername が重複してログインできなくなった場合の解消方法]]></title>
        <id>/rancher-duplicated-user-name</id>
        <link href="https://techblog.szksh.cloud/rancher-duplicated-user-name"/>
        <updated>2019-03-16T12:17:05.000Z</updated>
        <summary type="html"><![CDATA[先日起こった Rancher のトラブルの解消方法について紹介したいと思います。]]></summary>
        <content type="html"><![CDATA[<p>先日起こった Rancher のトラブルの解消方法について紹介したいと思います。
Rancher のバージョンは v2.1.6 です。
admin ユーザーでログインしようとしたところ、エラーが起こりました。
最初パスワードが間違っているのかと思い、パスワードリセットしたものの、解消しませんでした。</p><p><a href="https://rancher.com/docs/rancher/v2.x/en/faq/technical/#how-can-i-reset-the-admin-password" target="_blank" rel="noopener noreferrer">https://rancher.com/docs/rancher/v2.x/en/faq/technical/#how-can-i-reset-the-admin-password</a></p><p>エラーメッセージをよく見ると 500 エラーでした。そこで rancher のコンテナのログを見ました。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">[ERROR] API error response 500 for POST /v3-public/localProviders/local?action=login. Cause: found more than one users with username admin</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>username が <code>admin</code> のユーザーが複数人いるからログインに失敗しているようです。
であれば、ユーザーを rename ないし delete すれば解消しそうです。
しかし Admin 権限を持っているのが admin しかいないため、ユーザーを rename したり delete するのが難しいです。</p><p>どうすればよいかと思って調べてたところ
rancher のコンテナ内で kubectl コマンドを使うことで Rancher の Custom Resource を操作できそうなことを知りました。</p><p><a href="https://qiita.com/yamamoto-febc/items/498b911611dd25351ad7" target="_blank" rel="noopener noreferrer">https://qiita.com/yamamoto-febc/items/498b911611dd25351ad7</a></p><p>そこで 2 人いる <code>admin</code> の片方を rename することで解消しました。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># rancher のコンテナに入る</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ docker exec -ti rancher bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># CRDの一覧</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get crd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ユーザー一覧</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get users.management.cattle.io -o yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># rename する user をファイルに書き出す</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ kubectl get users.management.cattle.io/&lt;id&gt; -o yaml &gt; /tmp/user.yaml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># vi がコンテナにないため sed で対応</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ sed -e "s/username: admin/username: admin2/" /tmp/user.yaml | kubectl apply -f -</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="rancher" term="rancher"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Goの設定管理で viper の代わりに confita を使う]]></title>
        <id>/use-confita</id>
        <link href="https://techblog.szksh.cloud/use-confita"/>
        <updated>2019-02-16T09:38:45.000Z</updated>
        <summary type="html"><![CDATA[Golang の設定管理のライブラリといえば viper が有名ですが、]]></summary>
        <content type="html"><![CDATA[<p>Golang の設定管理のライブラリといえば <a href="https://github.com/spf13/viper" target="_blank" rel="noopener noreferrer">viper</a> が有名ですが、
<a href="https://github.com/heetch/confita" target="_blank" rel="noopener noreferrer">confita</a> も良さそうだったので紹介したいと思います。</p><p>confita の機能としては以下のようなものがあります。</p><ul><li>構造体に設定をマッピング</li><li>flag や環境変数、設定ファイルに対応</li><li>複数の設定ファイルに対応</li></ul><p>構造体に設定をマッピングすることで、<a href="https://github.com/go-playground/validator" target="_blank" rel="noopener noreferrer">https://github.com/go-playground/validator</a> のようなライブラリを使って設定のバリデーションが出来ます。</p><p>また viper は <a href="https://github.com/spf13/viper/tree/v1.3.1#reading-config-files" target="_blank" rel="noopener noreferrer">v1.3.1</a> の時点で複数の設定ファイルを扱いにくいです。</p><blockquote><p>Viper can search multiple paths, but currently a single Viper instance only supports a single configuration file.</p></blockquote><p>k8s で ConfigMap と Secret を設定ファイルとして扱う場合、複数のファイルを扱えないと不便です。
その点 confita は複数の設定ファイルを問題なく扱えます。</p><p>以下はフラグで指定した複数の設定ファイルから設定を読み込む簡単なサンプルです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"context"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"gopkg.in/go-playground/validator.v9"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/heetch/confita"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/heetch/confita/backend"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token string" style="color:#e3116c">"github.com/heetch/confita/backend/file"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag </span><span class="token string" style="color:#e3116c">"github.com/spf13/pflag"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">loadConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Config</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cps </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> flag</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">StringSliceP</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"config"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"configuration file path"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    flag</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Parse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    fileBackends </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">backend</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Backend</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">_</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> p </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">range</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain">cps </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        fileBackends </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fileBackends</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> file</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewBackend</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">p</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    loader </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> confita</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewLoader</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">fileBackends</span><span class="token operator" style="color:#393A34">...</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cfg </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> Config</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain">LogLevel</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"info"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// default value</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> loader</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Load</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">ctx</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;</span><span class="token plain">cfg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> cfg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    validate </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> validator</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">New</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> validate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Struct</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">cfg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> cfg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> cfg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>以上、簡単な紹介でした。
viper 以外のライブラリを探している人は試してみてください。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="golang" term="golang"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[JS以外でのnpmの活用]]></title>
        <id>/use-npm</id>
        <link href="https://techblog.szksh.cloud/use-npm"/>
        <updated>2019-02-14T12:34:22.000Z</updated>
        <summary type="html"><![CDATA[npm は Node.js のパッケージマネージャーですが、自分はJS以外のプロジェクトでも使えると思っています。]]></summary>
        <content type="html"><![CDATA[<p>npm は Node.js のパッケージマネージャーですが、自分はJS以外のプロジェクトでも使えると思っています。
実際、Goのアプリケーション、OSS、ansible role, playbook など種類を問わず、自分が管理している多くのリポジトリで使っています。
ただ、GoのOSSで npm 使っているのは自分以外で見たことはないですし、
正直あまり賛同はされないかなと思いますが、こういう考え方もあると思っていただけたらと思います。</p><p>npm を使う理由は</p><ul><li>Node製のツールを使うため</li><li>npm scripts を使うため (今回書きたいのはこっち)</li></ul><p>の2つあります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="node製のツール">Node製のツール<a class="hash-link" href="#node製のツール" title="Direct link to heading">​</a></h2><ul><li><a href="https://github.com/typicode/husky" target="_blank" rel="noopener noreferrer">husky</a>: Git Hookを設定</li><li><a href="https://conventional-changelog.github.io/commitlint/#/" target="_blank" rel="noopener noreferrer">commitlint</a>: commit メッセージのlint</li><li><a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener noreferrer">standard-version</a>: コミットログによって Change Log を生成</li></ul><p>などを使っています。
Nodeはバージョンの変化が速く、互換性が壊れたりとかも多い印象ですが、
グローバルにインストールしなくてもリポジトリごとに install 出来る(package.jsonで管理できる)のでその点は(特にチーム開発では)良いと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="npm-scripts">npm scripts<a class="hash-link" href="#npm-scripts" title="Direct link to heading">​</a></h2><p>npm scripts によってそのリポジトリの開発に使うコマンド群を管理するということを自分はしています。</p><p><a href="https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/package.json" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/package.json</a></p><p>なにもツールを使わない場合に比べ、こうすることでチーム全体でコマンドを統一できますし、一連のコマンドをスクリプト化して npm scripts で実行できるようにするなど、自動化も促進されます。</p><p>ごく簡単な自動化の例ですが、tag を打つと同時にソースコード中のバージョン番号を更新するのを <code>npm run tag v1.1.0</code> といったコマンドで出来るようにしています。
こうすることで tag とversionコマンドで出力されるバージョンが違うなんてことを防ぐことが出来ます。</p><p><a href="https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/scripts/tag.sh" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/scripts/tag.sh</a></p><p>また、オプションによって動作が変わるようなコマンドは npm scripts によって実行することでオプションを統一できます。
例えば <code>gofmt</code> は <code>-s</code> オプションの有無で結果が変わります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="make-でいいのでは">Make でいいのでは<a class="hash-link" href="#make-でいいのでは" title="Direct link to heading">​</a></h2><p>npm scripts ではなくて Make のほうがいいんじゃないのという意見もあるかと思います。</p><ul><li>npm が特定の言語のパッケージマネージャーなのに対し、Makeはより汎用的なツールなので、Node以外ではMakeのほうが適切では</li><li>Makeのほうがnpm scriptsより多機能<ul><li>依存関係のあるタスクを管理する場合はMakeのほうが良い</li></ul></li><li>package.jsonはjsonなのでコメントを書けないのが不便</li></ul><p>ただ、Makeよりnpm scriptsのほうが良いと感じている部分が少なからずあります。</p><ul><li>Makeには派生がある(BSD, GNU, etc)</li><li>Makeは複雑すぎる(1冊の本になるくらい)<ul><li>npm scripts は機能が少ない分、とてもシンプル</li></ul></li><li>npm scripts はカレントディレクトリに依存しない(package.jsonがあるディレクトリから実行される)<ul><li>MakeではカレントディレクトリにMakefile がない場合、Makefileのパスを指定する必要がある</li></ul></li><li>Makeは引数が渡しづらい(make FOO=foo みたいに引数名を指定する必要がある)</li></ul><p>そのため、自分は npm scripts を使っています(huskyとかを使うからというのもありますが)。</p><p>それ以外のツールとの比較はしていません。
npm はかなり一般的なツールであり、そのへんのツールよりは導入障壁が低いと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="npm-scripts-の関数エイリアス">npm scripts の関数・エイリアス<a class="hash-link" href="#npm-scripts-の関数エイリアス" title="Direct link to heading">​</a></h2><p>npm scripts をよく使う場合、関数やエイリアスを設定すると便利です。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">nx() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  npm --silent run $1 -- ${@:2}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">alias npm="npm --silent"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>--silent</code> オプションは、ログレベルの設定です。 <a href="https://docs.npmjs.com/misc/config#loglevel" target="_blank" rel="noopener noreferrer">https://docs.npmjs.com/misc/config#loglevel</a>
ログレベルを特に指定しないと、Nodeに関するログも出力されてしまい、見通しが悪くなります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ /usr/local/bin/npm run vet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; @ vet /Users/suzuki-shunsuke/repos/src/github.com/suzuki-shunsuke/gomic</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&gt; go vet ./...</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># github.com/suzuki-shunsuke/gomic/internal/usecase/gencmd/output</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">internal/usecase/gencmd/output/output.go:9:14: undefined: imports</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! code ELIFECYCLE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! errno 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! @ vet: `go vet ./...`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! Exit status 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! Failed at the @ vet script.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR! A complete log of this run can be found in:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">npm ERR!     /Users/suzuki-shunsuke/.npm/_logs/2019-02-14T22_44_50_065Z-debug.log</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>--silent</code> をつけるとすっきりします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ /usr/local/bin/npm --silent run vet</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># github.com/suzuki-shunsuke/gomic/internal/usecase/gencmd/output</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">internal/usecase/gencmd/output/output.go:9:14: undefined: imports</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ただこのオプションつけると、npm scripts で間違ったコマンドを指定してもなんのエラーも出力してくれなくなるので注意してください。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="npm" term="npm"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go の好きなところ]]></title>
        <id>/golang-good-point</id>
        <link href="https://techblog.szksh.cloud/golang-good-point"/>
        <updated>2019-02-10T08:49:58.000Z</updated>
        <summary type="html"><![CDATA[自分は 2017/8頃(曖昧)からメインで書く言語を Python から Go に変更しました。]]></summary>
        <content type="html"><![CDATA[<p>自分は 2017/8頃(曖昧)からメインで書く言語を Python から Go に変更しました。
Goを書き始めて割と早い段階でGoが一番好きになりました。
そこでなんで Go が好きなのかということを頑張って言語化しようと思います。</p><p>若干他の言語と比較する部分もありますが、決して他の言語をディスったり、
他の言語より優れているということが言いたいわけではないのでご了承ください。</p><ul><li>依存するものが小さく、バイナリ1つインストールするだけで良い<ul><li>Prometheus の exporter とかインストールするの簡単</li><li>Docker Imageも最小限になる</li></ul></li><li>静的型付け<ul><li>ビルド出来ている時点で一定の信頼性が担保されている</li><li>よく知らないコードを読んだり修正するときとかだいぶ有り難い</li></ul></li><li>GoDocが素晴らしい<ul><li>何もしなくてもライブラリのドキュメントが出来上がっている</li></ul></li><li>ライブラリの公開が容易<ul><li>GitHubに公開するだけ</li><li>npm や pypi のようなレジストリがないので楽</li></ul></li><li>go test とか go vet, gofmt みたいに標準ツールが揃っている</li><li>コーディング規約で悩む必要がない</li><li>lintツールが充実している<ul><li>gometalinter とか使っておけば OK</li><li>lintできる環境を構築するのにそこまで頑張らなくて良い</li></ul></li><li>エラーハンドリングが暗黙的に省略できないので信頼性が高い<ul><li>Goのエラーハンドリング嫌いって人もいるし、v2で改善されるって話も聞くけど、自分はむしろ好き(面倒なのは理解できるけど)</li></ul></li><li>言語仕様がシンプル(客観的な根拠はないし、難しい部分もあるけど、そんな気がする)<ul><li>メタプログラミング使った、魔術的なコードになりにくい</li></ul></li><li>interface 使ってコードを疎結合にするのが書いてて気持ちいい</li><li>並列処理が書きやすい</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="golang" term="golang"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[go-error-handling-logging-practice v0.2]]></title>
        <id>/golang-logging-error-handling-practice-0.2.0</id>
        <link href="https://techblog.szksh.cloud/golang-logging-error-handling-practice-0.2.0"/>
        <updated>2019-02-01T13:26:13.000Z</updated>
        <summary type="html"><![CDATA[以前 Golang のロギング・エラーハンドリングについて書きました。]]></summary>
        <content type="html"><![CDATA[<p>以前 Golang のロギング・エラーハンドリングについて書きました。</p><ul><li><a href="https://suzuki-shunsuke.github.io/golang-logging-error-handling-practice/" target="_blank" rel="noopener noreferrer">https://suzuki-shunsuke.github.io/golang-logging-error-handling-practice/</a></li><li><a href="https://github.com/suzuki-shunsuke/go-error-handling-logging-practice" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-error-handling-logging-practice</a></li></ul><p>それを少し v0.1 から v0.2 に互換性を壊す形でアップデートしようかと思います。
本記事ではその変更点について書きます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="変更点">変更点<a class="hash-link" href="#変更点" title="Direct link to heading">​</a></h2><p><strong>関数のエラーに情報を付与する責務を関数に割り当てていたものを、呼び出し元に割り当てるようにします。</strong></p><p>具体的には元々</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createUser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> age </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> errlog</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Wrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">checkName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> logrus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Fields</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"age"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> age</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"failed to create a user"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>だったものが</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createUser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> age </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> errlog</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Wrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">checkName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"user name is invalid"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="変更理由">変更理由<a class="hash-link" href="#変更理由" title="Direct link to heading">​</a></h2><p>メタ情報のフィールド名はコンテキストに依存します。
上記の例だとユーザー名というメタ情報のフィールド名は <code>name</code> より <code>user_name</code> や <code>admin_name</code>, <code>owner_name</code> としたほうが適切かもしれません。それは関数内部では分からず、呼び出し元でないと分かりません。呼び出し元でないとフィールド名の衝突が避けられないこともあるでしょう。</p><p>メッセージに関しても同様のことが言えます。
また、元々 v0.1 ではユーザーが定義した関数と</p><ul><li>標準関数やサードパーティのライブラリなど、プロジェクト外部で定義された関数</li><li>interface の関数やメソッド</li></ul><p>を区別し、前者では関数側でエラーに情報を付与させる一方、後者では呼び出し元で情報を付与させるというふうにしていました。</p><p>v0.2 では両者を区別せず、どちらの場合でも呼び出し元に付与させるというふうにすることでよりルールがシンプルになります。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="golang" term="golang"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Terraform Providerで import を実装する方法]]></title>
        <id>/terraform-provider-graylog-import</id>
        <link href="https://techblog.szksh.cloud/terraform-provider-graylog-import"/>
        <updated>2019-01-25T13:38:28.000Z</updated>
        <summary type="html"><![CDATA[terraform provider graylog で alert condition と stream rule の import を実装しました。]]></summary>
        <content type="html"><![CDATA[<p>terraform provider graylog で alert condition と stream rule の import を実装しました。</p><ul><li><a href="https://github.com/suzuki-shunsuke/go-graylog/pull/59" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/pull/59</a></li><li><a href="https://github.com/suzuki-shunsuke/go-graylog/pull/60" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/pull/60</a></li></ul><p>そこで import を実装する方法を紹介したいと思います。</p><p>terraform でリソースをimportするにはリソースがimportをサポートしている必要があります。
<a href="https://godoc.org/github.com/hashicorp/terraform/helper/schema#Resource" target="_blank" rel="noopener noreferrer">schema.Resource の Importer フィールド</a>ですね。リソースがIDだけでGet出来る場合、<a href="https://godoc.org/github.com/hashicorp/terraform/helper/schema#ImportStatePassthrough" target="_blank" rel="noopener noreferrer">schema.ImportStatePassthrough</a>を使えば終わりです。
一方、Graylogのalert condition や stream rule はIDだけでなく、stream id も必要になります。
terraform import コマンドは1つの引数しか取らないため、サポートできないのでは？と以前まで思っていました。
そういった場合、次のようにStateFuncを実装すればサポートできます。</p><p><a href="https://github.com/suzuki-shunsuke/go-graylog/pull/59/commits/baee1165f49d2bc21b6ea7551ceff6b7daf01543#diff-f41be2a3640efd12ad4e808d77c5c8d5" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/pull/59/commits/baee1165f49d2bc21b6ea7551ceff6b7daf01543#diff-f41be2a3640efd12ad4e808d77c5c8d5</a></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain"># "/" で区切って stream id と ID を渡す</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ terraform import graylog_alarm_callback.test 5bb1b4b5c9e77bbbbbbbbbbb/5c4acaefc9e77bbbbbbbbbbb</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>区切り文字は何でも良いのでしょうが、公式のprovider が "/" で区切っていたのでそれに従うことにしました。</p><p><a href="https://www.terraform.io/docs/providers/google/r/spanner_database.html#import" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/providers/google/r/spanner_database.html#import</a></p><p><a href="https://godoc.org/github.com/hashicorp/terraform/helper/schema#ImportStatePassthrough" target="_blank" rel="noopener noreferrer">https://godoc.org/github.com/hashicorp/terraform/helper/schema#ImportStatePassthrough</a> の実装を見てみれば分かりますが、
StateFunc の中では GET API を叩いてリソースを取得したりはしません。
<code>terraform import</code> コマンドの標準出力を見ると分かりますが refresh を実行しているのでそこでGETしているようです。
StateFunc は *schema.ResourceData の配列を返しますが、これは1度のGETで複数のリソースを取得するようなAPIをサポートするためのようです。</p><p>以上、terraform import の実装方法について紹介しました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="terraform" term="terraform"/>
        <category label="graylog" term="graylog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GithubをFree Planにダウングレードした]]></title>
        <id>/downgrade-github-plan</id>
        <link href="https://techblog.szksh.cloud/downgrade-github-plan"/>
        <updated>2019-01-20T03:27:26.000Z</updated>
        <summary type="html"><![CDATA[GitHub のプラン体系が変わり、無料プランでも無制限でprivate repositoryが作れるようになりました。]]></summary>
        <content type="html"><![CDATA[<p>GitHub のプラン体系が変わり、無料プランでも無制限でprivate repositoryが作れるようになりました。</p><p><a href="https://github.blog/2019-01-07-new-year-new-github/" target="_blank" rel="noopener noreferrer">https://github.blog/2019-01-07-new-year-new-github/</a></p><p>そこで無料プランにダウングレードすることにしました。</p><ul><li><a href="https://help.github.com/articles/downgrading-your-github-billing-plan/" target="_blank" rel="noopener noreferrer">https://help.github.com/articles/downgrading-your-github-billing-plan/</a></li><li><a href="https://blog.jnito.com/entry/2019/01/09/081913" target="_blank" rel="noopener noreferrer">https://blog.jnito.com/entry/2019/01/09/081913</a></li></ul><p>無料プランではwikiはpublic repositoryでしか使えないので、
private repository の wiki を 移行することにしました。</p><p>private なソースコード(サービス)のためのwikiではなく、
個人的なメモが書いてあるだけだったので移行することに特に問題はありませんでした。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="全-private-repository-の-wiki-を-clone">全 private repository の wiki を clone<a class="hash-link" href="#全-private-repository-の-wiki-を-clone" title="Direct link to heading">​</a></h2><p>そこでまずはそういった wiki を clone して一つのリポジトリにまとめることにしました。</p><p><a href="https://github.com/suzuki-shunsuke/foo" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/foo</a> の wiki は
<a href="https://github.com/suzuki-shunsuke/foo.wiki" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/foo.wiki</a> で clone できます。</p><p>次のようなコマンドを実行し、private repositoryのwikiを全部cloneしました。</p><p><a href="https://developer.github.com/v3/repos/#list-your-repositories" target="_blank" rel="noopener noreferrer">https://developer.github.com/v3/repos/#list-your-repositories</a></p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">curl "https://api.github.com/user/repos?access_token=$GITHUB_TOKEN&amp;visibility=private" | jq -r '.[].html_url' | xargs -I{} -n 1 git clone {}.wiki</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>wikiが存在しないものに関しては clone に失敗します。
API で wiki のリストが取得できると良かったんですが、
wikiに関するAPIはなさそうです。</p><p>また <code>/user/repos</code> API のレスポンスの <code>has_wiki</code> はwikiが存在しなくても、wikiが無効化されてなければ true なようです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="wiki-を-notable-に移植">wiki を notable に移植<a class="hash-link" href="#wiki-を-notable-に移植" title="Direct link to heading">​</a></h2><p>clone した wiki を <a href="https://github.com/fabiospampinato/notable" target="_blank" rel="noopener noreferrer">notable</a> に移植します。</p><p>notable は <a href="https://www.moongift.jp/2019/01/notable-%E6%B7%BB%E4%BB%98%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%82%E4%BD%BF%E3%81%88%E3%82%8Bmarkdown%E8%A8%98%E6%B3%95%E3%81%AE%E3%83%A1%E3%83%A2/" target="_blank" rel="noopener noreferrer">moon gift で最近紹介されていて良さそうだった</a>ので使ってみます。</p><p>Hugo に移植しても良かったのですが notable が気になったので notable にしました。
notable を使ってみてダメそうだったら Hugo も検討します。</p><p>Hugo に比べてnotableが良いところは</p><ul><li>シンタクスハイライト</li><li>tagによる絞り込み</li><li>検索</li></ul><p>がデフォルトで(特に手を加えたりしなくても)いい感じに使えることです。</p><p>notable の data directory を private repository で管理します(Dropbox などのクラウドストレージで管理しても良いと思います)。</p><p>専用の private repository を1つ作成し、data directory を作成し、notable の設定で作成したdata directory をnotable の data directory にします。</p><p>notable の data directory にはバイナリではなく、plain text として wiki が作られるようなので移植も header の部分を notable に合わせて data directory に放り込むだけで良いので簡単でした。</p><p>header はこんな感じです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">---</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">title: Ansible action plugin について</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">tags: [ansible]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">---</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>意外と移行対象のwikiが少なかったので1, 2時間で終わりました。
終わったあとプランを無料プランに変更して作業は終了しました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go におけるエラーハンドリングとロギングのプラクティス]]></title>
        <id>/golang-logging-error-handling-practice</id>
        <link href="https://techblog.szksh.cloud/golang-logging-error-handling-practice"/>
        <updated>2018-12-25T12:51:41.000Z</updated>
        <summary type="html"><![CDATA[2018-12-30 追記]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_mojV" id="2018-12-30-追記">2018-12-30 追記<a class="hash-link" href="#2018-12-30-追記" title="Direct link to heading">​</a></h2><p>この記事を元にドキュメントを書いてみました。</p><p><a href="https://github.com/suzuki-shunsuke/go-error-handling-logging-practice" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-error-handling-logging-practice</a></p><p>追記ここまで</p><hr><p>Go でエラーハンドリングとロギングをしてきて自分の中で固まりつつあるプラクティスを明文化します。
明文化することで以下のことを目指します。</p><ul><li>迷いをなくす</li><li>コードの一貫性を保つ</li><li>コーディング規約とすることでレビューの品質を上げる(自動化は出来ないけど)</li><li>コードの品質を上げる(コードがゴチャつかなくなる)</li><li>適切にエラーをロギングする(必要十分な情報をログとして残す)</li></ul><p>またエラーハンドリングとロギングのためのライブラリを自作しているのでそれも紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/go-errlog" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-errlog</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="ロギングに関する関連記事">ロギングに関する関連記事<a class="hash-link" href="#ロギングに関する関連記事" title="Direct link to heading">​</a></h2><p>この記事を書く前に軽くググってみただけでちゃんと読んでないのですが、
興味のある人は読んでみてください。</p><ul><li><a href="https://www.loggly.com/blog/think-differently-about-what-to-log-in-go-best-practices-examined/" target="_blank" rel="noopener noreferrer">https://www.loggly.com/blog/think-differently-about-what-to-log-in-go-best-practices-examined/</a></li><li><a href="https://dave.cheney.net/2015/11/05/lets-talk-about-logging" target="_blank" rel="noopener noreferrer">https://dave.cheney.net/2015/11/05/lets-talk-about-logging</a></li><li><a href="https://postd.cc/go-best-practices-2016/#logging-and-instrumentation" target="_blank" rel="noopener noreferrer">https://postd.cc/go-best-practices-2016/#logging-and-instrumentation</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="ログレベルは分ける">ログレベルは分ける<a class="hash-link" href="#ログレベルは分ける" title="Direct link to heading">​</a></h2><p>ログレベルでwarningとかいらないという意見もありますが、自分は必要だと思っています。
自分は以下のログレベルを使い分けます。</p><ul><li>debug: あまり使わない。調査目的で一時的に埋め込むログ。調査が終わったら出力しないようにする。一時的でないものはinfoにする</li><li>info: エラーでないログ。イベント、処理の開始時や終了を記録するのに使うことが多い</li><li>warn: 4xx系のエラー。それが起こっただけではアラートを飛ばさないが、数が通常時より多い場合はバグかUIに問題があってユーザーが間違えやすくなっている可能性があるのでアラートを飛ばす</li><li>error: 5xx系のエラー。アラートを飛ばす(閾値は調整)</li><li>fatal: 処理継続が不可能な致命的なエラー。システムを止める</li></ul><p>書いてから思いましたが、これに関しては標準的な使い分けのルールがありそうですね(要調査)。。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="logrus-を使ってログを構造化する">logrus を使ってログを構造化する<a class="hash-link" href="#logrus-を使ってログを構造化する" title="Direct link to heading">​</a></h2><p>前提としてwebシステムやバッチシステムなどを想定しています。CLIツールならば話は変わるでしょう。
JSONフォーマットで出力してfluentdでElasticsearchにフォワードするのが個人的によくあるパターンです。</p><p>go-errlogもlogrusの使用を前提としています。</p><p>ロギングのライブラリは他にも色々あるので、logrusで満足できない人は以下から探してみるとよいでしょう。</p><p><a href="https://github.com/avelino/awesome-go#logging" target="_blank" rel="noopener noreferrer">https://github.com/avelino/awesome-go#logging</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="エラーログは中央集権的に-main-に近い所で出力する">エラーログは中央集権的に main に近い所で出力する<a class="hash-link" href="#エラーログは中央集権的に-main-に近い所で出力する" title="Direct link to heading">​</a></h2><p>エラーログをどこで出力するかですが、原則中央集権的に main に近い所で出力します。
因みに中央集権的という表現は echo の centralized error handling からもじっています。</p><p><a href="https://echo.labstack.com/guide/error-handling" target="_blank" rel="noopener noreferrer">https://echo.labstack.com/guide/error-handling</a></p><p>error が発生してもすぐログを吐くのではなく、error を関数の戻り値として返し、ロギングする責務を親に委譲します。
Goでは以下のようなイディオムがよく見られますね。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> err</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="ロギングに必要な情報を戻り値のerrorに含める">ロギングに必要な情報を戻り値のerrorに含める<a class="hash-link" href="#ロギングに必要な情報を戻り値のerrorに含める" title="Direct link to heading">​</a></h2><p>上記のコードで問題なのは、エラーに関する情報が欠損することがあることです。</p><p>これに関しては以下の記事が参考になります。</p><p><a href="https://deeeet.com/writing/2016/04/25/go-pkg-errors/" target="_blank" rel="noopener noreferrer">https://deeeet.com/writing/2016/04/25/go-pkg-errors/</a></p><p>エラーに関する情報には2種類あると個人的に考えていて「メッセージ」と「メタ情報」なんて風に脳内で呼んでたりします。</p><ul><li>メッセージ: エラーの原因を示すhuman readable なテキスト(<a href="https://github.com/pkg/errors" target="_blank" rel="noopener noreferrer">pkg/errors</a>はこれに対応している)<ul><li>リストになる</li></ul></li><li>メタ情報: エラーに関する構造化されたデータ<ul><li>ハッシュになる</li></ul></li></ul><p>例えば foo というユーザー名が既に使われていてユーザーの作成に失敗した場合</p><ul><li>メッセージ<ul><li>username is already used</li><li>invalid username</li><li>failed to create a user</li></ul></li><li>メタ情報<ul><li>username: foo</li></ul></li></ul><p>と言った感じになります。
メッセージにメタ情報を含めて <code>"foo" is invalid username</code> といった風にも出来ますが、そうすると検索・集計しづらかったり、メッセージの生成に一手間かかったりするのでメッセージにはメタ情報を含めません。</p><p>pkg/errors だとメタ情報には対応できないので自分でライブラリを作りました。</p><p><a href="https://github.com/suzuki-shunsuke/go-errlog" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-errlog</a></p><p>こんな感じになります。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> errlog</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Wrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> logrus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Fields</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"username"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"foo"</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"failed to create a user"</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="error-に含める情報の責務">error に含める情報の責務<a class="hash-link" href="#error-に含める情報の責務" title="Direct link to heading">​</a></h2><p>上記のように error に情報を含める場合、どこまで含めるかというのが問題になります。
ここでプラクティスとして、
<strong>関数がerrorを返す場合、その関数がもっている情報は全て含める責務があり、
逆に子関数から返ってきたerrorには子関数に渡っている情報が含まれているので呼び出し元で付与する必要はない</strong>というふうにしています。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">func</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createUser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name </span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> age </span><span class="token builtin">int</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">checkName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> errlog</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Wrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> logrus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Fields</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"age"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> age</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"failed to create a user"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>つまり上のコードでは子関数に渡っているメタ情報<code>name</code>や、<code>invalid username</code> のようなメッセージを <code>errlog.Wrap</code> に渡す必要はありません。
上記の例だとエラーに関係ない <code>age</code> も渡す必要はないのではないかとも考えられますが、原則ログに残すこととします。</p><p>ただし、子関数が標準関数やサードパーティのライブラリなど、プロジェクト外部で定義された関数であれば話は別です。
それらがどのようなエラーを返すかは保証がありません。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">filename</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> errlog</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Wrap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">err</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> logrus</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">Fields</span><span class="token punctuation" style="color:#393A34">{</span><span class="token string" style="color:#e3116c">"filename"</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> filename</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"failed to open a file"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"failed to create a user"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>上記の例だと、<code>os.Open</code>に渡したメタ情報 <code>filename</code> や os.Openに失敗したことを示す <code>failed to open a file</code> といったメッセージも<code>errlog.Wrap</code>に渡しています。</p><p><code>errlog.Wrap</code> は複数のメッセージを渡せるようになっています。
メッセージの順番は左からイベントが発生した順になるようにします。
上記の例だと「ファイルのオープンに失敗」した結果、「ユーザの作成に失敗」するという順序になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="エラーのロギングはシンプルに">エラーのロギングはシンプルに<a class="hash-link" href="#エラーのロギングはシンプルに" title="Direct link to heading">​</a></h2><p>go-errlogではシンプルにロギングを記述できます。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">logger </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> errlog</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewLogger</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// err != nil なら logging する</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// err がメタ情報を持ってたら logrusで構造化してロギングする</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// メッセージも pkg/errors のように一つのテキストに連結してロギング</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">logger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Fatal</span><span class="token punctuation" style="color:#393A34">(</span><span class="token function" style="color:#d73a49">createUser</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"foo"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="その他-go-errlog-の機能">その他 go-errlog の機能<a class="hash-link" href="#その他-go-errlog-の機能" title="Direct link to heading">​</a></h2><p>メタ情報やメッセージによって条件分岐したり出来るようにヘルパー関数を幾つか提供しています。</p><ul><li>CheckField</li><li>HasField</li><li>HasMsg</li></ul><p>詳細は<a href="https://godoc.org/github.com/suzuki-shunsuke/go-errlog" target="_blank" rel="noopener noreferrer">GoDoc</a>やソースコードを見てください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最後に">最後に<a class="hash-link" href="#最後に" title="Direct link to heading">​</a></h2><p>色々書いてしまいましたが、一番言いたかったことは</p><blockquote><p><strong>関数がerrorを返す場合、その関数がもっている情報は全て含める責務があり、
逆に子関数から返ってきたerrorには子関数に渡っている情報が含まれているので呼び出し元で付与する必要はない</strong>というふうにしています。</p><p>ただし、子関数が標準関数やサードパーティのライブラリなど、プロジェクト外部で定義された関数であれば話は別です。</p></blockquote><p>の部分です。この辺は元々自分の中でルールが決まってなくてずっとモヤモヤしてて、
コードを書くたびにぶれてたのですが、「こうすればいけるんじゃないか」と思いつき、その実装を補助するライブラリを開発し、
実践したところ今の所そこそこうまく行っています。
ただまだ日が浅いので少しずつブラッシュアップされていく部分もあると思いますが、
その場合でも「なんとなく」ではなく、可能な限り明文化していくことで、迷いをなくし、コードとログの品質を上げていきたいと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="golang" term="golang"/>
        <category label="logging" term="logging"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraylogのAlertの課題]]></title>
        <id>/graylog-alert-issue</id>
        <link href="https://techblog.szksh.cloud/graylog-alert-issue"/>
        <updated>2018-12-19T12:02:11.000Z</updated>
        <summary type="html"><![CDATA[Graylogを運用してきて感じているAlert機能周りの課題をリストアップします。]]></summary>
        <content type="html"><![CDATA[<p>Graylogを運用してきて感じているAlert機能周りの課題をリストアップします。
自分のGraylogの理解が不十分で勘違いしている部分もあるかもしれませんが、ご了承ください。
Graylogのバージョンは 2.5.0 です。
ここでいう「メンション」とは、Slackのようなチャットツールのメンションを指します。
リストの詳細を書きだしてみたものの、リストだけでだいたい言いたいことが言えてしまっていたのと、単なる愚痴っぽくなってしまったので、
リストだけに留めます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="2018-12-31-追記">2018-12-31 追記<a class="hash-link" href="#2018-12-31-追記" title="Direct link to heading">​</a></h2><p>元々 Alert Condition, Notification の APIがないと勘違いしていたのですが、
実はちゃんとあったので terraform で管理できるように go-graylog を更新しました。</p><ul><li><a href="https://github.com/suzuki-shunsuke/go-graylog/pull/50" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/pull/50</a></li><li><a href="https://github.com/suzuki-shunsuke/go-graylog/pull/52" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/pull/52</a></li><li><a href="https://github.com/suzuki-shunsuke/go-graylog/blob/v11.0.0/docs/resources/alarm_callback.md" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/blob/v11.0.0/docs/resources/alarm_callback.md</a></li><li><a href="https://github.com/suzuki-shunsuke/go-graylog/blob/v11.0.0/docs/resources/alert_condition.md" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog/blob/v11.0.0/docs/resources/alert_condition.md</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="課題リスト">課題リスト<a class="hash-link" href="#課題リスト" title="Direct link to heading">​</a></h2><ul><li><del>APIでAlert Condition, Notificationを管理できない</del><ul><li><del>APIがないので terraform でサポートも出来ない</del></li><li><del>数が増えるとWeb UIでは管理が辛い・修正漏れや設定ミスが出やすい</del></li></ul></li><li>Condition, NotificationがStreamに紐づく<ul><li>ConditionによってNotificationを変えられない<ul><li>条件に応じてアラートの文面・通知先・メンション先・メンションの有無を変えられない
(正確にはテンプレートエンジンで頑張ればある程度対応できるかもしれないが、個人的にはテンプレートそのものを切り替えたい)</li></ul></li><li>ConditionやNotificationを複数のStreamで使い回せない</li></ul></li><li>(少なくとも標準機能では)時間帯によってアラートの挙動を変更できない<ul><li>夜中にはアラートを飛ばさない・メンションをつけないといったことが出来ない</li><li><a href="https://github.com/Graylog2/graylog2-server/issues/3182" target="_blank" rel="noopener noreferrer">一時的にアラートを止められない</a></li></ul></li><li>Pluginを使うにしてもどれを使ったら良いか分からない<ul><li>もっとGraylogがメジャーになれば状況も変わるかもしれない</li></ul></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="graylog" term="graylog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Graylog の Terraform を CI/CDで実行する]]></title>
        <id>/graylog-terraform-ci</id>
        <link href="https://techblog.szksh.cloud/graylog-terraform-ci"/>
        <updated>2018-12-06T23:22:49.000Z</updated>
        <summary type="html"><![CDATA[以前 Graylog を Terraform で管理する記事を書きました。]]></summary>
        <content type="html"><![CDATA[<p>以前 Graylog を Terraform で管理する記事を書きました。</p><p><a href="https://suzuki-shunsuke.github.io/graylog-terraform/" target="_blank" rel="noopener noreferrer">https://suzuki-shunsuke.github.io/graylog-terraform/</a></p><p>今回はそれを CI/CD で実行できるようにした話です。</p><p>ただし、今回の内容は Graylog に限らず Terraform を CI/CD で実行する方法として使えると思います。</p><p>今回実現したのは以下のことです。</p><ul><li>PR時にテストをする</li><li><code>plan/*</code> tag を push すると <code>terraform plan</code> が実行される</li><li><code>apply/*</code> tag を push すると <code>terraform apply</code> が実行され、tfstate がコミット、プッシュされる</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="ソースコード">ソースコード<a class="hash-link" href="#ソースコード" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/example/tree/master/graylog-terraform" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/tree/master/graylog-terraform</a> に置いておきました。</p><ul><li><a href="https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/role.tf#L13-L25" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/role.tf#L13-L25</a></li><li><a href="https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/user.tf#L12-L21" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/user.tf#L12-L21</a></li><li><a href="https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/.drone.yml" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/.drone.yml</a></li><li><a href="https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/terraform.tfvars.tpl" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/terraform.tfvars.tpl</a></li><li><a href="https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/drone_pipeline_commands/git.sh" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/drone_pipeline_commands/git.sh</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="cicd用の-user-role-を作成する">CI/CD用の user, role を作成する<a class="hash-link" href="#cicd用の-user-role-を作成する" title="Direct link to heading">​</a></h2><p>まずは role を作成します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "graylog_role" "terraform" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  name        = "terraform"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  description = "terraform"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  permissions = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "dashboards:*",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "indexsets:*",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "inputs:*",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "roles:*",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "streams:*",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "users:*",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>permission は terraform で管理するリソースのみ付与しますが、
それでも結構強い権限を付与するので取扱に注意してください。</p><p>よりちゃんと権限管理するのであれば project ごとに role, user を分けるという手もありそうですが、そうすると管理も大変そうです。</p><p>次に user を作成します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">resource "graylog_user" "terraform" {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  username  = "terraform"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  email     = "terraform@example.com"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  full_name = "terraform"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  roles = [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "terraform",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    "Reader",</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Reader か Admin は必須らしいのでReaderを付与しています。</p><p><a href="http://docs.graylog.org/en/2.5/pages/users_and_roles/permission_system.html" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/users_and_roles/permission_system.html</a></p><blockquote><p>Every user needs to at least have the standard “Reader” permissions
but those do not provide any access to data or maintenance functionalities.</p></blockquote><p>次にこのユーザーの token を発行します。</p><p><a href="http://docs.graylog.org/en/2.5/pages/configuration/rest_api.html#creating-and-using-access-token" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/configuration/rest_api.html#creating-and-using-access-token</a></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ curl -u &lt;username&gt;:&lt;password&gt; -H 'Accept: application/json' -X POST 'https://graylog.example.com/api/users/&lt;username&gt;/tokens/&lt;tokenname&gt;?pretty=true'</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>発行したトークンを CI/CD にクレデンシャルとしてセットします。
やり方は利用するCI/CDによって変わります。</p><p>以降は <a href="https://drone.io/" target="_blank" rel="noopener noreferrer">drone ci</a> という CI/CD プラットフォームを前提に書きますが、
travis ci や circle ci, jenkins など他のCI/CDでも考え方は一緒だと思います。</p><p>.drone.yml は 以下のようになります。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">pipeline</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">envsubst</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzukishunsuke/alpine</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">envsubst</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">0.1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> envsubst &lt; terraform.tfvars.tpl </span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain"> terraform.tfvars</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">secrets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">source</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> terraform_token_prod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> graylog_auth_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">plan</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token important">&amp;terraform_image</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"suzukishunsuke/terraform-graylog:0.1.2"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform validate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform fmt </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> refs/tags/plan/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">apply</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token important">*terraform_image</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform validate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform fmt </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform apply </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">auto</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> refs/tags/apply/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">git</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> plugins/git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sh drone_pipeline_commands/git.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> refs/tags/apply/*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">validate</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token important">*terraform_image</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TF_VAR_auth_name=dummy"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TF_VAR_auth_password=token"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TF_VAR_web_endpoint_uri=https://graylog.example.com/api"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform validate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform fmt </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>まずは terraform を実行するための Docker Image を用意しました。</p><p><a href="https://hub.docker.com/r/suzukishunsuke/terraform-graylog/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/r/suzukishunsuke/terraform-graylog/</a></p><p>PR時のテストでは terraform validate と terraform fmt を実行します。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">validate</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token important">*terraform_image</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TF_VAR_auth_name=dummy"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TF_VAR_auth_password=token"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"TF_VAR_web_endpoint_uri=https://graylog.example.com/api"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform validate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform fmt </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pull_request</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>TF_VAR_</code> で始まるのが terraform の変数です。</p><p><a href="https://www.terraform.io/docs/configuration/variables.html#environment-variables" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/configuration/variables.html#environment-variables</a></p><p>token は適当な文字列をセットしてください。PR時には実際にgraylog の API を呼ばないので適当なので問題ありません。</p><p>次に <code>plan/*</code> と tag を push すると <code>terraform plan</code> が実行されます。
この結果を見て <code>terraform apply</code> を実行します。</p><p>これは <a href="https://0-8-0.docs.drone.io/manage-secrets/" target="_blank" rel="noopener noreferrer">drone の secrets</a> の都合なのですが、secrets の環境変数は全部大文字になってしまうため <code>TF_VAR_auth_name</code> という環境変数をセットできません。そのため <a href="https://www.gnu.org/software/gettext/manual/html_node/envsubst-Invocation.html" target="_blank" rel="noopener noreferrer">envsubst</a> を使って terraform.tfvars に token を書き込んでいます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">envsubst</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzukishunsuke/alpine</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">envsubst</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">0.1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> envsubst &lt; terraform.tfvars.tpl </span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain"> terraform.tfvars</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">secrets</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">source</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> terraform_token_prod</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">target</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> graylog_auth_name</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>terraform.tfvars.tpl はこんな感じです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">web_endpoint_uri = "https://graylog.example.com/api"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">auth_name = "$GRAYLOG_AUTH_NAME"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">auth_password = "token"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>plan を実行する step です。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">plan</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token important">&amp;terraform_image</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"suzukishunsuke/terraform-graylog:0.1.2"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform validate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform fmt </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> refs/tags/plan/*</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>apply/*</code> と tag を push すると <code>terraform apply</code> が実行されます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">apply</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token important">*terraform_image</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform init</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform validate</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform plan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform fmt </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">check</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> terraform apply </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">auto</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">approve</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> refs/tags/apply/*</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>terraform.tfstate をコミット, プッシュします。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">git</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> plugins/git</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> sh drone_pipeline_commands/git.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">event</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> tag</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">ref</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> refs/tags/apply/*</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>drone_pipeline_commands/git.sh はこんな感じです。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">git status --porcelain || exit 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if `git diff --exit-code --quiet terraform.tfstate`; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  echo "terraform.tfstate isn't changed"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  exit 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">else</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git config user.name drone</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git config user.email drone@example.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git add . || exit 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git commit -m "build: commit by drone" || exit 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git push origin HEAD:master || exit 1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>terraform.tfstate に変化があった場合のみ コミット・プッシュするようにしています。
この辺のやり方はもっとうまいやり方があるかもしれません
(自分のシェルスクリプト力が低いため)。</p><p><code>terraform plan</code> の <code>-detailed-exitcode</code> オプションを使うのが良い気がします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">  -detailed-exitcode  Return detailed exit codes when the command exits. This</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      will change the meaning of exit codes to:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      0 - Succeeded, diff is empty (no changes)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      1 - Errored</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                      2 - Succeeded, there is a diff</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>以上 Graylog の Terraform を CI/CD で実行する方法を紹介しました。
Graylog に限らず、 Terraform を CI/CD で実行する方法として使えると思うので参考になれば幸いです。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="graylog" term="graylog"/>
        <category label="terraform" term="terraform"/>
        <category label="ci" term="ci"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[molecule でansible の role と playbook をテストする]]></title>
        <id>/ansible-molecule</id>
        <link href="https://techblog.szksh.cloud/ansible-molecule"/>
        <updated>2018-12-06T14:08:04.000Z</updated>
        <summary type="html"><![CDATA[ansible 専用の testing ツール molecule を紹介します。]]></summary>
        <content type="html"><![CDATA[<p>ansible 専用の testing ツール <a href="https://molecule.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener noreferrer">molecule</a> を紹介します。
molecule の公式ドキュメント以外の情報は少ないので、参考になれば幸いです。</p><p>以前 Docker を使って ansible のテストをする方法を紹介しました。</p><p><a href="https://suzuki-shunsuke.github.io/test-ansible-on-docker/" target="_blank" rel="noopener noreferrer">https://suzuki-shunsuke.github.io/test-ansible-on-docker/</a></p><p>この際は Docker Compose と簡単なシェルスクリプトを使って実現しました。
これはこれでブラックボックスな部分がなく、学習コストも低くて悪くないので興味のある方はそちらもご参照ください。</p><p>molecule は ansible 専用の testing ツールです。
基本的に playbook というより role 用のツールですが、playbookのテストも工夫すれば出来ます。</p><ul><li>情報が少ない</li><li>公式ドキュメントも分かりづらい部分がある</li><li>コマンドがエラー吐いて失敗した際に、ググっても情報が出てこないので辛い</li></ul><p>という風に辛い部分もありますが、</p><ul><li>star数はそれなりにある</li><li>ansible の公式のプロジェクトである <a href="https://github.com/ansible/molecule/" target="_blank" rel="noopener noreferrer">https://github.com/ansible/molecule/</a></li><li><a href="https://github.com/geerlingguy" target="_blank" rel="noopener noreferrer">geerlingguy</a> さんも使ってる</li></ul><p>という風に良い面もあります。</p><p>それでは使っていきましょう。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="インストール">インストール<a class="hash-link" href="#インストール" title="Direct link to heading">​</a></h2><p><a href="https://molecule.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener noreferrer">https://molecule.readthedocs.io/en/latest/installation.html</a></p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ pip install molecule</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Docker を使う場合 <code>docker-py</code> も必要です。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ pip install docker-py</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="role-のテスト">role のテスト<a class="hash-link" href="#role-のテスト" title="Direct link to heading">​</a></h2><p>playbookに比べて role のテストは簡単です。</p><p>role のディレクトリ(tasksやfilesなどがあるディレクトリ)に移動してコマンドを実行します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule init scenario -r &lt;role name&gt;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>こうすると <code>molecule</code> ディレクトリが生成されます。</p><p><code>molecule/default/molecule.yml</code> を修正します。</p><p><a href="https://molecule.readthedocs.io/en/latest/configuration.html" target="_blank" rel="noopener noreferrer">https://molecule.readthedocs.io/en/latest/configuration.html</a></p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependency</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> galaxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># 依存する role がある場合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">options</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">role-file</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> roles.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">driver</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">lint</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> yamllint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># https://molecule.readthedocs.io/en/latest/configuration.html#platforms</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">platforms</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> server  </span><span class="token comment" style="color:#999988;font-style:italic"># コンテナの名前になる</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># 必要に応じて image を変更</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># 今回は ansibleのremote user を非rootにするために自作の Docker Image を指定</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># https://hub.docker.com/r/suzukishunsuke/ansible-test-centos/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzukishunsuke/ansible</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">test</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">centos</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">0.1.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># systemd を使ったりする場合</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># https://molecule.readthedocs.io/en/latest/examples.html#systemd-container</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">privileged</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">command</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> /sbin/init  </span><span class="token comment" style="color:#999988;font-style:italic"># systemd を使う場合必要</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">env</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">USER</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo </span><span class="token comment" style="color:#999988;font-style:italic"># DockerだとUSER環境変数が空になってしまうようなので明示的に設定</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">provisioner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># https://molecule.readthedocs.io/en/latest/configuration.html#id12</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ansible</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">lint</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ansible</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">lint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">options</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo </span><span class="token comment" style="color:#999988;font-style:italic"># 非rootユーザーで実行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">inventory</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">group_vars</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># variables を指定</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">all</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">nginx_server_name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> localhost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">mysql_host</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> localhost</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">mysql_port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3306</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">mysql_database</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> grafana</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">mysql_user</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> root</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">mysql_password</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> password</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">scenario</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> default</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">verifier</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> testinfra</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">lint</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> flake8</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>test の前にまずは lint します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule lint [-s &lt;senario name&gt;]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>すると yamllint の設定ファイル <code>.yamllint</code> が作られていると思うので、必要に応じて修正します。</p><p><a href="https://yamllint.readthedocs.io/en/stable/configuration.html" target="_blank" rel="noopener noreferrer">https://yamllint.readthedocs.io/en/stable/configuration.html</a></p><p>ansible-lint で引っかかった人はこちらを参照してください。</p><p><a href="https://github.com/ansible/ansible-lint" target="_blank" rel="noopener noreferrer">https://github.com/ansible/ansible-lint</a></p><p>そして test コマンドを実行します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule test [-s &lt;senario name&gt;]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>test</code> コマンドではコンテナが削除されるため、デバッグが難しかったりします。</p><p>その場合、 <code>converge</code> コマンドを実行すればコンテナは消えません。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule converge [-s &lt;senario name&gt;]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>消したくなったら destroy コマンドで消しましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule destroy [-s &lt;senario name&gt;]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="playbook-のテスト">playbook のテスト<a class="hash-link" href="#playbook-のテスト" title="Direct link to heading">​</a></h2><p>次に playbook のテストです。割とこれが本題だったりします。
molecule は基本的に playbook というより role 用のツールなので若干工夫が必要です。</p><p>自分はよく ansible playbook のディレクトリ構成を以下のようにします。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">hello-molecule/  # ルートディレクトリ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  agent.yml # agent グループ用の playbook</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  group_vars/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    all.yml  # 共通のvariables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    agent.yml  # agent グループ用の variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  roles/  # role</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  inventories/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prod.yml # production用のinventory</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  roles.yml  # 依存する role のリスト</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ansible.cfg</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このときに playbook <code>agent.yml</code> のテストがしたいとします。
molecule のためにこの構成を弄ったりは極力したくありません。</p><p>playbook のディレクトリで <code>molecule init</code> を実行します。
default シナリオは必須のようです。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule init scenario -r hello-molecule</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ molecule init scenario -s agent -r hello-molecule</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>するとこうなります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">hello-molecule/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  agent.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  group_vars/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    all.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    agent.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  roles/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  inventories/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    prod.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  roles.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ansible.cfg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  molecule/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    default/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    agent/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      molecule.yml</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      playbook.yml # これは使わない。消す</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>ここから molecule.yml を修正していきます。
一部抜粋します。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">dependency</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> galaxy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">options</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">role-file</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> roles.yml </span><span class="token comment" style="color:#999988;font-style:italic"># ルートディレクトリからの相対パス</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">platforms</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> server  </span><span class="token comment" style="color:#999988;font-style:italic"># group名</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> centos</span><span class="token punctuation" style="color:#393A34">:</span><span class="token number" style="color:#36acaa">7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">provisioner</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ansible</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">playbooks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">converge</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ../../server.yml </span><span class="token comment" style="color:#999988;font-style:italic"># ルートディレクトリにある playbookを指定</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">env</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">ANSIBLE_ROLES_PATH</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ../../roles</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">../../_roles  </span><span class="token comment" style="color:#999988;font-style:italic"># roleのパスを修正</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">scenario</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> server</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>このように playbookや role のパスを修正すればあとは role のテストと同じ要領でいけると思います。</p><p>以上、簡単ですが molecule の使い方を紹介しました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="ansible" term="ansible"/>
        <category label="molecule" term="molecule"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraylogをTerraformで管理する]]></title>
        <id>/graylog-terraform</id>
        <link href="https://techblog.szksh.cloud/graylog-terraform"/>
        <updated>2018-12-01T05:56:00.000Z</updated>
        <summary type="html"><![CDATA[Graylogのリソースを terraform で管理するために作った terraform provider を紹介します。]]></summary>
        <content type="html"><![CDATA[<p>Graylogのリソースを terraform で管理するために作った terraform provider を紹介します。
<a href="https://www.graylog.org/" target="_blank" rel="noopener noreferrer">Graylog</a>とは何かは<a href="/graylog/">こちら</a>を読んでください。</p><p>Graylogには様々なリソースがあります。</p><ul><li>User</li><li>Role</li><li>Input</li><li>Index Set</li><li>Stream</li><li>Stream Rule</li><li>Dashboard</li><li>Alert</li><li>etc</li></ul><p>これらのリソースはWeb UIから作成したり出来るわけですが、
Web UIでポチポチするのは疲れますし、ソースコードで管理したいものです(Infrastructure as Code)。
また、Web UIからでは細かな権限管理は出来ず(限られた権限管理しか出来ない)、APIを使ってする必要があります。</p><p>APIを使って管理できるツールを探したものの見つからなかったので、
APIを使ってGraylog用のterraform providerを自作しています。</p><p><a href="https://github.com/suzuki-shunsuke/go-graylog" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-graylog</a></p><p>GraylogのAPIの種類は非常に多く、残念ながらカバーできているのは一部だけですが、以下のようなものをサポートしています。</p><ul><li>Alert Condition</li><li>Alert Notification (Alarm Callback)</li><li>Input</li><li>User</li><li>Role</li><li>Index Set</li><li>Stream</li><li>Stream Rule</li><li>Dashboard</li><li>Ldap Setting</li></ul><p>Role はサポートしているので権限管理は問題なく出来ます。
Dashboard Widget もサポートしたいです。</p><p><del>出来れば Alert の設定も出来ると良いのですが、Alertに関するCRUD APIが提供されていない(GETのみ)ので、サポートできません。</del></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-を使った管理方法">terraform を使った管理方法<a class="hash-link" href="#terraform-を使った管理方法" title="Direct link to heading">​</a></h2><p>以下では自分の管理方法を紹介します。</p><p><a href="https://github.com/suzuki-shunsuke/example/tree/master/graylog-terraform" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/tree/master/graylog-terraform</a></p><p>にサンプルが置いてあります。</p><p>基本はプロジェクトごとに</p><ol><li>Index Set, Stream, Role といったリソースを作成</li><li>User に Role を付与</li></ol><p>という流れになります。</p><p>1のプロジェクトごとの設定は <a href="https://www.terraform.io/docs/modules/index.html" target="_blank" rel="noopener noreferrer">terraform の module</a> という形でまとめてしまい、プロジェクトごとにディレクトリを作成しています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terraform-provider-の開発について">terraform provider の開発について<a class="hash-link" href="#terraform-provider-の開発について" title="Direct link to heading">​</a></h2><p>terraform provider の開発はドキュメントが少なく動かしつつ手探りで書いていたりしています。
terraform provider の開発に興味のある方はこの辺を見てみると良いと思います。</p><ul><li><a href="https://www.terraform.io/docs/plugins/provider.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/docs/plugins/provider.html</a></li><li><a href="https://www.terraform.io/guides/writing-custom-terraform-providers.html" target="_blank" rel="noopener noreferrer">https://www.terraform.io/guides/writing-custom-terraform-providers.html</a></li><li><a href="https://godoc.org/github.com/hashicorp/terraform/helper/schema" target="_blank" rel="noopener noreferrer">https://godoc.org/github.com/hashicorp/terraform/helper/schema</a></li><li><a href="https://godoc.org/github.com/hashicorp/terraform/helper/resource#TestCase" target="_blank" rel="noopener noreferrer">https://godoc.org/github.com/hashicorp/terraform/helper/resource#TestCase</a></li></ul><p>あとは <a href="https://github.com/terraform-providers/terraform-provider-google" target="_blank" rel="noopener noreferrer">https://github.com/terraform-providers/terraform-provider-google</a> のような公式の provider のソースコードも参考になります。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最後に">最後に<a class="hash-link" href="#最後に" title="Direct link to heading">​</a></h2><p>API を使って terraform provider を開発することで、Infrastructure as Code をある程度実現できました。</p><ul><li><del>Stream Rule と Dashboard をサポートできていない</del></li><li><del>Alertに関するCRUD APIが提供されていない(GETのみ)ので、サポートできない</del></li></ul><p>という問題がクリア出来てないので、そこをクリアしたいです。</p><p>また、</p><ul><li><del>まだ terraform を CI で出来ていない(ローカルから実行している)</del></li><li>新しいプロジェクトやユーザーの追加の際に雛形を自動生成できるツールを作りたい(特に、新しく参画した人のためにあると良い)</li></ul><p>といった点も改善したいです(出来たら記事にしたいと思います)。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="2018-12-03-追記">2018-12-03 追記<a class="hash-link" href="#2018-12-03-追記" title="Direct link to heading">​</a></h2><ul><li>Stream Rule サポートしました</li><li><a href="/graylog-terraform-ci">terraform を CI で実行するようにしました(気が向いたら記事書きます)</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="2018-12-31-追記">2018-12-31 追記<a class="hash-link" href="#2018-12-31-追記" title="Direct link to heading">​</a></h2><ul><li>Alert Condition, Notification をサポートしました</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="graylog" term="graylog"/>
        <category label="terraform" term="terraform"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Graylog で log を管理する]]></title>
        <id>/graylog</id>
        <link href="https://techblog.szksh.cloud/graylog"/>
        <updated>2018-11-27T07:40:33.000Z</updated>
        <summary type="html"><![CDATA[Java 製の OSS ログ管理システム Graylog の紹介です。]]></summary>
        <content type="html"><![CDATA[<p>Java 製の OSS ログ管理システム Graylog の紹介です。
Graylog については幾つかに分けて記事を書きたいと思います。
今回はGraylogの入門的な内容になります。</p><p>なお、本記事中で「現在」「現時点」といった場合、特に断りがなければ記事執筆時点 2018-11-27 を指します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="graylog-のバージョン">Graylog のバージョン<a class="hash-link" href="#graylog-のバージョン" title="Direct link to heading">​</a></h2><p>検証に用いるGraylogのバージョンは 2.4.6 になります。</p><p>OSSバージョンとEnterpriseバージョンがありますが、本記事ではOSSバージョンを使用します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="graylog-とは">Graylog とは<a class="hash-link" href="#graylog-とは" title="Direct link to heading">​</a></h2><ul><li><a href="https://www.graylog.org/" target="_blank" rel="noopener noreferrer">https://www.graylog.org/</a></li><li><a href="https://github.com/Graylog2/graylog2-server" target="_blank" rel="noopener noreferrer">https://github.com/Graylog2/graylog2-server</a></li></ul><p>Kibana と Elasticsearch(以下ES) を使ったことがある人は、Kibanaに代わるものだと思っていただくとイメージしやすいかと思います。
ログはGraylogそのものが保持するのではなく、ESにインデキシングされます。
Kibana同様、ESに収集されたログを検索したり、ダッシュボードを作ったり出来ます。
ダッシュボードに関してはKibanaのほうが優れているようにも思えますが、
Graylogは認証・認可によりダッシュボードやログを操作できる人を制限・管理することが出来ます。</p><p>Graylogでログを管理する場合、ユーザーは直接ESにはログを送らず、Graylogを経由して送ります。
ESに対するGraylog以外のアクセスを制限し直接ESにアクセスされるのを防ぐことが出来ます。</p><p>Graylog は多機能なシステムであり、ログを整形したり、アラートを飛ばしたり、他のシステムにログをフォワードしたりすることも出来ます。
<a href="http://docs.graylog.org/en/2.5/pages/marketplace.html" target="_blank" rel="noopener noreferrer">marketplace</a> でサードパーティの plugin が公開されており、機能を拡張することが出来ます。
<a href="http://docs.graylog.org/en/2.5/pages/configuration/rest_api.html" target="_blank" rel="noopener noreferrer">API</a>も提供されており、ある程度自動化が可能です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="認証認可">認証・認可<a class="hash-link" href="#認証認可" title="Direct link to heading">​</a></h2><p>オンプレミスでログを管理する場合、社外からは勿論社内からのアクセスも制限したいです。
Graylog では LDAP や Active Directory によってアクセスを制限できます。
リソース毎に誰が何を出来るか設定できます。</p><p><a href="http://docs.graylog.org/en/2.5/pages/users_and_roles/external_auth.html" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/users_and_roles/external_auth.html</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="ログの収集">ログの収集<a class="hash-link" href="#ログの収集" title="Direct link to heading">​</a></h2><p>ログの収集をするには Graylog で幾つかのリソースを作成する必要があります。</p><ul><li>Input</li><li>Index Set</li><li>Stream</li><li>Stream Rule</li></ul><p>Input はログの入力のフォーマットの設定であり、
どのポートでどういったフォーマットのログを受け付けるかという設定になります。
フォーマットは様々なものがサポートされています。</p><ul><li>AWS Flow Logs</li><li>AWS Cloud Watch Logs</li><li>AWS Cloud Trail</li><li>Beats</li><li>CEF AMQP</li><li>CEF Kafka</li><li>CEF TCP</li><li>CEF UDP</li><li>Fake HTTP Message</li><li>GELF AMQP</li><li>GELF HTTP</li><li>GELF Kafka</li><li>GELF TCP</li><li>GELF UDP</li><li>JSON Path</li><li>NetFlow UDP</li><li>Raw AMQP</li><li>Syslog AMQP</li><li>Syslog Kafka</li><li>Syslog TCP</li><li>Syslog UDP</li></ul><p>この設定はログを収集するアプリケーションごとに設定するというより、グローバルな設定なので、他のアプリケーションで既に同じ形式でログを収集していたら新たに設定する必要はありません。</p><p><a href="http://docs.graylog.org/en/2.5/pages/streams.html#index-sets" target="_blank" rel="noopener noreferrer">Index Set</a>はESのIndexの論理的なセットです。
GraylogはESの複数のIndexを1つのセットとして管理します。
Index Setの設定で古いログを自動でcloseしたり削除したりする事ができるのでログの管理が楽になります。
ESのログは収集しているだけだとどんどん肥大化していってしまうので、<a href="https://dev.classmethod.jp/server-side/elasticsearch/elastic-curator/" target="_blank" rel="noopener noreferrer">Curatorなどを使って古いものを消したりする必要がありますが</a>、そういったことをGraylogが自動でやってくれます。</p><p><a href="http://docs.graylog.org/en/2.5/pages/streams.html" target="_blank" rel="noopener noreferrer">Stream</a> はGraylogに収集されたログを分類する仕組みです。
Stream毎に検索したりダッシュボードを作ったりアラートを飛ばしたりログの閲覧を制限したりします。
分類の仕方は自由ですが、自分はアプリケーション毎にStreamを作っています。
Stream毎にStream Ruleを定義し、Stream Ruleの条件にマッチしたログはそのStreamに振り分けられます。
自分はfluentdから送ったログの tag によってStreamを分けています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="ログを送る">ログを送る<a class="hash-link" href="#ログを送る" title="Direct link to heading">​</a></h2><p>公式ドキュメントに幾つかログの送り方が紹介されています。</p><p><a href="http://docs.graylog.org/en/2.5/pages/sending_data.html" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/sending_data.html</a></p><p>自分が主にやっているのが</p><ul><li><a href="https://docs.docker.com/config/containers/logging/gelf/" target="_blank" rel="noopener noreferrer">Docker の GELF log driver</a> を使う</li><li>k8s の Pod で fluentd を side car として動かす(<a href="https://hub.docker.com/r/suzukishunsuke/fluentd-gelf/" target="_blank" rel="noopener noreferrer">fluentdにはout_gelf plugin をインストール</a>)</li></ul><p>ここまでやればログを<a href="http://docs.graylog.org/en/2.5/pages/queries.html" target="_blank" rel="noopener noreferrer">検索</a>したり出来ます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="alert">Alert<a class="hash-link" href="#alert" title="Direct link to heading">​</a></h2><p><a href="http://docs.graylog.org/en/2.5/pages/streams/alerts.html" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/streams/alerts.html</a></p><p>アラートの設定は</p><ul><li>Condition: アラートの条件</li><li>Notification: アラート先(どこにアラートを飛ばすか)</li></ul><p>の2つに分かれます。それぞれStreamに関連づいた設定です。</p><p>Condition では</p><ul><li>Field content condition</li><li>Field aggregation condition</li><li>Message count condition</li></ul><p>といった条件で設定できます。</p><p>Notification は標準では</p><ul><li>HTTP(Webhook)</li><li>Email</li></ul><p>の2種類しかないのですが、pluginで Slack などにも通知することが出来ます。
自分は <a href="https://github.com/graylog-labs/graylog-plugin-slack" target="_blank" rel="noopener noreferrer">https://github.com/graylog-labs/graylog-plugin-slack</a> を使って Slack に通知しています。</p><p>Notification のメッセージのテンプレートは自由に変えられますが、どういったテンプレートが良いかは難しいです。
自分は次のような感じにしています。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">${alert_condition.title}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">${foreach backlog message}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">&lt;https://graylog.example.com/streams/${stream.id}/search?rangetype=absolute&amp;from=${message.timestamp}&amp;to=${message.timestamp} | link&gt; ${message.message}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">${end}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>graylog の URL は適宜置き換えてください。
<code>link</code> の部分を変数(<code>${message.message}</code>とか)にするとリンクが壊れてしまうことがあったので固定文字列にしています。</p><p>graylog-plugin-slack の設定で <code>Graylog URL (optional)</code>を設定しないと <code>${stream_url}</code> などが空になってしまうことに注意してください。
自分は optional なので元々設定していなかったのでハマりました(ググっても分からなかった)。
<code>Graylog URL</code>という設定は notification 毎に変えるようなものでもないのでglobalに設定できるとよいのですが、どうも出来なそうです。</p><p>また、テンプレート中で使える変数の中にmessageのURLはないそうです。</p><p><a href="https://community.graylog.org/t/message-url-in-alert-notification/1916" target="_blank" rel="noopener noreferrer">https://community.graylog.org/t/message-url-in-alert-notification/1916</a></p><p>そのため、message.timestamp を from と to に指定して検索するという回りくどい(?)ことをしています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="ダッシュボードの作成">ダッシュボードの作成<a class="hash-link" href="#ダッシュボードの作成" title="Direct link to heading">​</a></h2><p>ダッシュボードの作成は</p><ol><li>Dashboardページ: 空のDashboardを作る</li><li>Stream ページ: クエリを実行したりしてグラフを作る</li><li>Stream ページ: グラフをDashboardに追加する</li><li>Dashboardページ: グラフを並び替えたりする</li></ol><p>詳細は割愛するので <a href="http://docs.graylog.org/en/2.5/pages/dashboards.html" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/dashboards.html</a> を読んでください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="権限管理">権限管理<a class="hash-link" href="#権限管理" title="Direct link to heading">​</a></h2><p>Graylogの権限管理では User と Role という概念があり、
Role の permissions としてどのリソースにどういった操作を許可するか定義し、
User に Role を付与します。</p><p><a href="http://docs.graylog.org/en/2.5/pages/users_and_roles/permission_system.html#permissions" target="_blank" rel="noopener noreferrer">http://docs.graylog.org/en/2.5/pages/users_and_roles/permission_system.html#permissions</a></p><p>permissions として定義できるものは公式なドキュメントが見つからないのですが、APIで取得できます。</p><p><a href="https://gist.github.com/suzuki-shunsuke/e371f1bd2716cde31d6fa89bf39f0e77" target="_blank" rel="noopener noreferrer">https://gist.github.com/suzuki-shunsuke/e371f1bd2716cde31d6fa89bf39f0e77</a></p><p>例えば <code>streams:read</code> は全てのStreamをreadする権限となりますし、
<code>streams:read:&lt;stream id&gt;</code> とすれば特定のStreamのみreadする権限となります。</p><p>プロジェクトごとにroleを定義してプロジェクトの関係者に付与したり、アルバイトや正社員といった雇用形態に応じてroleを定義したり、色々な利用方法はあると思います。</p><p>こういったRoleのpermissionの定義はWeb UIからも出来ますが、
残念ながらWeb UIからではなくAPIを用いないと定義できないpermissionもあります。
そのため、自分は Graylog APIを用いて terraform provider を開発し、terraform で Roleの作成を行っています。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="最後に">最後に<a class="hash-link" href="#最後に" title="Direct link to heading">​</a></h2><p>以上、自分が主に使っているGraylogの機能を紹介しました。
Graylogは多機能で自分が使っていない、分かっていない機能が色々あります。
興味のある方は調べてみてください。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="graylog" term="graylog"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[akoi - binary installer]]></title>
        <id>/akoi</id>
        <link href="https://techblog.szksh.cloud/akoi"/>
        <updated>2018-10-30T23:56:04.000Z</updated>
        <summary type="html"><![CDATA[自作のOSS akoi の紹介をします。]]></summary>
        <content type="html"><![CDATA[<p>自作のOSS <a href="https://github.com/suzuki-shunsuke/akoi" target="_blank" rel="noopener noreferrer">akoi</a> の紹介をします。</p><ul><li>なぜこんなものを作ったのか</li><li>akoi と ansible を使ってサーバにバイナリをインストールする方法</li></ul><p>について主に説明します。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="まとめ">まとめ<a class="hash-link" href="#まとめ" title="Direct link to heading">​</a></h2><ul><li>akoi はバイナリファイルのインストーラ</li><li>設定ファイルで管理できる</li><li>冪等であり、効率よくインストールできる<ul><li>並列インストール</li><li>Accept-Ranges による分散ダウンロード</li></ul></li><li>ansibleでサーバにバイナリをインストールするのを補助してくれる<ul><li>ansible で真面目にバージョンコントロールして効率よくインストールするのは難しい(ほとんどの ansible role は出来ていない)</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="akoi-とは">akoi とは<a class="hash-link" href="#akoi-とは" title="Direct link to heading">​</a></h2><p>akoi はバイナリファイルのインストーラです。
設定ファイルにインストールするファイルのダウンロードURLとインストール先を記述して管理します。
インストールするバイナリのバージョン管理が可能であり、既にインストールしてあるバージョンへの切り替えはシンボリックを作り直すだけなので一瞬で終わります。無駄にダウンロードをしたりはしません。
複数のバイナリを並列でインストールしたり、Accept-Ranges ヘッダによる分散ダウンロードをサポートしています。</p><p>分散ダウンロードについては</p><p><a href="https://qiita.com/codehex/items/d0a500ac387d39a34401" target="_blank" rel="noopener noreferrer">https://qiita.com/codehex/items/d0a500ac387d39a34401</a></p><p>が参考になります。</p><p>Goで書かれています。</p><p><a href="https://github.com/suzuki-shunsuke/akoi/releases" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/akoi/releases</a> からバイナリをダウンロードしてインストールできます。</p><p>詳細は<a href="https://github.com/suzuki-shunsuke/akoi" target="_blank" rel="noopener noreferrer">README</a>を読んでください。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜ作ったのか">なぜ作ったのか<a class="hash-link" href="#なぜ作ったのか" title="Direct link to heading">​</a></h2><p>サーバにバイナリをインストールする ansible role を書くのが辛かったからです。
最近は色々なソフトウェアがGoで書かれ、バイナリで配布されています。
そういったバイナリをサーバへインストールするのは
ansible で行っているという方も少なくないのではないでしょうか？
有名なソフトウェアをインストールする ansible role は大抵<a href="https://galaxy.ansible.com" target="_blank" rel="noopener noreferrer">Ansible Galaxy</a> で公開されています。</p><p>しかし、ほとんどの role は「真面目に」バージョン管理していません。
ここでいう「真面目に」とは</p><ol><li>バージョンを指定できる</li><li>バージョンを変更できる</li><li>指定したバージョンが既にインストールされている場合は無駄にダウンロードしたりしない</li></ol><p>といったことです。</p><p>これらを ansible でやろうとすると結構面倒なんです。</p><p>既存のroleでよくあるのが</p><ol><li>バージョンにかかわらず既にインストールされていたらインストールしない(バージョン変更できない)</li><li>1の問題を解決するため、強制的に再インストールするフラグがある(同じバージョンのものがインストールされていても無駄に再インストールする)</li></ol><p>だと思います。</p><p>真面目にやろうとするとこんな感じになる気がします。</p><p><a href="https://github.com/suzuki-shunsuke/ansible_role_akoi/blob/master/tasks/install_binary.yml" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/ansible_role_akoi/blob/master/tasks/install_binary.yml</a></p><p>これらのロジックはソフトウェアに関わらずほとんど共通です。
それをソフトウェアごとに実装してテストしてなんてのは面倒です。</p><p>そこで akoi を作る前に汎用的な ansible role として開発してみたのが</p><p><a href="https://github.com/suzuki-shunsuke/ansible-role-general-installer" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/ansible-role-general-installer</a></p><p>です。</p><p>しかしこれは ansible のバグでうまく動きませんでした。</p><p><a href="https://github.com/ansible/ansible/issues/34736" target="_blank" rel="noopener noreferrer">https://github.com/ansible/ansible/issues/34736</a></p><p>そこで作られたのが akoi です。
結果的に ansible でやるより高速かつ汎用的なので作って良かったと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="akoi-と-ansible-を使ってサーバにバイナリをインストール">akoi と ansible を使ってサーバにバイナリをインストール<a class="hash-link" href="#akoi-と-ansible-を使ってサーバにバイナリをインストール" title="Direct link to heading">​</a></h2><p>akoi を使うにしても ansible が不要になるという話ではなく、ansible でakoiのコマンドを実行する感じになります。
<a href="https://github.com/suzuki-shunsuke/akoi#use-akoi-at-ansible" target="_blank" rel="noopener noreferrer">README</a> にも書きましたが、 akoiを ansible の shell モジュールから呼び出して標準出力をパースすることで task の <code>changed</code> を判定することができます。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">tasks</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> install consul</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">shell</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/usr/local/bin/akoi install -f ansible 2&gt;&amp;1"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">register</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> result</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">changed_when</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> (result.stdout</span><span class="token punctuation" style="color:#393A34">|</span><span class="token plain">from_json)</span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"changed"</span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>akoi を使ってソフトウェアをインストールために、そもそもどうやってサーバに akoi をインストールするかですが(各サーバに akoi をインストールする必要があります)、
akoi をインストールする ansible role を提供しています。</p><p><a href="https://github.com/suzuki-shunsuke/ansible_role_akoi" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/ansible_role_akoi</a></p><p>これで akoi を使ってバイナリをインストールできますが、ソフトウェアのセットアップはバイナリをインストールすれば終わりということではなく、ユーザーやグループを作成したり、設定ファイルを作成したり、systemd のサービスを起動したりと色々あります。</p><p>自分はそれらの処理は別の ansible role として開発しています。</p><ul><li><a href="https://galaxy.ansible.com/suzuki-shunsuke/consul_config" target="_blank" rel="noopener noreferrer">suzuki-shunsuke.consul_config</a></li><li><a href="https://galaxy.ansible.com/suzuki-shunsuke/prometheus_node_exporter_config" target="_blank" rel="noopener noreferrer">suzuki-shunsuke.prometheus_node_exporter_config</a></li></ul><p>バイナリのインストールは akoi でやり、それ以外の部分は別途 ansible role を開発するというスタイルです。
それらの role ではいちいちバイナリをインストールする処理を書かなくて良いのでだいぶ開発が楽になりました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="ansible" term="ansible"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[gomic - Goのモックジェネレータ]]></title>
        <id>/gomic</id>
        <link href="https://techblog.szksh.cloud/gomic"/>
        <updated>2018-10-29T23:35:16.000Z</updated>
        <summary type="html"><![CDATA[自作のOSS gomic の紹介をします。]]></summary>
        <content type="html"><![CDATA[<p>自作のOSS <a href="https://github.com/suzuki-shunsuke/gomic" target="_blank" rel="noopener noreferrer">gomic</a> の紹介をします。</p><ul><li>なぜわざわざこんなものを作ったのか</li><li>生成されたモックの簡単な使い方</li></ul><p>を主に説明したいと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="まとめ">まとめ<a class="hash-link" href="#まとめ" title="Direct link to heading">​</a></h2><ul><li>gomic は Goのinterfaceを実装したモックを生成するCLIツール</li><li>モックを手で書くのが辛すぎた &amp; 既存ツールで満足できなかったため作った<ul><li>自動生成できるコードは自動生成すべき</li></ul></li><li>設定ファイルで管理するため、interfaceの更新に合わせてmockの更新が容易</li><li>生成されるモックはシンプルなAPIのみ提供するので学習コストが低い</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="gomic-とは">gomic とは<a class="hash-link" href="#gomic-とは" title="Direct link to heading">​</a></h2><p>gomic は Goのinterfaceを実装したモックを生成するCLIツールです。
これによってモックを使ったテストの作成を効率化します。
単調な作業を自動化し、本来注力すべきことに注力できるようにするためのツールです。</p><p>Goで書かれています。</p><p><a href="https://github.com/suzuki-shunsuke/gomic/releases" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/releases</a> からバイナリをダウンロードしてインストールできます。</p><p>同様のツールは幾つかあります。</p><ul><li><a href="https://github.com/avelino/awesome-go#testing" target="_blank" rel="noopener noreferrer">https://github.com/avelino/awesome-go#testing</a></li><li><a href="https://github.com/golang/mock" target="_blank" rel="noopener noreferrer">https://github.com/golang/mock</a> (以下 gomock)</li><li><a href="https://github.com/gojuno/minimock" target="_blank" rel="noopener noreferrer">https://github.com/gojuno/minimock</a> (以下 minimock)</li></ul><p>特に gomock は有名ですね。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="なぜ作ったのか">なぜ作ったのか<a class="hash-link" href="#なぜ作ったのか" title="Direct link to heading">​</a></h2><p>上述のように既に同様のツールはありますし、 gomock と minimock は試しました。
しかしあまり満足のいくものではなかったため、自分で作ることにしました。</p><p>自分が欲しかったのは学習コストの低いシンプルなAPIです。
interfaceのメソッドを実装した関数をモックに渡すことで
簡単にメソッドの実装を切り替えたいのです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// Getwd メソッドのモック</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">SetFuncGetwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/tmp"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Getwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// "/tmp", nil</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これは非常にシンプルで分かりやすく、柔軟性のあるパターンです(minimockはこのパターンもサポートしています)。</p><p>gomock や minimock では</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mockSample</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">EXPECT</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Method</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"hoge"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Return</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>のように 関数のパラメータと戻り値のペアを渡してモックを実装するパターン(何か名前があるのでしょうか？)をサポートしています。
このパターンを gomic はサポートしていません。
このパターンはごく簡単なサンプルでは有効かもしれませんが、実際には使えないことが多いかなと感じています。</p><p>また、gomock はそれ以外にも <a href="https://godoc.org/github.com/golang/mock/gomock#InOrder" target="_blank" rel="noopener noreferrer">gomock.InOrder</a> や <a href="https://godoc.org/github.com/golang/mock/gomock#Call.After" target="_blank" rel="noopener noreferrer">gomock#Call.After</a> など、色々便利なAPIを提供していますが、
それらは学習コストを上げてしまう要因になると思います。
gomicはそういったAPIは提供していません。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="素のgoで良いのではgomicいらなくない">素のGoで良いのでは(gomicいらなくない)?<a class="hash-link" href="#素のgoで良いのではgomicいらなくない" title="Direct link to heading">​</a></h3><p>上述のように関数を渡すだけの実装なら gomic なんて使わなくても素のGoで良いのではないかという意見もありそうですね。</p><p><a href="http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/" target="_blank" rel="noopener noreferrer">http://haya14busa.com/golang-how-to-write-mock-of-interface-for-testing/</a></p><p>でも似たようなモッキングの方法がライブラリに依存しないでmockを書くパターンとして紹介されています
(似たようなというか、<a href="https://github.com/suzuki-shunsuke/gomic/blob/v0.4.0/examples/os_mock_test.go#L20-L22" target="_blank" rel="noopener noreferrer">gomicも v0.4.0 までは構造体のフィールドに代入していました</a>)。</p><p>Goではライブラリに依存しないで標準ライブラリだけで書くのが良いという思想・意見がよく見られます。
そのため、gomicのようなツールを好まない方がいるのは承知しています。</p><p>ただ、自分はこのパターンの実装を手で愚直に書くのは辛いし、生産的ではないのでツールによって自動生成すべきだと思っています。</p><p>以下は2つのメソッドのみ持つシンプルなインタフェースとそのモックです。</p><ul><li><a href="https://github.com/suzuki-shunsuke/gomic/blob/master/examples/os.go" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/blob/master/examples/os.go</a></li><li><a href="https://github.com/suzuki-shunsuke/gomic/blob/master/examples/os_mock.go" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/blob/master/examples/os_mock.go</a></li></ul><p>とてもシンプルな interface とそのモックですが、それでもモックを実装するのはそこそこ面倒です。
メソッド、interfaceの数に比例してどんどん面倒になります。
golintのようなlinterでエラーにならないようにコードコメントを書くのも地味に大変です。</p><p>interfaceを更新すればmockも更新しないといけません。</p><p>ツールによって自動化すべきです。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="モックの使い方">モックの使い方<a class="hash-link" href="#モックの使い方" title="Direct link to heading">​</a></h2><p>生成されたモックの使い方について軽く説明します。
<a href="https://github.com/suzuki-shunsuke/gomic/releases/tag/v0.5.0" target="_blank" rel="noopener noreferrer">v0.5.0</a> 時点のものなので古くなっているかもしれません。
最新の使い方は</p><ul><li><a href="https://github.com/suzuki-shunsuke/gomic" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic</a></li><li><a href="https://github.com/suzuki-shunsuke/gomic/tree/master/examples" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/tree/master/examples</a></li></ul><p>をご確認ください。</p><p>以下のサンプルは <a href="https://github.com/suzuki-shunsuke/gomic/tree/v0.5.0/examples" target="_blank" rel="noopener noreferrer">v0.5.0のサンプル</a> を元にしています。</p><p>まず mock を生成します(以下このモックを生成する関数を"コンストラクタ"と呼びます)。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mock </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> examples</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewOSMock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>第一引数は <em>testing.T で、通常のテストならテスト関数の引数をそのまま渡せば良いし、そうでなければ nil を渡せば良いと思います。
第二引数は `func(t </em>testing.T, intfName, methodName string)` 型の関数で、interfaceのメソッドの実装がセットされていない場合に呼び出されます。nil を渡すと代わりに<a href="https://godoc.org/github.com/suzuki-shunsuke/gomic/gomic#DefaultCallbackNotImplemented" target="_blank" rel="noopener noreferrer">gomic.DefaultCallbackNotImplemented</a> が呼び出されます。</p><p>mockは interface を実装しています。</p><p>次にinterfaceのメソッドを実装した関数をmockにセットします。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">SetFuncGetwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/tmp"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Errorf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p><code>mock.Getwd</code> を呼び出すと <code>SetFuncGetwd</code> に渡した関数が呼び出されます。</p><p>上記のサンプルのように決まった値を返すだけの fake はよくあるので、以下のように簡単に書けるようにしています。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">SetReturnGetwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/tmp"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Errorf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>モックの <code>SetFuncXXX</code> 及び <code>SetReturnXXX</code> はモック自身を返すのでメソッドチェーンが出来るようになっています。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">mock </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> examples</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">NewOSMock</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">SetReturnMkdir</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">SetFuncGetwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">func</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token builtin">string</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token builtin">error</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"/tmp"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> fmt</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Errorf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">""</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>実装がセットされていない状態でモックのメソッドを呼び出すと
コンストラクタの第二引数で渡した関数が呼び出されます。</p><p>コンストラクタの第二引数がnilだと <a href="https://godoc.org/github.com/suzuki-shunsuke/gomic/gomic#DefaultCallbackNotImplemented" target="_blank" rel="noopener noreferrer">gomic.DefaultCallbackNotImplemented</a> が呼びだされます。
gomic.DefaultCallbackNotImplemented は コンストラクタの第一引数が nil だと <a href="https://golang.org/pkg/log/#Fatal" target="_blank" rel="noopener noreferrer">log.Fatal</a> を、そうでなければ <a href="https://golang.org/pkg/testing/#T.Fatal" target="_blank" rel="noopener noreferrer">testing.T#Fatal</a> を呼び出し、そこで処理を停止します。</p><p>コンストラクタの第二引数で渡した関数で log.Fatal や testing.Fatal によって処理を止めなければ、interfaceのメソッドを実装していない場合、<a href="https://golang.org/ref/spec#The_zero_value" target="_blank" rel="noopener noreferrer">zero value</a> を返す fake になります。</p><p>一番簡単なのは <a href="https://godoc.org/github.com/suzuki-shunsuke/gomic/gomic#DoNothing" target="_blank" rel="noopener noreferrer">gomic.DoNothing</a> を渡すことです。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">s</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> err </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> mock</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">Getwd</span><span class="token punctuation" style="color:#393A34">(</span><span class="token boolean" style="color:#36acaa">nil</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> gomic</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">DoNothing</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>上で説明したことは</p><p><a href="https://github.com/suzuki-shunsuke/gomic/blob/v0.5.0/examples/os_mock.go#L27-L67" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/gomic/blob/v0.5.0/examples/os_mock.go#L27-L67</a></p><p>を見てもらえばわかると思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="golang" term="golang"/>
        <category label="gomic" term="gomic"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerを使ってansible playbookをテストする]]></title>
        <id>/test-ansible-on-docker</id>
        <link href="https://techblog.szksh.cloud/test-ansible-on-docker"/>
        <updated>2018-10-12T12:02:51.000Z</updated>
        <summary type="html"><![CDATA[ansible playbookを(VMの代わりに)Dockerコンテナに対して実行すると、効率よく動作確認できるというお話です。]]></summary>
        <content type="html"><![CDATA[<p>ansible playbookを(VMの代わりに)Dockerコンテナに対して実行すると、効率よく動作確認できるというお話です。
ansible playbookの動作確認のためにvagrantでVMを起動したりしていると動作確認に時間がかかるし、容量も喰います。
Dockerコンテナを使って動作確認できればこれらの問題を解決できます。</p><p>ただし、Dockerコンテナの場合、一部のansible のtaskが失敗することがあるので
ansible playbookによってはDockerコンテナではテストにならない場合もあるかと思います。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="サンプル">サンプル<a class="hash-link" href="#サンプル" title="Direct link to heading">​</a></h2><p><a href="https://github.com/suzuki-shunsuke/example/tree/master/ansible/test-on-docker" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/example/tree/master/ansible/test-on-docker</a></p><p>簡単なサンプルを用意しました。</p><p>ansible playbookに加え、</p><ul><li>docker-compose.yml</li><li>test_docker.sh: 簡単なシェルスクリプト</li></ul><p>を作成してあります。</p><div class="codeBlockContainer_I0IT language-console theme-code-block"><div class="codeBlockContent_wNvx console"><pre tabindex="0" class="prism-code language-console codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ bash test_docker.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>とすることで動作確認できます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="説明">説明<a class="hash-link" href="#説明" title="Direct link to heading">​</a></h2><p>スクリプトでやっていることは</p><ol><li>Docker Compose でコンテナを起動</li><li>コンテナのIDを取得し、inventory ファイルを作成</li><li>Docker Connection Pluginを使ってコンテナにplaybookを実行</li></ol><p>です。</p><p>Docker Connection Plugin を使うとDockerコンテナに対してansible playbookを実行できます。</p><ul><li><a href="https://docs.ansible.com/ansible/2.6/plugins/connection.html" target="_blank" rel="noopener noreferrer">https://docs.ansible.com/ansible/2.6/plugins/connection.html</a></li><li><a href="https://docs.ansible.com/ansible/2.6/plugins/connection/docker.html" target="_blank" rel="noopener noreferrer">https://docs.ansible.com/ansible/2.6/plugins/connection/docker.html</a></li></ul><p>また、Docker Hubで公開されている多くのDockerイメージのUSERは root ですが、
ansible playbookの動作確認としては都合が悪かったりします。</p><p>そこで自分は非rootユーザーを作成したDocker Imageを使っています。</p><p><a href="https://hub.docker.com/r/suzukishunsuke/ansible-test-centos/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/r/suzukishunsuke/ansible-test-centos/</a></p><h2 class="anchor anchorWithStickyNavbar_mojV" id="関係ありそうなツール">関係ありそうなツール<a class="hash-link" href="#関係ありそうなツール" title="Direct link to heading">​</a></h2><p>今回は簡単なスクリプトとdocker-compose.ymlを用意しましたが、
もっとイケてるやり方がありそうなものです。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="vagrant-docker-provider">Vagrant Docker Provider<a class="hash-link" href="#vagrant-docker-provider" title="Direct link to heading">​</a></h3><p><a href="https://www.vagrantup.com/docs/docker/" target="_blank" rel="noopener noreferrer">https://www.vagrantup.com/docs/docker/</a></p><p>なんかあまり使えなさそうです。
Linux以外だと結局VMが必要で、既に非推奨な boot2docker をデフォルトでは使うらしくだめそうだなって思いました。
あまり調べてません。</p><p><a href="https://www.vagrantup.com/docs/docker/basics.html#host-vm" target="_blank" rel="noopener noreferrer">https://www.vagrantup.com/docs/docker/basics.html#host-vm</a></p><blockquote><p>By default, the host VM Vagrant spins up is backed by boot2docker, because it launches quickly and uses little resources. </p></blockquote><h3 class="anchor anchorWithStickyNavbar_mojV" id="ansible-container">Ansible Container<a class="hash-link" href="#ansible-container" title="Direct link to heading">​</a></h3><p><a href="https://docs.ansible.com/ansible-container/" target="_blank" rel="noopener noreferrer">https://docs.ansible.com/ansible-container/</a></p><p>よく知りません。動作確認したいだけだとオーバースペックな印象は受けます。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="packer">Packer<a class="hash-link" href="#packer" title="Direct link to heading">​</a></h3><ul><li><a href="https://www.packer.io/docs/builders/docker.html" target="_blank" rel="noopener noreferrer">https://www.packer.io/docs/builders/docker.html</a></li><li><a href="https://www.packer.io/docs/provisioners/ansible.html" target="_blank" rel="noopener noreferrer">https://www.packer.io/docs/provisioners/ansible.html</a></li></ul><p>記事を書き終わってからそういえば Packer があったなと思い出しました。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="ansible" term="ansible"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Project site を User site に移行しました (GitHub Pages)]]></title>
        <id>/migrate-to-user-gh-pages</id>
        <link href="https://techblog.szksh.cloud/migrate-to-user-gh-pages"/>
        <updated>2018-10-10T12:14:03.000Z</updated>
        <summary type="html"><![CDATA[なんとなく試験的に Project site でホスティングしていた GitHub Pages を User site に移行しました。]]></summary>
        <content type="html"><![CDATA[<p>なんとなく試験的に Project site でホスティングしていた GitHub Pages を User site に移行しました。</p><p>source code は <a href="https://github.com/suzuki-shunsuke/suzuki-shunsuke.github.io/tree/source" target="_blank" rel="noopener noreferrer">source branch</a> にあります。</p><p>CIに関しては <a href="https://suzuki-shunsuke.github.io/how-to-host-hugo-at-github-pages/" target="_blank" rel="noopener noreferrer">Hugo製ブログをGitHub PagesへCIでデプロイ</a> にも書きましたが参考になる部分もあるかもしれません。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="hugo" term="hugo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hugo製ブログをGitHub PagesへCIでデプロイ]]></title>
        <id>/how-to-host-hugo-at-github-pages</id>
        <link href="https://techblog.szksh.cloud/how-to-host-hugo-at-github-pages"/>
        <updated>2018-09-30T23:04:16.000Z</updated>
        <summary type="html"><![CDATA[https//pages.github.com/ の話です。]]></summary>
        <content type="html"><![CDATA[<p><a href="https://gohugo.io/" target="_blank" rel="noopener noreferrer">https://gohugo.io/</a> と <a href="https://pages.github.com/" target="_blank" rel="noopener noreferrer">https://pages.github.com/</a> の話です。
master に push したら GitHub Pages に circle ciでデプロイするようにする方法の紹介です。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="前提">前提<a class="hash-link" href="#前提" title="Direct link to heading">​</a></h2><ul><li>テーマは master branch に含めない(CIでcloneする)</li><li>buildしたものは gh-pages ブランチにデプロイ</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="コード">コード<a class="hash-link" href="#コード" title="Direct link to heading">​</a></h2><p>.circleci/config.yml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">---</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">docker</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">image</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> suzukishunsuke/hugo</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">ci</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">0.1.2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> checkout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> git config user.name "</span><span class="token important">***"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> git config user.email "</span><span class="token important">***@example.com"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># --depth 1 で高速化</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> git clone </span><span class="token punctuation" style="color:#393A34">-</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">depth 1 https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/suzuki</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">shunsuke/tale</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">hugo themes/tale</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> hugo</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> sh release.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">workflows</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">filters</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token key atrule" style="color:#00a4db">only</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> master</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>release.sh</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout gh-pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mv .git .circleci public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 生成物に差分があったときのみデプロイ</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">git status --porcelain</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [ -n "`git status --porcelain`" ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git add .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git commit -m "update"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git push origin gh-pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>hugo をインストールした Docker Image を用意しておきます。</p><p><a href="https://hub.docker.com/r/suzukishunsuke/hugo-ci/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/r/suzukishunsuke/hugo-ci/</a></p><p>ビルドしたものを gh-pages ブランチにデプロイする方法を工夫していて、
<code>.git</code> を <code>public</code> ディレクトリに移動しています。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">git checkout gh-pages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mv .git .circleci public</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">cd public</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>あと、ビルドされたものに差分があったときのみデプロイするようにしています。</p><div class="codeBlockContainer_I0IT language-sh theme-code-block"><div class="codeBlockContent_wNvx sh"><pre tabindex="0" class="prism-code language-sh codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">if [ -n "`git status --porcelain`" ]; then</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="hugo" term="hugo"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[travis ci から circle ci への移行のすすめ]]></title>
        <id>/migrate-from-travis-ci-to-circle-ci</id>
        <link href="https://techblog.szksh.cloud/migrate-from-travis-ci-to-circle-ci"/>
        <updated>2018-09-30T22:23:15.000Z</updated>
        <summary type="html"><![CDATA[travis ci と circle ci の無償SaaS 版を比較しています。]]></summary>
        <content type="html"><![CDATA[<p>travis ci と circle ci の無償SaaS 版を比較しています。</p><p>OSS の CI では travis ci がよく使われる印象がありますが、
場合によっては circle CI に移行するとCIの時間が大幅に短くなったりして良いと思います。
ただし、複数バージョンで並列にテストしたい場合、circle ci の無償planだと並列に実行できないため、
travis でやったほうが速いかもしれません。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="circle-ci-の良いところ">Circle CI の良いところ<a class="hash-link" href="#circle-ci-の良いところ" title="Direct link to heading">​</a></h2><ul><li>好きな Docker Image が使える</li><li>ローカルでテストが出来る</li><li>Pending 時間が travis ci に比べて短い気がする(主観)</li><li>private repository の CI も出来る</li></ul><p>好きな Docker Image が使えるのが大きいですね。
予め CI に必要なツールをインストールした Image を用意しておくことで大幅に高速化出来ますし、
ツールがインストールできなかったりバージョンが変わってしまったりするトラブルも避けられます。
同じImageを使ってローカルでテストできるのでローカルでの検証もしやすいです。</p><p>自分の場合 Golang のツールの CI用に Docker Image を用意しています。</p><p><a href="https://hub.docker.com/r/suzukishunsuke/go-ci/" target="_blank" rel="noopener noreferrer">https://hub.docker.com/r/suzukishunsuke/go-ci/</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="circleci" term="circleci"/>
        <category label="travisci" term="travisci"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[metabase を使って drone の利用状況を可視化する]]></title>
        <id>/visualize-drone-usage-by-metabase</id>
        <link href="https://techblog.szksh.cloud/visualize-drone-usage-by-metabase"/>
        <updated>2018-09-30T13:55:57.000Z</updated>
        <summary type="html"><![CDATA[drone OSS 0.8.5 で検証しています。]]></summary>
        <content type="html"><![CDATA[<p>drone OSS 0.8.5 で検証しています。</p><p><a href="https://drone.io/" target="_blank" rel="noopener noreferrer">https://drone.io/</a> と <a href="https://www.metabase.com/" target="_blank" rel="noopener noreferrer">https://www.metabase.com/</a> の話です。</p><p>drone の利用状況を可視化したかったので、
drone の DB(MySQL) のデータを metabase で可視化しました。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="どんなグラフを作ったのか">どんなグラフを作ったのか<a class="hash-link" href="#どんなグラフを作ったのか" title="Direct link to heading">​</a></h2><p>いざグラフを作成するとなると、何を作ったらいいのか迷いましたが、以下のようなものをとりあえず作ってみました。</p><ul><li>ユーザー数</li><li>有効化されたリポジトリ数</li><li>buildの多いリポジトリ</li><li>buildをよく実行しているユーザー</li><li>ビルド時間の分布</li><li>build event の割合(push, tag, pull request, deployment)</li><li>リポジトリのsecretsの数の分布</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
        <category label="metabase" term="metabase"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone の管理のために portainer を導入した]]></title>
        <id>/use-portainer-for-drone-admin</id>
        <link href="https://techblog.szksh.cloud/use-portainer-for-drone-admin"/>
        <updated>2018-09-30T12:56:42.000Z</updated>
        <summary type="html"><![CDATA[drone OSS 0.8.5 で検証しています。]]></summary>
        <content type="html"><![CDATA[<p>drone OSS 0.8.5 で検証しています。</p><p><a href="https://drone.io/" target="_blank" rel="noopener noreferrer">https://drone.io/</a> と <a href="https://portainer.io/" target="_blank" rel="noopener noreferrer">https://portainer.io/</a> の話です。</p><p>drone はかなり安定したシステムだと思いますが、
ユーザーが好きなイメージで好きなコマンドを実行できる以上、トラブルが起こることはあります。</p><p>その結果、 特定の build がタイムアウトにならずに延々と実行され続けるなんてことがあります。</p><p>その場合、</p><ol><li>どのノードのどのコンテナでトラブルが起きているのか</li><li>そのコンテナで何が起こっているのか</li></ol><p>というのを知りたいのですが、 drone にはそういった管理機能はありません。</p><p>そこで 複数のサーバで実行されている Docker コンテナを管理できるツールはないかと探したところ、
<a href="https://portainer.readthedocs.io/en/stable/" target="_blank" rel="noopener noreferrer">portainer</a> が良さそうだったので導入しました。</p><p>portainer を使うと複数のサーバのコンテナを一覧で見ることが出来、
コンテナを操作(削除、停止、再起動etc)出来ます。
コンテナのログや簡単なメトリックス(CPU, memory, network usage) が見れます。
コンテナだけでなく、network や volume, image といったリソースも管理できます。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="portainer-の導入">portainer の導入<a class="hash-link" href="#portainer-の導入" title="Direct link to heading">​</a></h2><p>公式ドキュメントに書いてありますが、 swarm cluster を構築してそこにデプロイすればよいです。</p><ul><li><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/" target="_blank" rel="noopener noreferrer">https://docs.docker.com/engine/swarm/swarm-tutorial/</a></li><li><a href="https://portainer.readthedocs.io/en/stable/deployment.html#inside-a-swarm-cluster" target="_blank" rel="noopener noreferrer">https://portainer.readthedocs.io/en/stable/deployment.html#inside-a-swarm-cluster</a></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="困っていること">困っていること<a class="hash-link" href="#困っていること" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_mojV" id="毎回検索で絞り込みしないといけない">毎回検索で絞り込みしないといけない<a class="hash-link" href="#毎回検索で絞り込みしないといけない" title="Direct link to heading">​</a></h3><p>検索で絞り込んだ後に特定のコンテナの詳細画面飛んだ後一覧に戻ると
検索がクリアされているのでもう一度検索しないといけないのが面倒です。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="もう少し高度な検索がしたい">もう少し高度な検索がしたい<a class="hash-link" href="#もう少し高度な検索がしたい" title="Direct link to heading">​</a></h3><p>自由入力の検索ボックスが1つあるだけで、特にクエリが書けるわけでもなさそうなので、
もう少し高度な検索がしたいです。
例えば Created At で 1時間以上前に特定のノードで作られたコンテナの一覧とか。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="docker-api-でエラーが出てコンテナを操作できない">docker API でエラーが出て、コンテナを操作できない<a class="hash-link" href="#docker-api-でエラーが出てコンテナを操作できない" title="Direct link to heading">​</a></h3><p>これは多分不具合とかではなく自分の設定が良くないのだと思います。
この辺の issue が関係してそうですが、まだ解消できていません。</p><ul><li><a href="https://github.com/portainer/portainer/issues/831" target="_blank" rel="noopener noreferrer">https://github.com/portainer/portainer/issues/831</a></li><li><a href="https://github.com/portainer/portainer/issues/1897" target="_blank" rel="noopener noreferrer">https://github.com/portainer/portainer/issues/1897</a></li></ul><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">http error: Unable to proxy the request via the Docker socket (err=context canceled) (code=500)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">cron error: endpoint snapshot error (endpoint=primary, URL=tcp://tasks.agent:9001) (err=Cannot connect to the Docker daemon at tcp://tasks.agent:9001. Is the docker daemon running?)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">http error: Unable to execute cluster operation (err=Get https://192.160.0.16:9001/volumes: net/http: request canceled (Client.Timeout exceeded while awaiting headers)) (code=500)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
        <category label="portainer" term="portainer"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone で非rootユーザーで実行されるImageを使えない]]></title>
        <id>/drone-cant-use-nonroot-image</id>
        <link href="https://techblog.szksh.cloud/drone-cant-use-nonroot-image"/>
        <updated>2018-09-30T12:42:16.000Z</updated>
        <summary type="html"><![CDATA[drone で非rootユーザーで実行されるDocker Imageを使おうとするとbuildに失敗します。]]></summary>
        <content type="html"><![CDATA[<p>drone で非rootユーザーで実行されるDocker Imageを使おうとするとbuildに失敗します。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">/bin/sh: 3: cannot create /root/.netrc: Permission denied</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>これについては drone の開発者が回答しています。</p><ul><li><a href="https://discourse.drone.io/t/solved-netrc-permission-denied/171/2" target="_blank" rel="noopener noreferrer">https://discourse.drone.io/t/solved-netrc-permission-denied/171/2</a></li><li><a href="https://discourse.drone.io/t/solved-netrc-permission-denied/171/4" target="_blank" rel="noopener noreferrer">https://discourse.drone.io/t/solved-netrc-permission-denied/171/4</a></li></ul><p>結論を言うと、
他のイメージを使うか、
rootで実行されるようにイメージを修正する必要がありそうです。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone の step を実行するか否かをタグ名で判定する方法]]></title>
        <id>/drone-tag-conditional-step</id>
        <link href="https://techblog.szksh.cloud/drone-tag-conditional-step"/>
        <updated>2018-09-30T12:30:06.000Z</updated>
        <summary type="html"><![CDATA[drone 0.8.5 で検証しています。]]></summary>
        <content type="html"><![CDATA[<p>drone 0.8.5 で検証しています。</p><p>tag 名による判定方法はドキュメントには書いてないので書いておきます。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">when:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ref: refs/tags/foo-*  # タグ名が foo-* ならステップを実行</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>グロブ <code>*</code> には <code>/</code> は含まれないことには注意してください。</p><p>上記の例だと、 tag <code>foo/bar/0.1.0</code> はマッチしません。
これは Go の <a href="https://golang.org/pkg/path/filepath/#Match" target="_blank" rel="noopener noreferrer">filepath.Match</a> を使っているからです。</p><ul><li><a href="https://github.com/cncd/pipeline/blob/f8c48fc9fb9fd113c6e7dd941d63bb9f86a623cb/pipeline/frontend/yaml/constraint.go#L70" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/f8c48fc9fb9fd113c6e7dd941d63bb9f86a623cb/pipeline/frontend/yaml/constraint.go#L70</a></li><li><a href="https://github.com/cncd/pipeline/blob/f8c48fc9fb9fd113c6e7dd941d63bb9f86a623cb/pipeline/frontend/yaml/constraint.go#L80" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/f8c48fc9fb9fd113c6e7dd941d63bb9f86a623cb/pipeline/frontend/yaml/constraint.go#L80</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone の project visibility とは]]></title>
        <id>/drone-project-visibility</id>
        <link href="https://techblog.szksh.cloud/drone-project-visibility"/>
        <updated>2018-09-30T11:32:20.000Z</updated>
        <summary type="html"><![CDATA[恐らく公式ドキュメントに説明がない気がするので書いておきます。]]></summary>
        <content type="html"><![CDATA[<p>恐らく公式ドキュメントに説明がない気がするので書いておきます。
と言っても、以下のissueに全部書いてありますが。</p><p><a href="https://github.com/drone/drone/issues/2042" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/issues/2042</a></p><p>droneの web ui からリポジトリごとに設定できます。
そのリポジトリが誰に見えるかの設定です。</p><ul><li>public: ログインしていなくても誰でも見れる(publicリポジトリのデフォルト)</li><li>private: リポジトリにアクセスできる人しか見れない(privateリポジトリのデフォルト)</li><li>internal: ログインしていれば誰でも見れる</li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone の matrix build が27個しか実行されない]]></title>
        <id>/drone-matrix-build-run-only-27</id>
        <link href="https://techblog.szksh.cloud/drone-matrix-build-run-only-27"/>
        <updated>2018-09-30T11:26:11.000Z</updated>
        <summary type="html"><![CDATA[drone 0.8.5 で検証しています。]]></summary>
        <content type="html"><![CDATA[<p>drone 0.8.5 で検証しています。</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">matrix</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">ZOO</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">FOO</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">8</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">BAR</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>上記の場合、本来 4 <em> 8 </em> 2 = 64 個実行されるはずのmatrix builds が27個しか実行されなかったのでソースコードを確認したところ、
27個しか実行されないようにハードコードされていました。</p><ul><li><a href="https://github.com/cncd/pipeline/blob/d4e09fd3021a16408bc3ebdd3500efd28f51e72c/pipeline/frontend/yaml/matrix/matrix.go#L11" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/d4e09fd3021a16408bc3ebdd3500efd28f51e72c/pipeline/frontend/yaml/matrix/matrix.go#L11</a></li><li><a href="https://github.com/cncd/pipeline/blob/d4e09fd3021a16408bc3ebdd3500efd28f51e72c/pipeline/frontend/yaml/matrix/matrix.go#L93" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/d4e09fd3021a16408bc3ebdd3500efd28f51e72c/pipeline/frontend/yaml/matrix/matrix.go#L93</a></li></ul><p>関係ある部分だけ抽出すると以下のような感じになります。</p><div class="codeBlockContainer_I0IT language-go theme-code-block"><div class="codeBlockContent_wNvx go"><pre tabindex="0" class="prism-code language-go codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">limitAxis </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">25</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">axisList </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain">Axis</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> p </span><span class="token operator" style="color:#393A34">:=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> p </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> perm</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> p</span><span class="token operator" style="color:#393A34">++</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    axisList </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">axisList</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> axis</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> p </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> limitAxis </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">break</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>制限をかけるのは仕方ないですが、
エラーも warning もなく正常終了し、でもよく見ると 27 個しか実行されていないので
ユーザーとしては混乱しますね。
build の結果の画面の上の方に warning があると嬉しいです。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone の build の timeout が変更できない]]></title>
        <id>/drone-build-timeout</id>
        <link href="https://techblog.szksh.cloud/drone-build-timeout"/>
        <updated>2018-09-30T11:16:28.000Z</updated>
        <summary type="html"><![CDATA[drone 0.8.5 で検証しています。]]></summary>
        <content type="html"><![CDATA[<p>drone 0.8.5 で検証しています。</p><p>drone の build の タイムアウトの設定はリポジトリの settings から変更できそうですが、
実は drone の admin しか変更できません。</p><p>ブラウザのデベロッパーツールを使うと、この Timeout の設定を変更した際に</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">PATCH /api/repos/:owner/:name</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>にリクエストが飛んでいるので、そこからコードを追いかけると分かります。</p><ul><li><a href="https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/router/router.go#L109" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/router/router.go#L109</a></li><li><a href="https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/server/repo.go#L117" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/server/repo.go#L117</a></li></ul>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone の build 実行時の認証方法]]></title>
        <id>/drone-git-authentication</id>
        <link href="https://techblog.szksh.cloud/drone-git-authentication"/>
        <updated>2018-09-30T10:44:27.000Z</updated>
        <summary type="html"><![CDATA[drone の build における GitHub (GitHub前提で書きますが、GitHub以外でも同じだと思います) の認証の話(どうやって認証しているか)について書いておこうと思います。]]></summary>
        <content type="html"><![CDATA[<p>drone の build における GitHub (GitHub前提で書きますが、GitHub以外でも同じだと思います) の認証の話(どうやって認証しているか)について書いておこうと思います。
drone の build は clone step で対象のリポジトリを GitHub から clone してきています。
この際に何かしらの方法で認証しているはずです。</p><p>結論を言うと、</p><p>あるリポジトリAのbuildでは、
リポジトリAの <strong>drone連携を有効化したユーザー</strong> Bの access token を <strong>.netrc</strong> に書き込んで認証しています。
よってユーザーBにcloneする権限があるリポジトリはcloneできるし、
ユーザーBにcloneする権限がないリポジトリはcloneできません。
つまり、 <strong>誰が連携を有効化するかが重要</strong> になります(これについては後述します)。
なお、drone連携の有効化はそのリポジトリのowner以上でないと出来ません。</p><p>drone上でリポジトリの連携を有効化すると、
リポジトリのHookが作成されます。
リポジトリの settings &gt; Hooks から確認できます。
この Hook の Payload URL を見ると access_token クエリがあると思います。
JWTのようですね。これはリポジトリの連携を有効化したユーザーのtokenです。</p><p>このtokenが GitHub から drone への webhook のパラメータとして送られてくるので、
drone 側で認証し、認証したユーザーのGitHub  のaccess token を取得し、
build 時にコンテナの /root/.netrc に書き込むようです。</p><p>.netrcに書き込まれているのは試しに個人の private repository で .netrc をcatしてみればわかります。
他人も見えるrepositoryでcatすると悪用されかねないので気をつけましょう。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">pipeline:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">netrc:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">image: alpine:3.6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">commands:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">- cat ~/.netrc</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">+ cat ~/.netrc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">machine gihub.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">login **************</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">password x-oauth-basic</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="cloneステップ以外での-netrcの活用">cloneステップ以外での .netrcの活用<a class="hash-link" href="#cloneステップ以外での-netrcの活用" title="Direct link to heading">​</a></h2><p>.netrc のおかげで難しいこと考えずに clone 出来ているわけですが、この .netrc は当然 clone ステップ以外でも使えます。
例えば private repository の ansible role の install です。</p><p>roles.yml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">src</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> https</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">//github.com/&lt;owner</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain">/&lt;repo</span><span class="token punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> foo.bar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">scm</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> git</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>.drone.yml</p><div class="codeBlockContainer_I0IT language-yaml theme-code-block"><div class="codeBlockContent_wNvx yaml"><pre tabindex="0" class="prism-code language-yaml codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">commands</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> ansible</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">galaxy install </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">r roles.yml</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="誰が連携を有効化するべきか">誰が連携を有効化するべきか<a class="hash-link" href="#誰が連携を有効化するべきか" title="Direct link to heading">​</a></h2><p>結論を言うと、ベストな方法は分かりません。</p><p>連携を有効化した人が退職してしまったり、organizationから抜けてしまった場合、急にビルドが失敗するリスクがあります。
理想を言えば特定の個人のアカウントで連携するのではなく、連携用のアカウントを用意するのが良いのかもしれませんが、
それはそれで運用が難しいかもしれません。</p><p>drone API ないし CLI で有効化は出来るので、CIで連携を自動化することは可能だと思います。</p><ul><li><a href="https://0-8-0.docs.drone.io/cli-repository-add/" target="_blank" rel="noopener noreferrer">https://0-8-0.docs.drone.io/cli-repository-add/</a></li><li><a href="https://0-8-0.docs.drone.io/api-repo-create/" target="_blank" rel="noopener noreferrer">https://0-8-0.docs.drone.io/api-repo-create/</a></li></ul><p>自分のところではまだそこまでやってなく、個人で有効化してしまっているのですが、
自動化したらまた記事にでもしたいと思います。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Drone と Circle CI の workspace の扱いの違いについて]]></title>
        <id>/drone-circle-volume-difference</id>
        <link href="https://techblog.szksh.cloud/drone-circle-volume-difference"/>
        <updated>2018-09-30T10:27:59.000Z</updated>
        <summary type="html"><![CDATA[drone は同じ pipeline の step 間で同じ workspace を docker の volume としてマウントすることで workspace を共有します。]]></summary>
        <content type="html"><![CDATA[<p>drone は同じ pipeline の step 間で同じ workspace を docker の volume としてマウントすることで workspace を共有します。</p><p><a href="http://docs.drone.io/workspace/" target="_blank" rel="noopener noreferrer">http://docs.drone.io/workspace/</a></p><p>circle ci はデフォルトで job 間で workspace を共有しません。
persist_to_workspace を指定することで共有する事ができます。</p><p><a href="https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs" target="_blank" rel="noopener noreferrer">https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs</a></p><p>circle ci の場合は volume を共有するのではなく、指定したディレクトリを archive し、次の job で展開することでファイルを共有するようです。</p><p>この違いには一長一短があります。</p><p>circle ci の場合は archive, unarchive する分、volume 共有に比べて時間がかかります。</p><p>そのため、下手に job を分けるより一つの job で処理したほうが処理時間が短くなる場合がありますが、
build や test といった処理は出来れば別の job として実行したいでしょうし、それでは workflow が使えません。</p><p>ただし、共有するパスは自由に選べるので必要最小限に抑えることで時間を短縮できます。</p><p>また、circle ci の場合は archive するパス及び展開先のパスを自由に選べるので自由度が高いです。
drone の場合、 workspace 以外のファイルを共有できません。</p><p>また、drone の場合 volume を共有するので同じ pipeline の step は同じノードで実行されるという制約がありますが、
circle ci の場合、別のノードでの実行が可能です。
drone の group を使って並列に実行する場合、複数のノードに分散できませんが、 circle ci の場合分散できるのでよりスケールしやすいと言えるでしょう。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="結局どっちのほうがいいのか">結局どっちのほうがいいのか<a class="hash-link" href="#結局どっちのほうがいいのか" title="Direct link to heading">​</a></h2><p>一長一短があると言ったとおり、一概にどっちが良いとは言えませんが、個人的には drone のやり方のほうが直感的だし、
何より速いので好きです。同じ pipeline の処理を複数のノードに分散させたいことって個人的にはあまりありません。</p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
        <category label="circleci" term="circleci"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[drone exec を並列実行した際のdocker network name の衝突について]]></title>
        <id>/drone-exec-network-name-collision</id>
        <link href="https://techblog.szksh.cloud/drone-exec-network-name-collision"/>
        <updated>2018-09-30T09:52:34.000Z</updated>
        <summary type="html"><![CDATA[drone exec を並列実行すると docker network name が衝突することがあります。]]></summary>
        <content type="html"><![CDATA[<p>drone exec を並列実行すると docker network name が衝突することがあります。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ drone exec --local &amp; drone exec --local</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1] 42934</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2018/06/06 01:58:12 Error response from daemon: network drone_default is ambiguous (4 matches found on name)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">2018/06/06 01:58:12 Error response from daemon: Conflict. The container name "/drone_step_0" is already in use by container "464a29b0726d6ff1a352d81df9c837330501085be550bb16abac3d338dfad887". You have to remove (or rename) that container to be able to reuse that name.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[1]  + exit 1     drone exec --local</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>drone は pipeline 実行時に network を作成し、pipeline が終了すると network を削除します。</p><ul><li><a href="https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/pipeline.go#L58" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/pipeline.go#L58</a></li><li><a href="https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/pipeline.go#L62" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/pipeline.go#L62</a></li><li><a href="https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/backend/docker/docker.go#L50" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/backend/docker/docker.go#L50</a></li><li><a href="https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/backend/docker/docker.go#L179" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/backend/docker/docker.go#L179</a></li></ul><p>削除するので、並列で実行しない限り基本的に衝突したりすることはありません。</p><p>なお、 docker の仕様では同じ名前の network を作成できるようです。</p><ul><li><a href="https://github.com/moby/moby/issues/20648" target="_blank" rel="noopener noreferrer">https://github.com/moby/moby/issues/20648</a></li><li><a href="https://github.com/moby/moby/issues/18864" target="_blank" rel="noopener noreferrer">https://github.com/moby/moby/issues/18864</a></li></ul><p><code>drone exec</code> は <code>{prefix}_default</code> というネットワークを作成します。</p><p><a href="https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/frontend/yaml/compiler/compiler.go#L85" target="_blank" rel="noopener noreferrer">https://github.com/cncd/pipeline/blob/b03959913369b4e2a6c49be514f52d076ef6b172/pipeline/frontend/yaml/compiler/compiler.go#L85</a></p><p><code>{prefix}</code> はデフォルトで <code>drone</code> ですが、コマンドライン引数で指定できます。</p><p><a href="https://github.com/drone/drone-cli/blob/800d6949bd96847b4d5c400e261b18386ea2226f/drone/exec/exec.go#L62" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone-cli/blob/800d6949bd96847b4d5c400e261b18386ea2226f/drone/exec/exec.go#L62</a></p><p>このprefixを変えれば衝突は回避できます。
bash, zshなら次のように乱数を指定すれば良いと思います。</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ drone exec --local --prefix drone_${RANDOM}</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>なお、 <code>drone exec --help</code> の中に <code>--prefix</code> オプションはありませんが、これは明示的にhelpから消しているからです。</p><p><a href="https://github.com/drone/drone-cli/blob/eca37514c1c3a441dbb0618531b91e05f56067e8/drone/exec/exec.go#L65" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone-cli/blob/eca37514c1c3a441dbb0618531b91e05f56067e8/drone/exec/exec.go#L65</a></p><p>なぜ消しているかは分かりません。</p><p>なお、 drone の build では prefix に プロセスIDと乱数を使うことで衝突を避けているようです。</p><p><a href="https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/server/hook.go#L552" target="_blank" rel="noopener noreferrer">https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/server/hook.go#L552</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="drone" term="drone"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[go-gencfg - viperの個々のアプリケーション用のラッパーのコードジェネレータ]]></title>
        <id>/go-gencfg</id>
        <link href="https://techblog.szksh.cloud/go-gencfg"/>
        <updated>2018-09-06T14:59:35.000Z</updated>
        <summary type="html"><![CDATA[自作のOSS go-gencfg を紹介します。]]></summary>
        <content type="html"><![CDATA[<p>自作のOSS <a href="https://github.com/suzuki-shunsuke/go-gencfg" target="_blank" rel="noopener noreferrer">go-gencfg</a> を紹介します。
Golang で <a href="https://github.com/spf13/viper" target="_blank" rel="noopener noreferrer">viper</a> という汎用的な設定管理ライブラリがありますが、
特定のアプリケーション用に viper のラッパーを生成するCLIツールです。</p><p>使い方や開発の背景を書こうかと思いましたが、だいたい README に書いてあるので
そちらを御覧ください。</p><p><a href="https://github.com/suzuki-shunsuke/go-gencfg/blob/master/README.md" target="_blank" rel="noopener noreferrer">https://github.com/suzuki-shunsuke/go-gencfg/blob/master/README.md</a></p>]]></content>
        <author>
            <name>Shunsuke Suzuki</name>
            <uri>https://github.com/suzuki-shunsuke</uri>
        </author>
        <category label="oss" term="oss"/>
        <category label="golang" term="golang"/>
    </entry>
</feed>