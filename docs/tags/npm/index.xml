<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>npm on melody</title>
    <link>https://techblog.szksh.cloud/tags/npm/</link>
    <description>Recent content in npm on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Thu, 14 Feb 2019 21:34:22 +0900</lastBuildDate><atom:link href="https://techblog.szksh.cloud/tags/npm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JS以外でのnpmの活用</title>
      <link>https://techblog.szksh.cloud/use-npm/</link>
      <pubDate>Thu, 14 Feb 2019 21:34:22 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/use-npm/</guid>
      <description>npm は Node.js のパッケージマネージャーですが、自分はJS以外のプロジェクトでも使えると思っています。 実際、Goのアプリケーション、OSS、ansible role, playbook など種類を問わず、自分が管理している多くのリポジトリで使っています。 ただ、GoのOSSで npm 使っているのは自分以外で見たことはないですし、 正直あまり賛同はされないかなと思いますが、こういう考え方もあると思っていただけたらと思います。
npm を使う理由は
 Node製のツールを使うため npm scripts を使うため (今回書きたいのはこっち)  の2つあります。
Node製のツール  husky: Git Hookを設定 commitlint: commit メッセージのlint standard-version: コミットログによって Change Log を生成  などを使っています。 Nodeはバージョンの変化が速く、互換性が壊れたりとかも多い印象ですが、 グローバルにインストールしなくてもリポジトリごとに install 出来る(package.jsonで管理できる)のでその点は(特にチーム開発では)良いと思います。
npm scripts npm scripts によってそのリポジトリの開発に使うコマンド群を管理するということを自分はしています。
https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/package.json
なにもツールを使わない場合に比べ、こうすることでチーム全体でコマンドを統一できますし、一連のコマンドをスクリプト化して npm scripts で実行できるようにするなど、自動化も促進されます。
ごく簡単な自動化の例ですが、tag を打つと同時にソースコード中のバージョン番号を更新するのを npm run tag v1.1.0 といったコマンドで出来るようにしています。 こうすることで tag とversionコマンドで出力されるバージョンが違うなんてことを防ぐことが出来ます。
https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/scripts/tag.sh
また、オプションによって動作が変わるようなコマンドは npm scripts によって実行することでオプションを統一できます。 例えば gofmt は -s オプションの有無で結果が変わります。</description>
    </item>
    
  </channel>
</rss>
