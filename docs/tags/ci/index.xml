<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ci on melody</title>
    <link>https://techblog.szksh.cloud/tags/ci/</link>
    <description>Recent content in ci on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Sun, 02 Aug 2020 13:21:37 +0900</lastBuildDate><atom:link href="https://techblog.szksh.cloud/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS CodeBuild 良さそう</title>
      <link>https://techblog.szksh.cloud/codebuild-1/</link>
      <pubDate>Sun, 02 Aug 2020 13:21:37 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/codebuild-1/</guid>
      <description>AWS CodeBuild を検証しているんですが、結構良いですね。 現状 Jenkins や CircleCI で実行しているジョブや CI/CD を一部移行したいなと思いました。
一部と言っているのは、単純に全部いきなり移行するのは難しいから共存する前提で考えるくらいの意味です。
なお、これを書いている時点ではまだ軽く検証しているだけなので、CodeBuild の理解は浅いです。
特徴としては
 Managed AWS 以外のサービスに AWS の credential を登録しなくて良い  Secret を AWS Secrets Manager で管理できる Secret を至るところに設定するのではなく、 AWS Secrets Manager か何かで一元管理するのが理想 Role 作って Build Project の Service Role として指定するだけなら credential を扱う必要がなくて楽で安心   VPC 内で実行できる GitHub 連携も簡単  Webhook の設定で PR の細かなイベント(merge とか reopen とか)に対応しているのも良い PR を merge したときも PR で変更されたファイルによって Webhook をフィルタできるのが良い   変更されたファイルによって実行するBuild Project を変更するようなロジックを実現できる(monorepo で特に有効)  といった点が挙げられます。</description>
    </item>
    
    <item>
      <title>Graylog の Terraform を CI/CDで実行する</title>
      <link>https://techblog.szksh.cloud/graylog-terraform-ci/</link>
      <pubDate>Fri, 07 Dec 2018 08:22:49 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/graylog-terraform-ci/</guid>
      <description>以前 Graylog を Terraform で管理する記事を書きました。
https://suzuki-shunsuke.github.io/graylog-terraform/
今回はそれを CI/CD で実行できるようにした話です。
ただし、今回の内容は Graylog に限らず Terraform を CI/CD で実行する方法として使えると思います。
今回実現したのは以下のことです。
 PR時にテストをする plan/* tag を push すると terraform plan が実行される apply/* tag を push すると terraform apply が実行され、tfstate がコミット、プッシュされる  ソースコード https://github.com/suzuki-shunsuke/example/tree/master/graylog-terraform に置いておきました。
 https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/role.tf#L13-L25 https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/user.tf#L12-L21 https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/.drone.yml https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/terraform.tfvars.tpl https://github.com/suzuki-shunsuke/example/blob/master/graylog-terraform/drone_pipeline_commands/git.sh  CI/CD用の user, role を作成する まずは role を作成します。
resource &amp;quot;graylog_role&amp;quot; &amp;quot;terraform&amp;quot; { name = &amp;quot;terraform&amp;quot; description = &amp;quot;terraform&amp;quot; permissions = [ &amp;quot;dashboards:*&amp;quot;, &amp;quot;indexsets:*&amp;quot;, &amp;quot;inputs:*&amp;quot;, &amp;quot;roles:*&amp;quot;, &amp;quot;streams:*&amp;quot;, &amp;quot;users:*&amp;quot;, ] } permission は terraform で管理するリソースのみ付与しますが、 それでも結構強い権限を付与するので取扱に注意してください。</description>
    </item>
    
  </channel>
</rss>
