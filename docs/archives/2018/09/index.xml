<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018/09 on melody</title>
    <link>https://techblog.szksh.cloud/archives/2018/09/</link>
    <description>Recent content in 2018/09 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language><atom:link href="https://techblog.szksh.cloud/archives/2018/09/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>metabase を使って drone の利用状況を可視化する</title>
      <link>https://techblog.szksh.cloud/visualize-drone-usage-by-metabase/</link>
      <pubDate>Sun, 30 Sep 2018 22:55:57 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/visualize-drone-usage-by-metabase/</guid>
      <description>drone OSS 0.8.5 で検証しています。
https://drone.io/ と https://www.metabase.com/ の話です。
drone の利用状況を可視化したかったので、 drone の DB(MySQL) のデータを metabase で可視化しました。
どんなグラフを作ったのか いざグラフを作成するとなると、何を作ったらいいのか迷いましたが、以下のようなものをとりあえず作ってみました。
 ユーザー数 有効化されたリポジトリ数 buildの多いリポジトリ buildをよく実行しているユーザー ビルド時間の分布 build event の割合(push, tag, pull request, deployment) リポジトリのsecretsの数の分布  </description>
    </item>
    
    <item>
      <title>drone の管理のために portainer を導入した</title>
      <link>https://techblog.szksh.cloud/use-portainer-for-drone-admin/</link>
      <pubDate>Sun, 30 Sep 2018 21:56:42 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/use-portainer-for-drone-admin/</guid>
      <description>drone OSS 0.8.5 で検証しています。
https://drone.io/ と https://portainer.io/ の話です。
drone はかなり安定したシステムだと思いますが、 ユーザーが好きなイメージで好きなコマンドを実行できる以上、トラブルが起こることはあります。
その結果、 特定の build がタイムアウトにならずに延々と実行され続けるなんてことがあります。
その場合、
 どのノードのどのコンテナでトラブルが起きているのか そのコンテナで何が起こっているのか  というのを知りたいのですが、 drone にはそういった管理機能はありません。
そこで 複数のサーバで実行されている Docker コンテナを管理できるツールはないかと探したところ、 portainer が良さそうだったので導入しました。
portainer を使うと複数のサーバのコンテナを一覧で見ることが出来、 コンテナを操作(削除、停止、再起動etc)出来ます。 コンテナのログや簡単なメトリックス(CPU, memory, network usage) が見れます。 コンテナだけでなく、network や volume, image といったリソースも管理できます。
portainer の導入 公式ドキュメントに書いてありますが、 swarm cluster を構築してそこにデプロイすればよいです。
 https://docs.docker.com/engine/swarm/swarm-tutorial/ https://portainer.readthedocs.io/en/stable/deployment.html#inside-a-swarm-cluster  困っていること 毎回検索で絞り込みしないといけない 検索で絞り込んだ後に特定のコンテナの詳細画面飛んだ後一覧に戻ると 検索がクリアされているのでもう一度検索しないといけないのが面倒です。
もう少し高度な検索がしたい 自由入力の検索ボックスが1つあるだけで、特にクエリが書けるわけでもなさそうなので、 もう少し高度な検索がしたいです。 例えば Created At で 1時間以上前に特定のノードで作られたコンテナの一覧とか。
docker API でエラーが出て、コンテナを操作できない これは多分不具合とかではなく自分の設定が良くないのだと思います。 この辺の issue が関係してそうですが、まだ解消できていません。</description>
    </item>
    
    <item>
      <title>drone で非rootユーザーで実行されるImageを使えない</title>
      <link>https://techblog.szksh.cloud/drone-cant-use-nonroot-image/</link>
      <pubDate>Sun, 30 Sep 2018 21:42:16 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-cant-use-nonroot-image/</guid>
      <description>drone で非rootユーザーで実行されるDocker Imageを使おうとするとbuildに失敗します。
/bin/sh: 3: cannot create /root/.netrc: Permission denied これについては drone の開発者が回答しています。
 https://discourse.drone.io/t/solved-netrc-permission-denied/171/2 https://discourse.drone.io/t/solved-netrc-permission-denied/171/4  結論を言うと、 他のイメージを使うか、 rootで実行されるようにイメージを修正する必要がありそうです。</description>
    </item>
    
    <item>
      <title>drone の step を実行するか否かをタグ名で判定する方法</title>
      <link>https://techblog.szksh.cloud/drone-tag-conditional-step/</link>
      <pubDate>Sun, 30 Sep 2018 21:30:06 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-tag-conditional-step/</guid>
      <description>drone 0.8.5 で検証しています。
tag 名による判定方法はドキュメントには書いてないので書いておきます。
when: ref: refs/tags/foo-* # タグ名が foo-* ならステップを実行 グロブ * には / は含まれないことには注意してください。
上記の例だと、 tag foo/bar/0.1.0 はマッチしません。 これは Go の filepath.Match を使っているからです。
 https://github.com/cncd/pipeline/blob/f8c48fc9fb9fd113c6e7dd941d63bb9f86a623cb/pipeline/frontend/yaml/constraint.go#L70 https://github.com/cncd/pipeline/blob/f8c48fc9fb9fd113c6e7dd941d63bb9f86a623cb/pipeline/frontend/yaml/constraint.go#L80  </description>
    </item>
    
    <item>
      <title>drone の project visibility とは</title>
      <link>https://techblog.szksh.cloud/drone-project-visibility/</link>
      <pubDate>Sun, 30 Sep 2018 20:32:20 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-project-visibility/</guid>
      <description>恐らく公式ドキュメントに説明がない気がするので書いておきます。 と言っても、以下のissueに全部書いてありますが。
https://github.com/drone/drone/issues/2042
droneの web ui からリポジトリごとに設定できます。 そのリポジトリが誰に見えるかの設定です。
 public: ログインしていなくても誰でも見れる(publicリポジトリのデフォルト) private: リポジトリにアクセスできる人しか見れない(privateリポジトリのデフォルト) internal: ログインしていれば誰でも見れる  </description>
    </item>
    
    <item>
      <title>drone の matrix build が27個しか実行されない</title>
      <link>https://techblog.szksh.cloud/drone-matrix-build-run-only-27/</link>
      <pubDate>Sun, 30 Sep 2018 20:26:11 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-matrix-build-run-only-27/</guid>
      <description>drone 0.8.5 で検証しています。
matrix: ZOO: - 1 - 2 - 3 - 4 FOO: - 1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 BAR: - 1 - 2 上記の場合、本来 4 * 8 * 2 = 64 個実行されるはずのmatrix builds が27個しか実行されなかったのでソースコードを確認したところ、 27個しか実行されないようにハードコードされていました。
 https://github.com/cncd/pipeline/blob/d4e09fd3021a16408bc3ebdd3500efd28f51e72c/pipeline/frontend/yaml/matrix/matrix.go#L11 https://github.com/cncd/pipeline/blob/d4e09fd3021a16408bc3ebdd3500efd28f51e72c/pipeline/frontend/yaml/matrix/matrix.go#L93  関係ある部分だけ抽出すると以下のような感じになります。
limitAxis = 25 axisList := []Axis{} for p := 0; p &amp;lt; perm; p++ { axisList = append(axisList, axis) if p &amp;gt; limitAxis { break } } 制限をかけるのは仕方ないですが、 エラーも warning もなく正常終了し、でもよく見ると 27 個しか実行されていないので ユーザーとしては混乱しますね。 build の結果の画面の上の方に warning があると嬉しいです。</description>
    </item>
    
    <item>
      <title>drone の build の timeout が変更できない</title>
      <link>https://techblog.szksh.cloud/drone-build-timeout/</link>
      <pubDate>Sun, 30 Sep 2018 20:16:28 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-build-timeout/</guid>
      <description>drone 0.8.5 で検証しています。
drone の build の タイムアウトの設定はリポジトリの settings から変更できそうですが、 実は drone の admin しか変更できません。
ブラウザのデベロッパーツールを使うと、この Timeout の設定を変更した際に
PATCH /api/repos/:owner/:name にリクエストが飛んでいるので、そこからコードを追いかけると分かります。
 https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/router/router.go#L109 https://github.com/drone/drone/blob/29785b86f6534ded974120de0fcf7c21397a9d0d/server/repo.go#L117  </description>
    </item>
    
    <item>
      <title>Drone の build 実行時の認証方法</title>
      <link>https://techblog.szksh.cloud/drone-git-authentication/</link>
      <pubDate>Sun, 30 Sep 2018 19:44:27 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-git-authentication/</guid>
      <description>drone の build における GitHub (GitHub前提で書きますが、GitHub以外でも同じだと思います) の認証の話(どうやって認証しているか)について書いておこうと思います。 drone の build は clone step で対象のリポジトリを GitHub から clone してきています。 この際に何かしらの方法で認証しているはずです。
結論を言うと、
あるリポジトリAのbuildでは、 リポジトリAの drone連携を有効化したユーザー Bの access token を .netrc に書き込んで認証しています。 よってユーザーBにcloneする権限があるリポジトリはcloneできるし、 ユーザーBにcloneする権限がないリポジトリはcloneできません。 つまり、 誰が連携を有効化するかが重要 になります(これについては後述します)。 なお、drone連携の有効化はそのリポジトリのowner以上でないと出来ません。
drone上でリポジトリの連携を有効化すると、 リポジトリのHookが作成されます。 リポジトリの settings &amp;gt; Hooks から確認できます。 この Hook の Payload URL を見ると access_token クエリがあると思います。 JWTのようですね。これはリポジトリの連携を有効化したユーザーのtokenです。
このtokenが GitHub から drone への webhook のパラメータとして送られてくるので、 drone 側で認証し、認証したユーザーのGitHub のaccess token を取得し、 build 時にコンテナの /root/.netrc に書き込むようです。
.netrcに書き込まれているのは試しに個人の private repository で .</description>
    </item>
    
    <item>
      <title>Drone と Circle CI の workspace の扱いの違いについて</title>
      <link>https://techblog.szksh.cloud/drone-circle-volume-difference/</link>
      <pubDate>Sun, 30 Sep 2018 19:27:59 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-circle-volume-difference/</guid>
      <description>drone は同じ pipeline の step 間で同じ workspace を docker の volume としてマウントすることで workspace を共有します。
http://docs.drone.io/workspace/
circle ci はデフォルトで job 間で workspace を共有しません。 persist_to_workspace を指定することで共有する事ができます。
https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
circle ci の場合は volume を共有するのではなく、指定したディレクトリを archive し、次の job で展開することでファイルを共有するようです。
この違いには一長一短があります。
circle ci の場合は archive, unarchive する分、volume 共有に比べて時間がかかります。
そのため、下手に job を分けるより一つの job で処理したほうが処理時間が短くなる場合がありますが、 build や test といった処理は出来れば別の job として実行したいでしょうし、それでは workflow が使えません。
ただし、共有するパスは自由に選べるので必要最小限に抑えることで時間を短縮できます。
また、circle ci の場合は archive するパス及び展開先のパスを自由に選べるので自由度が高いです。 drone の場合、 workspace 以外のファイルを共有できません。
また、drone の場合 volume を共有するので同じ pipeline の step は同じノードで実行されるという制約がありますが、 circle ci の場合、別のノードでの実行が可能です。 drone の group を使って並列に実行する場合、複数のノードに分散できませんが、 circle ci の場合分散できるのでよりスケールしやすいと言えるでしょう。</description>
    </item>
    
    <item>
      <title>drone exec を並列実行した際のdocker network name の衝突について</title>
      <link>https://techblog.szksh.cloud/drone-exec-network-name-collision/</link>
      <pubDate>Sun, 30 Sep 2018 18:52:34 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/drone-exec-network-name-collision/</guid>
      <description>drone exec を並列実行すると docker network name が衝突することがあります。
$ drone exec --local &amp;amp; drone exec --local [1] 42934 2018/06/06 01:58:12 Error response from daemon: network drone_default is ambiguous (4 matches found on name) 2018/06/06 01:58:12 Error response from daemon: Conflict. The container name &amp;quot;/drone_step_0&amp;quot; is already in use by container &amp;quot;464a29b0726d6ff1a352d81df9c837330501085be550bb16abac3d338dfad887&amp;quot;. You have to remove (or rename) that container to be able to reuse that name. [1] + exit 1 drone exec --local drone は pipeline 実行時に network を作成し、pipeline が終了すると network を削除します。</description>
    </item>
    
    <item>
      <title>go-gencfg - viperの個々のアプリケーション用のラッパーのコードジェネレータ</title>
      <link>https://techblog.szksh.cloud/go-gencfg/</link>
      <pubDate>Thu, 06 Sep 2018 23:59:35 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/go-gencfg/</guid>
      <description>自作のOSS go-gencfg を紹介します。 Golang で viper という汎用的な設定管理ライブラリがありますが、 特定のアプリケーション用に viper のラッパーを生成するCLIツールです。
使い方や開発の背景を書こうかと思いましたが、だいたい README に書いてあるので そちらを御覧ください。
https://github.com/suzuki-shunsuke/go-gencfg/blob/master/README.md</description>
    </item>
    
  </channel>
</rss>
