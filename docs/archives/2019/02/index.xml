<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/02 on melody</title>
    <link>https://techblog.szksh.cloud/archives/2019/02/</link>
    <description>Recent content in 2019/02 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language><atom:link href="https://techblog.szksh.cloud/archives/2019/02/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Goの設定管理で viper の代わりに confita を使う</title>
      <link>https://techblog.szksh.cloud/use-confita/</link>
      <pubDate>Sat, 16 Feb 2019 18:38:45 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/use-confita/</guid>
      <description>Golang の設定管理のライブラリといえば viper が有名ですが、 confita も良さそうだったので紹介したいと思います。
confita の機能としては以下のようなものがあります。
 構造体に設定をマッピング flag や環境変数、設定ファイルに対応 複数の設定ファイルに対応  構造体に設定をマッピングすることで、https://github.com/go-playground/validator のようなライブラリを使って設定のバリデーションが出来ます。
また viper は v1.3.1 の時点で複数の設定ファイルを扱いにくいです。
 Viper can search multiple paths, but currently a single Viper instance only supports a single configuration file.
 k8s で ConfigMap と Secret を設定ファイルとして扱う場合、複数のファイルを扱えないと不便です。 その点 confita は複数の設定ファイルを問題なく扱えます。
以下はフラグで指定した複数の設定ファイルから設定を読み込む簡単なサンプルです。
import ( &amp;#34;context&amp;#34; &amp;#34;gopkg.in/go-playground/validator.v9&amp;#34; &amp;#34;github.com/heetch/confita&amp;#34; &amp;#34;github.com/heetch/confita/backend&amp;#34; &amp;#34;github.com/heetch/confita/backend/file&amp;#34; flag &amp;#34;github.com/spf13/pflag&amp;#34; ) func loadConfig(ctx context.Context) (Config, error) { cps := flag.StringSliceP(&amp;#34;config&amp;#34;, &amp;#34;c&amp;#34;, nil, &amp;#34;configuration file path&amp;#34;) flag.</description>
    </item>
    
    <item>
      <title>JS以外でのnpmの活用</title>
      <link>https://techblog.szksh.cloud/use-npm/</link>
      <pubDate>Thu, 14 Feb 2019 21:34:22 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/use-npm/</guid>
      <description>npm は Node.js のパッケージマネージャーですが、自分はJS以外のプロジェクトでも使えると思っています。 実際、Goのアプリケーション、OSS、ansible role, playbook など種類を問わず、自分が管理している多くのリポジトリで使っています。 ただ、GoのOSSで npm 使っているのは自分以外で見たことはないですし、 正直あまり賛同はされないかなと思いますが、こういう考え方もあると思っていただけたらと思います。
npm を使う理由は
 Node製のツールを使うため npm scripts を使うため (今回書きたいのはこっち)  の2つあります。
Node製のツール  husky: Git Hookを設定 commitlint: commit メッセージのlint standard-version: コミットログによって Change Log を生成  などを使っています。 Nodeはバージョンの変化が速く、互換性が壊れたりとかも多い印象ですが、 グローバルにインストールしなくてもリポジトリごとに install 出来る(package.jsonで管理できる)のでその点は(特にチーム開発では)良いと思います。
npm scripts npm scripts によってそのリポジトリの開発に使うコマンド群を管理するということを自分はしています。
https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/package.json
なにもツールを使わない場合に比べ、こうすることでチーム全体でコマンドを統一できますし、一連のコマンドをスクリプト化して npm scripts で実行できるようにするなど、自動化も促進されます。
ごく簡単な自動化の例ですが、tag を打つと同時にソースコード中のバージョン番号を更新するのを npm run tag v1.1.0 といったコマンドで出来るようにしています。 こうすることで tag とversionコマンドで出力されるバージョンが違うなんてことを防ぐことが出来ます。
https://github.com/suzuki-shunsuke/gomic/blob/v0.5.7/scripts/tag.sh
また、オプションによって動作が変わるようなコマンドは npm scripts によって実行することでオプションを統一できます。 例えば gofmt は -s オプションの有無で結果が変わります。</description>
    </item>
    
    <item>
      <title>Golang の好きなところ</title>
      <link>https://techblog.szksh.cloud/golang-good-point/</link>
      <pubDate>Sun, 10 Feb 2019 17:49:58 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/golang-good-point/</guid>
      <description>自分は 2017/8頃(曖昧)からメインで書く言語をPythonからGolangに変更しました。 Goを書き始めて割と早い段階でGoが一番好きになりました。 そこでなんで Go が好きなのかということを頑張って言語化しようと思います。
若干他の言語と比較する部分もありますが、決して他の言語をディスったり、 他の言語より優れているということが言いたいわけではないのでご了承ください。
 依存するものが小さく、バイナリ1つインストールするだけで良い  Prometheus の exporter とかインストールするの簡単 Docker Imageも最小限になる   静的型付け  ビルド出来ている時点で一定の信頼性が担保されている よく知らないコードを読んだり修正するときとかだいぶ有り難い   GoDocが素晴らしい  何もしなくてもライブラリのドキュメントが出来上がっている   ライブラリの公開が容易  GitHubに公開するだけ npm や pypi のようなレジストリがないので楽   go test とか go vet, gofmt みたいに標準ツールが揃っている コーディング規約で悩む必要がない lintツールが充実している  gometalinter とか使っておけば OK lintできる環境を構築するのにそこまで頑張らなくて良い   エラーハンドリングが暗黙的に省略できないので信頼性が高い  Goのエラーハンドリング嫌いって人もいるし、v2で改善されるって話も聞くけど、自分はむしろ好き(面倒なのは理解できるけど)   言語仕様がシンプル(客観的な根拠はないし、難しい部分もあるけど、そんな気がする)  メタプログラミング使った、魔術的なコードになりにくい   interface 使ってコードを疎結合にするのが書いてて気持ちいい 並列処理が書きやすい  </description>
    </item>
    
    <item>
      <title>go-error-handling-logging-practice v0.2</title>
      <link>https://techblog.szksh.cloud/golang-logging-error-handling-practice-0.2.0/</link>
      <pubDate>Fri, 01 Feb 2019 22:26:13 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/golang-logging-error-handling-practice-0.2.0/</guid>
      <description>以前 Golang のロギング・エラーハンドリングについて書きました。
 https://suzuki-shunsuke.github.io/golang-logging-error-handling-practice/ https://github.com/suzuki-shunsuke/go-error-handling-logging-practice  それを少し v0.1 から v0.2 に互換性を壊す形でアップデートしようかと思います。 本記事ではその変更点について書きます。
変更点 関数のエラーに情報を付与する責務を関数に割り当てていたものを、呼び出し元に割り当てるようにします。
具体的には元々
func createUser(name string, age int) error { return errlog.Wrap(checkName(name), logrus.Fields{&amp;#34;age&amp;#34;: age}, &amp;#34;failed to create a user&amp;#34;) } だったものが
func createUser(name string, age int) error { return errlog.Wrap(checkName(name), nil, &amp;#34;user name is invalid&amp;#34;) } になります。
変更理由 メタ情報のフィールド名はコンテキストに依存します。 上記の例だとユーザー名というメタ情報のフィールド名は name より user_name や admin_name, owner_name としたほうが適切かもしれません。それは関数内部では分からず、呼び出し元でないと分かりません。呼び出し元でないとフィールド名の衝突が避けられないこともあるでしょう。
メッセージに関しても同様のことが言えます。 また、元々 v0.1 ではユーザーが定義した関数と
 標準関数やサードパーティのライブラリなど、プロジェクト外部で定義された関数 interface の関数やメソッド  を区別し、前者では関数側でエラーに情報を付与させる一方、後者では呼び出し元で情報を付与させるというふうにしていました。</description>
    </item>
    
  </channel>
</rss>
