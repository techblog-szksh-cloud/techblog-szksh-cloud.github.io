<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019/01 on melody</title>
    <link>https://techblog.szksh.cloud/archives/2019/01/</link>
    <description>Recent content in 2019/01 on melody</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language><atom:link href="https://techblog.szksh.cloud/archives/2019/01/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terraform Providerで import を実装する方法</title>
      <link>https://techblog.szksh.cloud/terraform-provider-graylog-import/</link>
      <pubDate>Fri, 25 Jan 2019 22:38:28 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/terraform-provider-graylog-import/</guid>
      <description>terraform provider graylog で alert condition と stream rule の import を実装しました。
 https://github.com/suzuki-shunsuke/go-graylog/pull/59 https://github.com/suzuki-shunsuke/go-graylog/pull/60  そこで import を実装する方法を紹介したいと思います。
terraform でリソースをimportするにはリソースがimportをサポートしている必要があります。 schema.Resource の Importer フィールドですね。リソースがIDだけでGet出来る場合、schema.ImportStatePassthroughを使えば終わりです。 一方、Graylogのalert condition や stream rule はIDだけでなく、stream id も必要になります。 terraform import コマンドは1つの引数しか取らないため、サポートできないのでは？と以前まで思っていました。 そういった場合、次のようにStateFuncを実装すればサポートできます。
https://github.com/suzuki-shunsuke/go-graylog/pull/59/commits/baee1165f49d2bc21b6ea7551ceff6b7daf01543#diff-f41be2a3640efd12ad4e808d77c5c8d5
# &amp;quot;/&amp;quot; で区切って stream id と ID を渡す $ terraform import graylog_alarm_callback.test 5bb1b4b5c9e77bbbbbbbbbbb/5c4acaefc9e77bbbbbbbbbbb 区切り文字は何でも良いのでしょうが、公式のprovider が &amp;ldquo;/&amp;rdquo; で区切っていたのでそれに従うことにしました。
https://www.terraform.io/docs/providers/google/r/spanner_database.html#import
https://godoc.org/github.com/hashicorp/terraform/helper/schema#ImportStatePassthrough の実装を見てみれば分かりますが、 StateFunc の中では GET API を叩いてリソースを取得したりはしません。 terraform import コマンドの標準出力を見ると分かりますが refresh を実行しているのでそこでGETしているようです。 StateFunc は *schema.</description>
    </item>
    
    <item>
      <title>GithubをFree Planにダウングレードした</title>
      <link>https://techblog.szksh.cloud/downgrade-github-plan/</link>
      <pubDate>Sun, 20 Jan 2019 12:27:26 +0900</pubDate>
      
      <guid>https://techblog.szksh.cloud/downgrade-github-plan/</guid>
      <description>GitHub のプラン体系が変わり、無料プランでも無制限でprivate repositoryが作れるようになりました。
https://github.blog/2019-01-07-new-year-new-github/
そこで無料プランにダウングレードすることにしました。
 https://help.github.com/articles/downgrading-your-github-billing-plan/ https://blog.jnito.com/entry/2019/01/09/081913  無料プランではwikiはpublic repositoryでしか使えないので、 private repository の wiki を 移行することにしました。
private なソースコード(サービス)のためのwikiではなく、 個人的なメモが書いてあるだけだったので移行することに特に問題はありませんでした。
全 private repository の wiki を clone そこでまずはそういった wiki を clone して一つのリポジトリにまとめることにしました。
https://github.com/suzuki-shunsuke/foo の wiki は https://github.com/suzuki-shunsuke/foo.wiki で clone できます。
次のようなコマンドを実行し、private repositoryのwikiを全部cloneしました。
https://developer.github.com/v3/repos/#list-your-repositories
curl &amp;#34;https://api.github.com/user/repos?access_token=$GITHUB_TOKEN&amp;amp;visibility=private&amp;#34; | jq -r &amp;#39;.[].html_url&amp;#39; | xargs -I{} -n 1 git clone {}.wiki wikiが存在しないものに関しては clone に失敗します。 API で wiki のリストが取得できると良かったんですが、 wikiに関するAPIはなさそうです。
また /user/repos API のレスポンスの has_wiki はwikiが存在しなくても、wikiが無効化されてなければ true なようです。</description>
    </item>
    
  </channel>
</rss>
